{"created": 1732308247.304753, "duration": 3.5975613594055176, "exitcode": 1, "root": "/testbed", "environment": {}, "summary": {"failed": 206, "passed": 7, "skipped": 1, "total": 214, "collected": 214}, "collectors": [{"nodeid": "", "outcome": "passed", "result": [{"nodeid": "tests", "type": "Package"}]}, {"nodeid": "tests/messages/test_catalog.py", "outcome": "failed", "result": [], "longrepr": "ImportError while importing test module '/testbed/tests/messages/test_catalog.py'.\nHint: make sure your test modules/packages have valid Python names.\nTraceback:\n/usr/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\ntests/messages/test_catalog.py:18: in <module>\n    from babel.dates import UTC, format_datetime\nbabel/dates.py:29: in <module>\n    from babel import localtime\nbabel/localtime/__init__.py:18: in <module>\n    from babel.localtime._unix import _get_localzone\nbabel/localtime/_unix.py:4: in <module>\n    from babel.localtime._helpers import _get_tzinfo, _get_tzinfo_from_file, _get_tzinfo_or_raise\nE   ImportError: cannot import name '_get_tzinfo_from_file' from 'babel.localtime._helpers' (/testbed/babel/localtime/_helpers.py)"}, {"nodeid": "tests/messages/test_checkers.py", "outcome": "failed", "result": [], "longrepr": "ImportError while importing test module '/testbed/tests/messages/test_checkers.py'.\nHint: make sure your test modules/packages have valid Python names.\nTraceback:\n/usr/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\ntests/messages/test_checkers.py:19: in <module>\n    from babel.dates import format_datetime\nbabel/dates.py:29: in <module>\n    from babel import localtime\nbabel/localtime/__init__.py:18: in <module>\n    from babel.localtime._unix import _get_localzone\nbabel/localtime/_unix.py:4: in <module>\n    from babel.localtime._helpers import _get_tzinfo, _get_tzinfo_from_file, _get_tzinfo_or_raise\nE   ImportError: cannot import name '_get_tzinfo_from_file' from 'babel.localtime._helpers' (/testbed/babel/localtime/_helpers.py)"}, {"nodeid": "tests/messages/test_extract.py", "outcome": "failed", "result": [], "longrepr": "ImportError while importing test module '/testbed/tests/messages/test_extract.py'.\nHint: make sure your test modules/packages have valid Python names.\nTraceback:\n/usr/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\ntests/messages/test_extract.py:20: in <module>\n    from babel.messages import extract\nbabel/messages/__init__.py:11: in <module>\n    from babel.messages.catalog import (\nbabel/messages/catalog.py:22: in <module>\n    from babel.dates import format_datetime\nbabel/dates.py:29: in <module>\n    from babel import localtime\nbabel/localtime/__init__.py:18: in <module>\n    from babel.localtime._unix import _get_localzone\nbabel/localtime/_unix.py:4: in <module>\n    from babel.localtime._helpers import _get_tzinfo, _get_tzinfo_from_file, _get_tzinfo_or_raise\nE   ImportError: cannot import name '_get_tzinfo_from_file' from 'babel.localtime._helpers' (/testbed/babel/localtime/_helpers.py)"}, {"nodeid": "tests/messages/test_frontend.py", "outcome": "failed", "result": [], "longrepr": "ImportError while importing test module '/testbed/tests/messages/test_frontend.py'.\nHint: make sure your test modules/packages have valid Python names.\nTraceback:\n/usr/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\ntests/messages/test_frontend.py:27: in <module>\n    from babel.dates import format_datetime\nbabel/dates.py:29: in <module>\n    from babel import localtime\nbabel/localtime/__init__.py:18: in <module>\n    from babel.localtime._unix import _get_localzone\nbabel/localtime/_unix.py:4: in <module>\n    from babel.localtime._helpers import _get_tzinfo, _get_tzinfo_from_file, _get_tzinfo_or_raise\nE   ImportError: cannot import name '_get_tzinfo_from_file' from 'babel.localtime._helpers' (/testbed/babel/localtime/_helpers.py)"}, {"nodeid": "tests/messages/test_js_extract.py", "outcome": "failed", "result": [], "longrepr": "ImportError while importing test module '/testbed/tests/messages/test_js_extract.py'.\nHint: make sure your test modules/packages have valid Python names.\nTraceback:\n/usr/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\ntests/messages/test_js_extract.py:5: in <module>\n    from babel.messages import extract\nbabel/messages/__init__.py:11: in <module>\n    from babel.messages.catalog import (\nbabel/messages/catalog.py:22: in <module>\n    from babel.dates import format_datetime\nbabel/dates.py:29: in <module>\n    from babel import localtime\nbabel/localtime/__init__.py:18: in <module>\n    from babel.localtime._unix import _get_localzone\nbabel/localtime/_unix.py:4: in <module>\n    from babel.localtime._helpers import _get_tzinfo, _get_tzinfo_from_file, _get_tzinfo_or_raise\nE   ImportError: cannot import name '_get_tzinfo_from_file' from 'babel.localtime._helpers' (/testbed/babel/localtime/_helpers.py)"}, {"nodeid": "tests/messages/test_jslexer.py", "outcome": "failed", "result": [], "longrepr": "ImportError while importing test module '/testbed/tests/messages/test_jslexer.py'.\nHint: make sure your test modules/packages have valid Python names.\nTraceback:\n/usr/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\ntests/messages/test_jslexer.py:1: in <module>\n    from babel.messages import jslexer\nbabel/messages/__init__.py:11: in <module>\n    from babel.messages.catalog import (\nbabel/messages/catalog.py:22: in <module>\n    from babel.dates import format_datetime\nbabel/dates.py:29: in <module>\n    from babel import localtime\nbabel/localtime/__init__.py:18: in <module>\n    from babel.localtime._unix import _get_localzone\nbabel/localtime/_unix.py:4: in <module>\n    from babel.localtime._helpers import _get_tzinfo, _get_tzinfo_from_file, _get_tzinfo_or_raise\nE   ImportError: cannot import name '_get_tzinfo_from_file' from 'babel.localtime._helpers' (/testbed/babel/localtime/_helpers.py)"}, {"nodeid": "tests/messages/test_mofile.py", "outcome": "failed", "result": [], "longrepr": "ImportError while importing test module '/testbed/tests/messages/test_mofile.py'.\nHint: make sure your test modules/packages have valid Python names.\nTraceback:\n/usr/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\ntests/messages/test_mofile.py:17: in <module>\n    from babel.messages import Catalog, mofile\nbabel/messages/__init__.py:11: in <module>\n    from babel.messages.catalog import (\nbabel/messages/catalog.py:22: in <module>\n    from babel.dates import format_datetime\nbabel/dates.py:29: in <module>\n    from babel import localtime\nbabel/localtime/__init__.py:18: in <module>\n    from babel.localtime._unix import _get_localzone\nbabel/localtime/_unix.py:4: in <module>\n    from babel.localtime._helpers import _get_tzinfo, _get_tzinfo_from_file, _get_tzinfo_or_raise\nE   ImportError: cannot import name '_get_tzinfo_from_file' from 'babel.localtime._helpers' (/testbed/babel/localtime/_helpers.py)"}, {"nodeid": "tests/messages/test_normalized_string.py", "outcome": "failed", "result": [], "longrepr": "ImportError while importing test module '/testbed/tests/messages/test_normalized_string.py'.\nHint: make sure your test modules/packages have valid Python names.\nTraceback:\n/usr/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\ntests/messages/test_normalized_string.py:1: in <module>\n    from babel.messages.pofile import _NormalizedString\nbabel/messages/__init__.py:11: in <module>\n    from babel.messages.catalog import (\nbabel/messages/catalog.py:22: in <module>\n    from babel.dates import format_datetime\nbabel/dates.py:29: in <module>\n    from babel import localtime\nbabel/localtime/__init__.py:18: in <module>\n    from babel.localtime._unix import _get_localzone\nbabel/localtime/_unix.py:4: in <module>\n    from babel.localtime._helpers import _get_tzinfo, _get_tzinfo_from_file, _get_tzinfo_or_raise\nE   ImportError: cannot import name '_get_tzinfo_from_file' from 'babel.localtime._helpers' (/testbed/babel/localtime/_helpers.py)"}, {"nodeid": "tests/messages/test_plurals.py", "outcome": "failed", "result": [], "longrepr": "ImportError while importing test module '/testbed/tests/messages/test_plurals.py'.\nHint: make sure your test modules/packages have valid Python names.\nTraceback:\n/usr/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\ntests/messages/test_plurals.py:15: in <module>\n    from babel.messages import plurals\nbabel/messages/__init__.py:11: in <module>\n    from babel.messages.catalog import (\nbabel/messages/catalog.py:22: in <module>\n    from babel.dates import format_datetime\nbabel/dates.py:29: in <module>\n    from babel import localtime\nbabel/localtime/__init__.py:18: in <module>\n    from babel.localtime._unix import _get_localzone\nbabel/localtime/_unix.py:4: in <module>\n    from babel.localtime._helpers import _get_tzinfo, _get_tzinfo_from_file, _get_tzinfo_or_raise\nE   ImportError: cannot import name '_get_tzinfo_from_file' from 'babel.localtime._helpers' (/testbed/babel/localtime/_helpers.py)"}, {"nodeid": "tests/messages/test_pofile.py", "outcome": "failed", "result": [], "longrepr": "ImportError while importing test module '/testbed/tests/messages/test_pofile.py'.\nHint: make sure your test modules/packages have valid Python names.\nTraceback:\n/usr/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\ntests/messages/test_pofile.py:20: in <module>\n    from babel.messages import pofile\nbabel/messages/__init__.py:11: in <module>\n    from babel.messages.catalog import (\nbabel/messages/catalog.py:22: in <module>\n    from babel.dates import format_datetime\nbabel/dates.py:29: in <module>\n    from babel import localtime\nbabel/localtime/__init__.py:18: in <module>\n    from babel.localtime._unix import _get_localzone\nbabel/localtime/_unix.py:4: in <module>\n    from babel.localtime._helpers import _get_tzinfo, _get_tzinfo_from_file, _get_tzinfo_or_raise\nE   ImportError: cannot import name '_get_tzinfo_from_file' from 'babel.localtime._helpers' (/testbed/babel/localtime/_helpers.py)"}, {"nodeid": "tests/messages/test_setuptools_frontend.py", "outcome": "skipped", "result": [], "longrepr": "('/testbed/tests/messages/test_setuptools_frontend.py', 12, \"Skipped: could not import 'setuptools': No module named 'setuptools'\")"}, {"nodeid": "tests/messages", "outcome": "passed", "result": [{"nodeid": "tests/messages/test_catalog.py", "type": "Module"}, {"nodeid": "tests/messages/test_checkers.py", "type": "Module"}, {"nodeid": "tests/messages/test_extract.py", "type": "Module"}, {"nodeid": "tests/messages/test_frontend.py", "type": "Module"}, {"nodeid": "tests/messages/test_js_extract.py", "type": "Module"}, {"nodeid": "tests/messages/test_jslexer.py", "type": "Module"}, {"nodeid": "tests/messages/test_mofile.py", "type": "Module"}, {"nodeid": "tests/messages/test_normalized_string.py", "type": "Module"}, {"nodeid": "tests/messages/test_plurals.py", "type": "Module"}, {"nodeid": "tests/messages/test_pofile.py", "type": "Module"}, {"nodeid": "tests/messages/test_setuptools_frontend.py", "type": "Module"}]}, {"nodeid": "tests/test_core.py::TestLocaleClass", "outcome": "failed", "result": [], "longrepr": ".venv/lib/python3.10/site-packages/pluggy/_hooks.py:513: in __call__\n    return self._hookexec(self.name, self._hookimpls.copy(), kwargs, firstresult)\n.venv/lib/python3.10/site-packages/pluggy/_manager.py:120: in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n.venv/lib/python3.10/site-packages/_pytest/python.py:245: in pytest_pycollect_makeitem\n    return list(collector._genfunctions(name, obj))\n.venv/lib/python3.10/site-packages/_pytest/python.py:462: in _genfunctions\n    self.ihook.pytest_generate_tests.call_extra(methods, dict(metafunc=metafunc))\n.venv/lib/python3.10/site-packages/pluggy/_hooks.py:574: in call_extra\n    return self._hookexec(self.name, hookimpls, kwargs, firstresult)\n.venv/lib/python3.10/site-packages/pluggy/_manager.py:120: in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\ntests/conftest.py:31: in pytest_generate_tests\n    metafunc.parametrize(\"locale\", list(locale_identifiers()))\nE   TypeError: 'NoneType' object is not iterable"}, {"nodeid": "tests/test_core.py", "outcome": "passed", "result": [{"nodeid": "tests/test_core.py::test_locale_provides_access_to_cldr_locale_data", "type": "Function", "lineno": 18}, {"nodeid": "tests/test_core.py::test_locale_repr", "type": "Function", "lineno": 24}, {"nodeid": "tests/test_core.py::test_locale_comparison", "type": "Function", "lineno": 30}, {"nodeid": "tests/test_core.py::test_can_return_default_locale", "type": "Function", "lineno": 44}, {"nodeid": "tests/test_core.py::test_ignore_invalid_locales_in_lc_ctype", "type": "Function", "lineno": 49}, {"nodeid": "tests/test_core.py::test_get_global", "type": "Function", "lineno": 57}, {"nodeid": "tests/test_core.py::test_hash", "type": "Function", "lineno": 63}, {"nodeid": "tests/test_core.py::TestLocaleClass", "type": "Class"}, {"nodeid": "tests/test_core.py::test_default_locale", "type": "Function", "lineno": 266}, {"nodeid": "tests/test_core.py::test_negotiate_locale", "type": "Function", "lineno": 280}, {"nodeid": "tests/test_core.py::test_parse_locale", "type": "Function", "lineno": 293}, {"nodeid": "tests/test_core.py::test_compatible_classes_in_global_and_localedata[babel/global.dat]", "type": "Function", "lineno": 311}, {"nodeid": "tests/test_core.py::test_compatible_classes_in_global_and_localedata[babel/locale-data/root.dat]", "type": "Function", "lineno": 311}, {"nodeid": "tests/test_core.py::test_compatible_classes_in_global_and_localedata[babel/locale-data/en.dat]", "type": "Function", "lineno": 311}, {"nodeid": "tests/test_core.py::test_compatible_classes_in_global_and_localedata[babel/locale-data/en_US.dat]", "type": "Function", "lineno": 311}, {"nodeid": "tests/test_core.py::test_compatible_classes_in_global_and_localedata[babel/locale-data/en_US_POSIX.dat]", "type": "Function", "lineno": 311}, {"nodeid": "tests/test_core.py::test_compatible_classes_in_global_and_localedata[babel/locale-data/zh_Hans_CN.dat]", "type": "Function", "lineno": 311}, {"nodeid": "tests/test_core.py::test_compatible_classes_in_global_and_localedata[babel/locale-data/zh_Hant_TW.dat]", "type": "Function", "lineno": 311}, {"nodeid": "tests/test_core.py::test_compatible_classes_in_global_and_localedata[babel/locale-data/es_419.dat]", "type": "Function", "lineno": 311}, {"nodeid": "tests/test_core.py::test_issue_601_no_language_name_but_has_variant", "type": "Function", "lineno": 336}, {"nodeid": "tests/test_core.py::test_issue_814", "type": "Function", "lineno": 346}]}, {"nodeid": "tests/test_date_intervals.py", "outcome": "failed", "result": [], "longrepr": "ImportError while importing test module '/testbed/tests/test_date_intervals.py'.\nHint: make sure your test modules/packages have valid Python names.\nTraceback:\n/usr/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\ntests/test_date_intervals.py:3: in <module>\n    from babel import dates\nbabel/dates.py:29: in <module>\n    from babel import localtime\nbabel/localtime/__init__.py:18: in <module>\n    from babel.localtime._unix import _get_localzone\nbabel/localtime/_unix.py:4: in <module>\n    from babel.localtime._helpers import _get_tzinfo, _get_tzinfo_from_file, _get_tzinfo_or_raise\nE   ImportError: cannot import name '_get_tzinfo_from_file' from 'babel.localtime._helpers' (/testbed/babel/localtime/_helpers.py)"}, {"nodeid": "tests/test_dates.py", "outcome": "failed", "result": [], "longrepr": "ImportError while importing test module '/testbed/tests/test_dates.py'.\nHint: make sure your test modules/packages have valid Python names.\nTraceback:\n/usr/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\ntests/test_dates.py:19: in <module>\n    from babel import Locale, dates\nbabel/dates.py:29: in <module>\n    from babel import localtime\nbabel/localtime/__init__.py:18: in <module>\n    from babel.localtime._unix import _get_localzone\nbabel/localtime/_unix.py:4: in <module>\n    from babel.localtime._helpers import _get_tzinfo, _get_tzinfo_from_file, _get_tzinfo_or_raise\nE   ImportError: cannot import name '_get_tzinfo_from_file' from 'babel.localtime._helpers' (/testbed/babel/localtime/_helpers.py)"}, {"nodeid": "tests/test_day_periods.py", "outcome": "failed", "result": [], "longrepr": "ImportError while importing test module '/testbed/tests/test_day_periods.py'.\nHint: make sure your test modules/packages have valid Python names.\nTraceback:\n/usr/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\ntests/test_day_periods.py:5: in <module>\n    import babel.dates as dates\nbabel/dates.py:29: in <module>\n    from babel import localtime\nbabel/localtime/__init__.py:18: in <module>\n    from babel.localtime._unix import _get_localzone\nbabel/localtime/_unix.py:4: in <module>\n    from babel.localtime._helpers import _get_tzinfo, _get_tzinfo_from_file, _get_tzinfo_or_raise\nE   ImportError: cannot import name '_get_tzinfo_from_file' from 'babel.localtime._helpers' (/testbed/babel/localtime/_helpers.py)"}, {"nodeid": "tests/test_languages.py", "outcome": "passed", "result": [{"nodeid": "tests/test_languages.py::test_official_languages", "type": "Function", "lineno": 3}, {"nodeid": "tests/test_languages.py::test_get_language_info", "type": "Function", "lineno": 11}]}, {"nodeid": "tests/test_lists.py", "outcome": "passed", "result": [{"nodeid": "tests/test_lists.py::test_format_list", "type": "Function", "lineno": 5}, {"nodeid": "tests/test_lists.py::test_format_list_error", "type": "Function", "lineno": 17}]}, {"nodeid": "tests/test_localedata.py::MergeResolveTestCase", "outcome": "passed", "result": [{"nodeid": "tests/test_localedata.py::MergeResolveTestCase::test_merge_items", "type": "TestCaseFunction", "lineno": 27}, {"nodeid": "tests/test_localedata.py::MergeResolveTestCase::test_merge_nested_dict", "type": "TestCaseFunction", "lineno": 32}, {"nodeid": "tests/test_localedata.py::MergeResolveTestCase::test_merge_nested_dict_no_overlap", "type": "TestCaseFunction", "lineno": 38}, {"nodeid": "tests/test_localedata.py::MergeResolveTestCase::test_merge_with_alias_and_resolve", "type": "TestCaseFunction", "lineno": 44}]}, {"nodeid": "tests/test_localedata.py", "outcome": "passed", "result": [{"nodeid": "tests/test_localedata.py::MergeResolveTestCase", "type": "UnitTestCase"}, {"nodeid": "tests/test_localedata.py::test_load", "type": "Function", "lineno": 60}, {"nodeid": "tests/test_localedata.py::test_merge", "type": "Function", "lineno": 65}, {"nodeid": "tests/test_localedata.py::test_locale_identification", "type": "Function", "lineno": 71}, {"nodeid": "tests/test_localedata.py::test_unique_ids", "type": "Function", "lineno": 76}, {"nodeid": "tests/test_localedata.py::test_mixedcased_locale", "type": "Function", "lineno": 85}, {"nodeid": "tests/test_localedata.py::test_locale_argument_acceptance", "type": "Function", "lineno": 92}, {"nodeid": "tests/test_localedata.py::test_locale_identifiers_cache", "type": "Function", "lineno": 104}, {"nodeid": "tests/test_localedata.py::test_locale_name_cleanup", "type": "Function", "lineno": 125}, {"nodeid": "tests/test_localedata.py::test_reserved_locale_names", "type": "Function", "lineno": 147}]}, {"nodeid": "tests/test_numbers.py::FormatDecimalTestCase", "outcome": "passed", "result": [{"nodeid": "tests/test_numbers.py::FormatDecimalTestCase::test_compact", "type": "TestCaseFunction", "lineno": 140}, {"nodeid": "tests/test_numbers.py::FormatDecimalTestCase::test_decimals", "type": "TestCaseFunction", "lineno": 79}, {"nodeid": "tests/test_numbers.py::FormatDecimalTestCase::test_default_rounding", "type": "TestCaseFunction", "lineno": 46}, {"nodeid": "tests/test_numbers.py::FormatDecimalTestCase::test_formatting_of_very_small_decimals", "type": "TestCaseFunction", "lineno": 107}, {"nodeid": "tests/test_numbers.py::FormatDecimalTestCase::test_group_separator", "type": "TestCaseFunction", "lineno": 123}, {"nodeid": "tests/test_numbers.py::FormatDecimalTestCase::test_nan_and_infinity", "type": "TestCaseFunction", "lineno": 113}, {"nodeid": "tests/test_numbers.py::FormatDecimalTestCase::test_patterns", "type": "TestCaseFunction", "lineno": 33}, {"nodeid": "tests/test_numbers.py::FormatDecimalTestCase::test_scientific_notation", "type": "TestCaseFunction", "lineno": 86}, {"nodeid": "tests/test_numbers.py::FormatDecimalTestCase::test_significant_digits", "type": "TestCaseFunction", "lineno": 58}, {"nodeid": "tests/test_numbers.py::FormatDecimalTestCase::test_subpatterns", "type": "TestCaseFunction", "lineno": 42}]}, {"nodeid": "tests/test_numbers.py::NumberParsingTestCase", "outcome": "passed", "result": [{"nodeid": "tests/test_numbers.py::NumberParsingTestCase::test_can_parse_decimals", "type": "TestCaseFunction", "lineno": 188}, {"nodeid": "tests/test_numbers.py::NumberParsingTestCase::test_parse_decimal_strict_mode", "type": "TestCaseFunction", "lineno": 197}]}, {"nodeid": "tests/test_numbers.py", "outcome": "passed", "result": [{"nodeid": "tests/test_numbers.py::FormatDecimalTestCase", "type": "UnitTestCase"}, {"nodeid": "tests/test_numbers.py::NumberParsingTestCase", "type": "UnitTestCase"}, {"nodeid": "tests/test_numbers.py::test_list_currencies", "type": "Function", "lineno": 239}, {"nodeid": "tests/test_numbers.py::test_validate_currency", "type": "Function", "lineno": 255}, {"nodeid": "tests/test_numbers.py::test_is_currency", "type": "Function", "lineno": 263}, {"nodeid": "tests/test_numbers.py::test_normalize_currency", "type": "Function", "lineno": 275}, {"nodeid": "tests/test_numbers.py::test_get_currency_name", "type": "Function", "lineno": 287}, {"nodeid": "tests/test_numbers.py::test_get_currency_symbol", "type": "Function", "lineno": 292}, {"nodeid": "tests/test_numbers.py::test_get_currency_precision", "type": "Function", "lineno": 296}, {"nodeid": "tests/test_numbers.py::test_get_currency_unit_pattern", "type": "Function", "lineno": 301}, {"nodeid": "tests/test_numbers.py::test_get_territory_currencies", "type": "Function", "lineno": 312}, {"nodeid": "tests/test_numbers.py::test_get_decimal_symbol", "type": "Function", "lineno": 337}, {"nodeid": "tests/test_numbers.py::test_get_plus_sign_symbol", "type": "Function", "lineno": 348}, {"nodeid": "tests/test_numbers.py::test_get_minus_sign_symbol", "type": "Function", "lineno": 358}, {"nodeid": "tests/test_numbers.py::test_get_exponential_symbol", "type": "Function", "lineno": 369}, {"nodeid": "tests/test_numbers.py::test_get_group_symbol", "type": "Function", "lineno": 380}, {"nodeid": "tests/test_numbers.py::test_get_infinity_symbol", "type": "Function", "lineno": 390}, {"nodeid": "tests/test_numbers.py::test_decimal_precision", "type": "Function", "lineno": 397}, {"nodeid": "tests/test_numbers.py::test_format_decimal", "type": "Function", "lineno": 403}, {"nodeid": "tests/test_numbers.py::test_format_decimal_precision[10000-10,000]", "type": "Function", "lineno": 424}, {"nodeid": "tests/test_numbers.py::test_format_decimal_precision[1-1]", "type": "Function", "lineno": 424}, {"nodeid": "tests/test_numbers.py::test_format_decimal_precision[1.0-1]", "type": "Function", "lineno": 424}, {"nodeid": "tests/test_numbers.py::test_format_decimal_precision[1.1-1.1]", "type": "Function", "lineno": 424}, {"nodeid": "tests/test_numbers.py::test_format_decimal_precision[1.11-1.11]", "type": "Function", "lineno": 424}, {"nodeid": "tests/test_numbers.py::test_format_decimal_precision[1.110-1.11]", "type": "Function", "lineno": 424}, {"nodeid": "tests/test_numbers.py::test_format_decimal_precision[1.001-1.001]", "type": "Function", "lineno": 424}, {"nodeid": "tests/test_numbers.py::test_format_decimal_precision[1.00100-1.001]", "type": "Function", "lineno": 424}, {"nodeid": "tests/test_numbers.py::test_format_decimal_precision[01.00100-1.001]", "type": "Function", "lineno": 424}, {"nodeid": "tests/test_numbers.py::test_format_decimal_precision[101.00100-101.001]", "type": "Function", "lineno": 424}, {"nodeid": "tests/test_numbers.py::test_format_decimal_precision[00000-0]", "type": "Function", "lineno": 424}, {"nodeid": "tests/test_numbers.py::test_format_decimal_precision[0-0]", "type": "Function", "lineno": 424}, {"nodeid": "tests/test_numbers.py::test_format_decimal_precision[0.0-0]", "type": "Function", "lineno": 424}, {"nodeid": "tests/test_numbers.py::test_format_decimal_precision[0.1-0.1]", "type": "Function", "lineno": 424}, {"nodeid": "tests/test_numbers.py::test_format_decimal_precision[0.11-0.11]", "type": "Function", "lineno": 424}, {"nodeid": "tests/test_numbers.py::test_format_decimal_precision[0.110-0.11]", "type": "Function", "lineno": 424}, {"nodeid": "tests/test_numbers.py::test_format_decimal_precision[0.001-0.001]", "type": "Function", "lineno": 424}, {"nodeid": "tests/test_numbers.py::test_format_decimal_precision[0.00100-0.001]", "type": "Function", "lineno": 424}, {"nodeid": "tests/test_numbers.py::test_format_decimal_precision[00.00100-0.001]", "type": "Function", "lineno": 424}, {"nodeid": "tests/test_numbers.py::test_format_decimal_precision[000.00100-0.001]", "type": "Function", "lineno": 424}, {"nodeid": "tests/test_numbers.py::test_format_decimal_quantization", "type": "Function", "lineno": 452}, {"nodeid": "tests/test_numbers.py::test_format_currency", "type": "Function", "lineno": 459}, {"nodeid": "tests/test_numbers.py::test_format_currency_format_type", "type": "Function", "lineno": 488}, {"nodeid": "tests/test_numbers.py::test_format_compact_currency", "type": "Function", "lineno": 520}, {"nodeid": "tests/test_numbers.py::test_format_compact_currency_invalid_format_type", "type": "Function", "lineno": 537}, {"nodeid": "tests/test_numbers.py::test_format_currency_precision[10000-$10,000.00]", "type": "Function", "lineno": 542}, {"nodeid": "tests/test_numbers.py::test_format_currency_precision[1-$1.00]", "type": "Function", "lineno": 542}, {"nodeid": "tests/test_numbers.py::test_format_currency_precision[1.0-$1.00]", "type": "Function", "lineno": 542}, {"nodeid": "tests/test_numbers.py::test_format_currency_precision[1.1-$1.10]", "type": "Function", "lineno": 542}, {"nodeid": "tests/test_numbers.py::test_format_currency_precision[1.11-$1.11]", "type": "Function", "lineno": 542}, {"nodeid": "tests/test_numbers.py::test_format_currency_precision[1.110-$1.11]", "type": "Function", "lineno": 542}, {"nodeid": "tests/test_numbers.py::test_format_currency_precision[1.001-$1.001]", "type": "Function", "lineno": 542}, {"nodeid": "tests/test_numbers.py::test_format_currency_precision[1.00100-$1.001]", "type": "Function", "lineno": 542}, {"nodeid": "tests/test_numbers.py::test_format_currency_precision[01.00100-$1.001]", "type": "Function", "lineno": 542}, {"nodeid": "tests/test_numbers.py::test_format_currency_precision[101.00100-$101.001]", "type": "Function", "lineno": 542}, {"nodeid": "tests/test_numbers.py::test_format_currency_precision[00000-$0.00]", "type": "Function", "lineno": 542}, {"nodeid": "tests/test_numbers.py::test_format_currency_precision[0-$0.00]", "type": "Function", "lineno": 542}, {"nodeid": "tests/test_numbers.py::test_format_currency_precision[0.0-$0.00]", "type": "Function", "lineno": 542}, {"nodeid": "tests/test_numbers.py::test_format_currency_precision[0.1-$0.10]", "type": "Function", "lineno": 542}, {"nodeid": "tests/test_numbers.py::test_format_currency_precision[0.11-$0.11]", "type": "Function", "lineno": 542}, {"nodeid": "tests/test_numbers.py::test_format_currency_precision[0.110-$0.11]", "type": "Function", "lineno": 542}, {"nodeid": "tests/test_numbers.py::test_format_currency_precision[0.001-$0.001]", "type": "Function", "lineno": 542}, {"nodeid": "tests/test_numbers.py::test_format_currency_precision[0.00100-$0.001]", "type": "Function", "lineno": 542}, {"nodeid": "tests/test_numbers.py::test_format_currency_precision[00.00100-$0.001]", "type": "Function", "lineno": 542}, {"nodeid": "tests/test_numbers.py::test_format_currency_precision[000.00100-$0.001]", "type": "Function", "lineno": 542}, {"nodeid": "tests/test_numbers.py::test_format_currency_quantization", "type": "Function", "lineno": 574}, {"nodeid": "tests/test_numbers.py::test_format_currency_long_display_name", "type": "Function", "lineno": 581}, {"nodeid": "tests/test_numbers.py::test_format_currency_long_display_name_all", "type": "Function", "lineno": 613}, {"nodeid": "tests/test_numbers.py::test_format_currency_long_display_name_custom_format", "type": "Function", "lineno": 621}, {"nodeid": "tests/test_numbers.py::test_format_percent", "type": "Function", "lineno": 631}, {"nodeid": "tests/test_numbers.py::test_format_percent_precision[100-10,000%]", "type": "Function", "lineno": 646}, {"nodeid": "tests/test_numbers.py::test_format_percent_precision[0.01-1%0]", "type": "Function", "lineno": 646}, {"nodeid": "tests/test_numbers.py::test_format_percent_precision[0.010-1%]", "type": "Function", "lineno": 646}, {"nodeid": "tests/test_numbers.py::test_format_percent_precision[0.011-1.1%0]", "type": "Function", "lineno": 646}, {"nodeid": "tests/test_numbers.py::test_format_percent_precision[0.0111-1.11%]", "type": "Function", "lineno": 646}, {"nodeid": "tests/test_numbers.py::test_format_percent_precision[0.01110-1.11%]", "type": "Function", "lineno": 646}, {"nodeid": "tests/test_numbers.py::test_format_percent_precision[0.01001-1.001%]", "type": "Function", "lineno": 646}, {"nodeid": "tests/test_numbers.py::test_format_percent_precision[0.0100100-1.001%]", "type": "Function", "lineno": 646}, {"nodeid": "tests/test_numbers.py::test_format_percent_precision[0.010100100-1.01001%]", "type": "Function", "lineno": 646}, {"nodeid": "tests/test_numbers.py::test_format_percent_precision[0.000000-0%]", "type": "Function", "lineno": 646}, {"nodeid": "tests/test_numbers.py::test_format_percent_precision[0-0%]", "type": "Function", "lineno": 646}, {"nodeid": "tests/test_numbers.py::test_format_percent_precision[0.00-0%]", "type": "Function", "lineno": 646}, {"nodeid": "tests/test_numbers.py::test_format_percent_precision[0.01-1%1]", "type": "Function", "lineno": 646}, {"nodeid": "tests/test_numbers.py::test_format_percent_precision[0.011-1.1%1]", "type": "Function", "lineno": 646}, {"nodeid": "tests/test_numbers.py::test_format_percent_precision[0.0110-1.1%]", "type": "Function", "lineno": 646}, {"nodeid": "tests/test_numbers.py::test_format_percent_precision[0.0001-0.01%]", "type": "Function", "lineno": 646}, {"nodeid": "tests/test_numbers.py::test_format_percent_precision[0.000100-0.01%]", "type": "Function", "lineno": 646}, {"nodeid": "tests/test_numbers.py::test_format_percent_precision[0.0000100-0.001%]", "type": "Function", "lineno": 646}, {"nodeid": "tests/test_numbers.py::test_format_percent_precision[0.00000100-0.0001%]", "type": "Function", "lineno": 646}, {"nodeid": "tests/test_numbers.py::test_format_percent_quantization", "type": "Function", "lineno": 673}, {"nodeid": "tests/test_numbers.py::test_format_scientific", "type": "Function", "lineno": 680}, {"nodeid": "tests/test_numbers.py::test_default_scientific_format", "type": "Function", "lineno": 694}, {"nodeid": "tests/test_numbers.py::test_format_scientific_precision[10000-1E4]", "type": "Function", "lineno": 704}, {"nodeid": "tests/test_numbers.py::test_format_scientific_precision[1-1E0]", "type": "Function", "lineno": 704}, {"nodeid": "tests/test_numbers.py::test_format_scientific_precision[1.0-1E0]", "type": "Function", "lineno": 704}, {"nodeid": "tests/test_numbers.py::test_format_scientific_precision[1.1-1.1E0]", "type": "Function", "lineno": 704}, {"nodeid": "tests/test_numbers.py::test_format_scientific_precision[1.11-1.11E0]", "type": "Function", "lineno": 704}, {"nodeid": "tests/test_numbers.py::test_format_scientific_precision[1.110-1.11E0]", "type": "Function", "lineno": 704}, {"nodeid": "tests/test_numbers.py::test_format_scientific_precision[1.001-1.001E0]", "type": "Function", "lineno": 704}, {"nodeid": "tests/test_numbers.py::test_format_scientific_precision[1.00100-1.001E0]", "type": "Function", "lineno": 704}, {"nodeid": "tests/test_numbers.py::test_format_scientific_precision[01.00100-1.001E0]", "type": "Function", "lineno": 704}, {"nodeid": "tests/test_numbers.py::test_format_scientific_precision[101.00100-1.01001E2]", "type": "Function", "lineno": 704}, {"nodeid": "tests/test_numbers.py::test_format_scientific_precision[00000-0E0]", "type": "Function", "lineno": 704}, {"nodeid": "tests/test_numbers.py::test_format_scientific_precision[0-0E0]", "type": "Function", "lineno": 704}, {"nodeid": "tests/test_numbers.py::test_format_scientific_precision[0.0-0E0]", "type": "Function", "lineno": 704}, {"nodeid": "tests/test_numbers.py::test_format_scientific_precision[0.1-1E-1]", "type": "Function", "lineno": 704}, {"nodeid": "tests/test_numbers.py::test_format_scientific_precision[0.11-1.1E-1]", "type": "Function", "lineno": 704}, {"nodeid": "tests/test_numbers.py::test_format_scientific_precision[0.110-1.1E-1]", "type": "Function", "lineno": 704}, {"nodeid": "tests/test_numbers.py::test_format_scientific_precision[0.001-1E-3]", "type": "Function", "lineno": 704}, {"nodeid": "tests/test_numbers.py::test_format_scientific_precision[0.00100-1E-3]", "type": "Function", "lineno": 704}, {"nodeid": "tests/test_numbers.py::test_format_scientific_precision[00.00100-1E-3]", "type": "Function", "lineno": 704}, {"nodeid": "tests/test_numbers.py::test_format_scientific_precision[000.00100-1E-3]", "type": "Function", "lineno": 704}, {"nodeid": "tests/test_numbers.py::test_format_scientific_quantization", "type": "Function", "lineno": 732}, {"nodeid": "tests/test_numbers.py::test_parse_number", "type": "Function", "lineno": 739}, {"nodeid": "tests/test_numbers.py::test_parse_decimal", "type": "Function", "lineno": 751}, {"nodeid": "tests/test_numbers.py::test_parse_grouping", "type": "Function", "lineno": 761}, {"nodeid": "tests/test_numbers.py::test_parse_pattern", "type": "Function", "lineno": 767}, {"nodeid": "tests/test_numbers.py::test_parse_pattern_negative", "type": "Function", "lineno": 786}, {"nodeid": "tests/test_numbers.py::test_numberpattern_repr", "type": "Function", "lineno": 804}, {"nodeid": "tests/test_numbers.py::test_parse_static_pattern", "type": "Function", "lineno": 814}, {"nodeid": "tests/test_numbers.py::test_parse_decimal_nbsp_heuristics", "type": "Function", "lineno": 819}, {"nodeid": "tests/test_numbers.py::test_very_small_decimal_no_quantization", "type": "Function", "lineno": 830}, {"nodeid": "tests/test_numbers.py::test_single_quotes_in_pattern", "type": "Function", "lineno": 834}]}, {"nodeid": "tests/test_plural.py::TestNextTokenTestCase", "outcome": "passed", "result": [{"nodeid": "tests/test_plural.py::TestNextTokenTestCase::test_empty", "type": "TestCaseFunction", "lineno": 202}, {"nodeid": "tests/test_plural.py::TestNextTokenTestCase::test_type_not_ok_and_value_ok", "type": "TestCaseFunction", "lineno": 214}, {"nodeid": "tests/test_plural.py::TestNextTokenTestCase::test_type_ok_and_no_value", "type": "TestCaseFunction", "lineno": 205}, {"nodeid": "tests/test_plural.py::TestNextTokenTestCase::test_type_ok_and_not_value", "type": "TestCaseFunction", "lineno": 208}, {"nodeid": "tests/test_plural.py::TestNextTokenTestCase::test_type_ok_and_value_ok", "type": "TestCaseFunction", "lineno": 211}]}, {"nodeid": "tests/test_plural.py::PluralRuleParserTestCase", "outcome": "passed", "result": [{"nodeid": "tests/test_plural.py::PluralRuleParserTestCase::test_and", "type": "TestCaseFunction", "lineno": 257}, {"nodeid": "tests/test_plural.py::PluralRuleParserTestCase::test_eq_relation", "type": "TestCaseFunction", "lineno": 243}, {"nodeid": "tests/test_plural.py::PluralRuleParserTestCase::test_error_when_unexpected_end", "type": "TestCaseFunction", "lineno": 239}, {"nodeid": "tests/test_plural.py::PluralRuleParserTestCase::test_in_range_relation", "type": "TestCaseFunction", "lineno": 246}, {"nodeid": "tests/test_plural.py::PluralRuleParserTestCase::test_negate", "type": "TestCaseFunction", "lineno": 250}, {"nodeid": "tests/test_plural.py::PluralRuleParserTestCase::test_or", "type": "TestCaseFunction", "lineno": 253}, {"nodeid": "tests/test_plural.py::PluralRuleParserTestCase::test_or_and", "type": "TestCaseFunction", "lineno": 261}]}, {"nodeid": "tests/test_plural.py", "outcome": "passed", "result": [{"nodeid": "tests/test_plural.py::test_plural_rule", "type": "Function", "lineno": 21}, {"nodeid": "tests/test_plural.py::test_plural_rule_operands_i", "type": "Function", "lineno": 30}, {"nodeid": "tests/test_plural.py::test_plural_rule_operands_v", "type": "Function", "lineno": 36}, {"nodeid": "tests/test_plural.py::test_plural_rule_operands_w", "type": "Function", "lineno": 43}, {"nodeid": "tests/test_plural.py::test_plural_rule_operands_f", "type": "Function", "lineno": 50}, {"nodeid": "tests/test_plural.py::test_plural_rule_operands_t", "type": "Function", "lineno": 57}, {"nodeid": "tests/test_plural.py::test_plural_other_is_ignored", "type": "Function", "lineno": 64}, {"nodeid": "tests/test_plural.py::test_to_javascript", "type": "Function", "lineno": 69}, {"nodeid": "tests/test_plural.py::test_to_python", "type": "Function", "lineno": 74}, {"nodeid": "tests/test_plural.py::test_to_gettext", "type": "Function", "lineno": 84}, {"nodeid": "tests/test_plural.py::test_in_range_list", "type": "Function", "lineno": 89}, {"nodeid": "tests/test_plural.py::test_within_range_list", "type": "Function", "lineno": 98}, {"nodeid": "tests/test_plural.py::test_cldr_modulo", "type": "Function", "lineno": 107}, {"nodeid": "tests/test_plural.py::test_plural_within_rules", "type": "Function", "lineno": 113}, {"nodeid": "tests/test_plural.py::test_locales_with_no_plural_rules_have_default", "type": "Function", "lineno": 135}, {"nodeid": "tests/test_plural.py::test_tokenize_well_formed[-tokens0]", "type": "Function", "lineno": 184}, {"nodeid": "tests/test_plural.py::test_tokenize_well_formed[n = 1-tokens1]", "type": "Function", "lineno": 184}, {"nodeid": "tests/test_plural.py::test_tokenize_well_formed[n = 1 @integer 1-tokens2]", "type": "Function", "lineno": 184}, {"nodeid": "tests/test_plural.py::test_tokenize_well_formed[n is 1-tokens3]", "type": "Function", "lineno": 184}, {"nodeid": "tests/test_plural.py::test_tokenize_well_formed[n % 100 = 3..10-tokens4]", "type": "Function", "lineno": 184}, {"nodeid": "tests/test_plural.py::test_tokenize_malformed[a = 1]", "type": "Function", "lineno": 194}, {"nodeid": "tests/test_plural.py::test_tokenize_malformed[n ! 2]", "type": "Function", "lineno": 194}, {"nodeid": "tests/test_plural.py::TestNextTokenTestCase", "type": "UnitTestCase"}, {"nodeid": "tests/test_plural.py::PluralRuleParserTestCase", "type": "UnitTestCase"}, {"nodeid": "tests/test_plural.py::test_extract_operands[1-1-1-0-0-0-0]", "type": "Function", "lineno": 285}, {"nodeid": "tests/test_plural.py::test_extract_operands[source1-1.0-1-1-0-0-0]", "type": "Function", "lineno": 285}, {"nodeid": "tests/test_plural.py::test_extract_operands[source2-1.00-1-2-0-0-0]", "type": "Function", "lineno": 285}, {"nodeid": "tests/test_plural.py::test_extract_operands[source3-1.3-1-1-1-3-3]", "type": "Function", "lineno": 285}, {"nodeid": "tests/test_plural.py::test_extract_operands[source4-1.30-1-2-1-30-3]", "type": "Function", "lineno": 285}, {"nodeid": "tests/test_plural.py::test_extract_operands[source5-1.03-1-2-2-3-3]", "type": "Function", "lineno": 285}, {"nodeid": "tests/test_plural.py::test_extract_operands[source6-1.230-1-3-2-230-23]", "type": "Function", "lineno": 285}, {"nodeid": "tests/test_plural.py::test_extract_operands[-1-1-1-0-0-0-0]", "type": "Function", "lineno": 285}, {"nodeid": "tests/test_plural.py::test_extract_operands[1.3-1.3-1-1-1-3-3]", "type": "Function", "lineno": 285}, {"nodeid": "tests/test_plural.py::test_gettext_compilation[ru]", "type": "Function", "lineno": 298}, {"nodeid": "tests/test_plural.py::test_gettext_compilation[pl]", "type": "Function", "lineno": 298}]}, {"nodeid": "tests/test_smoke.py", "outcome": "failed", "result": [], "longrepr": "ImportError while importing test module '/testbed/tests/test_smoke.py'.\nHint: make sure your test modules/packages have valid Python names.\nTraceback:\n/usr/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\ntests/test_smoke.py:12: in <module>\n    from babel import Locale, dates, numbers, units\nbabel/dates.py:29: in <module>\n    from babel import localtime\nbabel/localtime/__init__.py:18: in <module>\n    from babel.localtime._unix import _get_localzone\nbabel/localtime/_unix.py:4: in <module>\n    from babel.localtime._helpers import _get_tzinfo, _get_tzinfo_from_file, _get_tzinfo_or_raise\nE   ImportError: cannot import name '_get_tzinfo_from_file' from 'babel.localtime._helpers' (/testbed/babel/localtime/_helpers.py)"}, {"nodeid": "tests/test_support.py", "outcome": "failed", "result": [], "longrepr": "ImportError while importing test module '/testbed/tests/test_support.py'.\nHint: make sure your test modules/packages have valid Python names.\nTraceback:\n/usr/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\ntests/test_support.py:25: in <module>\n    from babel import support\nbabel/support.py:21: in <module>\n    from babel.dates import format_date, format_datetime, format_time, format_timedelta\nbabel/dates.py:29: in <module>\n    from babel import localtime\nbabel/localtime/__init__.py:18: in <module>\n    from babel.localtime._unix import _get_localzone\nbabel/localtime/_unix.py:4: in <module>\n    from babel.localtime._helpers import _get_tzinfo, _get_tzinfo_from_file, _get_tzinfo_or_raise\nE   ImportError: cannot import name '_get_tzinfo_from_file' from 'babel.localtime._helpers' (/testbed/babel/localtime/_helpers.py)"}, {"nodeid": "tests/test_util.py", "outcome": "failed", "result": [], "longrepr": "ImportError while importing test module '/testbed/tests/test_util.py'.\nHint: make sure your test modules/packages have valid Python names.\nTraceback:\n/usr/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\ntests/test_util.py:20: in <module>\n    from babel import util\nbabel/util.py:19: in <module>\n    from babel import dates, localtime\nbabel/dates.py:29: in <module>\n    from babel import localtime\nbabel/localtime/__init__.py:18: in <module>\n    from babel.localtime._unix import _get_localzone\nbabel/localtime/_unix.py:4: in <module>\n    from babel.localtime._helpers import _get_tzinfo, _get_tzinfo_from_file, _get_tzinfo_or_raise\nE   ImportError: cannot import name '_get_tzinfo_from_file' from 'babel.localtime._helpers' (/testbed/babel/localtime/_helpers.py)"}, {"nodeid": "tests", "outcome": "passed", "result": [{"nodeid": "tests/messages", "type": "Package"}, {"nodeid": "tests/test_core.py", "type": "Module"}, {"nodeid": "tests/test_date_intervals.py", "type": "Module"}, {"nodeid": "tests/test_dates.py", "type": "Module"}, {"nodeid": "tests/test_day_periods.py", "type": "Module"}, {"nodeid": "tests/test_languages.py", "type": "Module"}, {"nodeid": "tests/test_lists.py", "type": "Module"}, {"nodeid": "tests/test_localedata.py", "type": "Module"}, {"nodeid": "tests/test_numbers.py", "type": "Module"}, {"nodeid": "tests/test_plural.py", "type": "Module"}, {"nodeid": "tests/test_smoke.py", "type": "Module"}, {"nodeid": "tests/test_support.py", "type": "Module"}, {"nodeid": "tests/test_util.py", "type": "Module"}]}], "tests": [{"nodeid": "tests/test_core.py::test_locale_provides_access_to_cldr_locale_data", "lineno": 18, "outcome": "failed", "keywords": ["test_locale_provides_access_to_cldr_locale_data", "test_core.py", "tests", "testbed", ""], "setup": {"duration": 0.0003984529999998543, "outcome": "passed"}, "call": {"duration": 0.00020790100000001033, "outcome": "failed", "crash": {"path": "/testbed/babel/core.py", "lineno": 151, "message": "TypeError: __str__ returned non-string (type NoneType)"}, "traceback": [{"path": "tests/test_core.py", "lineno": 20, "message": ""}, {"path": "babel/core.py", "lineno": 151, "message": "TypeError"}], "longrepr": "def test_locale_provides_access_to_cldr_locale_data():\n>       locale = Locale('en', 'US')\n\ntests/test_core.py:20: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = Locale('en', territory='US'), language = 'en', territory = 'US'\nscript = None, variant = None, modifier = None\n\n    def __init__(self, language: str, territory: (str | None)=None, script:\n        (str | None)=None, variant: (str | None)=None, modifier: (str |\n        None)=None) ->None:\n        \"\"\"Initialize the locale object from the given identifier components.\n    \n        >>> locale = Locale('en', 'US')\n        >>> locale.language\n        'en'\n        >>> locale.territory\n        'US'\n    \n        :param language: the language code\n        :param territory: the territory (country or region) code\n        :param script: the script code\n        :param variant: the variant code\n        :param modifier: a modifier (following the '@' symbol, sometimes called '@variant')\n        :raise `UnknownLocaleError`: if no locale data is available for the\n                                     requested locale\n        \"\"\"\n        self.language = language\n        self.territory = territory\n        self.script = script\n        self.variant = variant\n        self.modifier = modifier\n        self.__data: localedata.LocaleDataDict | None = None\n>       identifier = str(self)\nE       TypeError: __str__ returned non-string (type NoneType)\n\nbabel/core.py:151: TypeError"}, "teardown": {"duration": 0.0001968909999998658, "outcome": "passed"}}, {"nodeid": "tests/test_core.py::test_locale_repr", "lineno": 24, "outcome": "failed", "keywords": ["test_locale_repr", "test_core.py", "tests", "testbed", ""], "setup": {"duration": 0.00016474900000007509, "outcome": "passed"}, "call": {"duration": 0.0001634400000001257, "outcome": "failed", "crash": {"path": "/testbed/babel/core.py", "lineno": 151, "message": "TypeError: __str__ returned non-string (type NoneType)"}, "traceback": [{"path": "tests/test_core.py", "lineno": 26, "message": ""}, {"path": "babel/core.py", "lineno": 151, "message": "TypeError"}], "longrepr": "def test_locale_repr():\n>       assert repr(Locale('en', 'US')) == \"Locale('en', territory='US')\"\n\ntests/test_core.py:26: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = Locale('en', territory='US'), language = 'en', territory = 'US'\nscript = None, variant = None, modifier = None\n\n    def __init__(self, language: str, territory: (str | None)=None, script:\n        (str | None)=None, variant: (str | None)=None, modifier: (str |\n        None)=None) ->None:\n        \"\"\"Initialize the locale object from the given identifier components.\n    \n        >>> locale = Locale('en', 'US')\n        >>> locale.language\n        'en'\n        >>> locale.territory\n        'US'\n    \n        :param language: the language code\n        :param territory: the territory (country or region) code\n        :param script: the script code\n        :param variant: the variant code\n        :param modifier: a modifier (following the '@' symbol, sometimes called '@variant')\n        :raise `UnknownLocaleError`: if no locale data is available for the\n                                     requested locale\n        \"\"\"\n        self.language = language\n        self.territory = territory\n        self.script = script\n        self.variant = variant\n        self.modifier = modifier\n        self.__data: localedata.LocaleDataDict | None = None\n>       identifier = str(self)\nE       TypeError: __str__ returned non-string (type NoneType)\n\nbabel/core.py:151: TypeError"}, "teardown": {"duration": 0.00017730099999990756, "outcome": "passed"}}, {"nodeid": "tests/test_core.py::test_locale_comparison", "lineno": 30, "outcome": "failed", "keywords": ["test_locale_comparison", "test_core.py", "tests", "testbed", ""], "setup": {"duration": 0.00015127299999972976, "outcome": "passed"}, "call": {"duration": 0.00015799899999979772, "outcome": "failed", "crash": {"path": "/testbed/babel/core.py", "lineno": 151, "message": "TypeError: __str__ returned non-string (type NoneType)"}, "traceback": [{"path": "tests/test_core.py", "lineno": 32, "message": ""}, {"path": "babel/core.py", "lineno": 151, "message": "TypeError"}], "longrepr": "def test_locale_comparison():\n>       en_US = Locale('en', 'US')\n\ntests/test_core.py:32: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = Locale('en', territory='US'), language = 'en', territory = 'US'\nscript = None, variant = None, modifier = None\n\n    def __init__(self, language: str, territory: (str | None)=None, script:\n        (str | None)=None, variant: (str | None)=None, modifier: (str |\n        None)=None) ->None:\n        \"\"\"Initialize the locale object from the given identifier components.\n    \n        >>> locale = Locale('en', 'US')\n        >>> locale.language\n        'en'\n        >>> locale.territory\n        'US'\n    \n        :param language: the language code\n        :param territory: the territory (country or region) code\n        :param script: the script code\n        :param variant: the variant code\n        :param modifier: a modifier (following the '@' symbol, sometimes called '@variant')\n        :raise `UnknownLocaleError`: if no locale data is available for the\n                                     requested locale\n        \"\"\"\n        self.language = language\n        self.territory = territory\n        self.script = script\n        self.variant = variant\n        self.modifier = modifier\n        self.__data: localedata.LocaleDataDict | None = None\n>       identifier = str(self)\nE       TypeError: __str__ returned non-string (type NoneType)\n\nbabel/core.py:151: TypeError"}, "teardown": {"duration": 0.0001748429999999246, "outcome": "passed"}}, {"nodeid": "tests/test_core.py::test_can_return_default_locale", "lineno": 44, "outcome": "failed", "keywords": ["test_can_return_default_locale", "test_core.py", "tests", "testbed", ""], "setup": {"duration": 0.0003247680000000308, "outcome": "passed"}, "call": {"duration": 0.00016340499999989433, "outcome": "failed", "crash": {"path": "/testbed/babel/core.py", "lineno": 151, "message": "TypeError: __str__ returned non-string (type NoneType)"}, "traceback": [{"path": "tests/test_core.py", "lineno": 47, "message": ""}, {"path": "babel/core.py", "lineno": 151, "message": "TypeError"}], "longrepr": "os_environ = {'BLIS_NUM_THREADS': '1', 'CFLAGS': '-g0', 'HOME': '/root', 'LC_CTYPE': 'C.UTF-8', ...}\n\n    def test_can_return_default_locale(os_environ):\n        os_environ['LC_MESSAGES'] = 'fr_FR.UTF-8'\n>       assert Locale('fr', 'FR') == Locale.default('LC_MESSAGES')\n\ntests/test_core.py:47: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = Locale('fr', territory='FR'), language = 'fr', territory = 'FR'\nscript = None, variant = None, modifier = None\n\n    def __init__(self, language: str, territory: (str | None)=None, script:\n        (str | None)=None, variant: (str | None)=None, modifier: (str |\n        None)=None) ->None:\n        \"\"\"Initialize the locale object from the given identifier components.\n    \n        >>> locale = Locale('en', 'US')\n        >>> locale.language\n        'en'\n        >>> locale.territory\n        'US'\n    \n        :param language: the language code\n        :param territory: the territory (country or region) code\n        :param script: the script code\n        :param variant: the variant code\n        :param modifier: a modifier (following the '@' symbol, sometimes called '@variant')\n        :raise `UnknownLocaleError`: if no locale data is available for the\n                                     requested locale\n        \"\"\"\n        self.language = language\n        self.territory = territory\n        self.script = script\n        self.variant = variant\n        self.modifier = modifier\n        self.__data: localedata.LocaleDataDict | None = None\n>       identifier = str(self)\nE       TypeError: __str__ returned non-string (type NoneType)\n\nbabel/core.py:151: TypeError"}, "teardown": {"duration": 0.00021906999999998789, "outcome": "passed"}}, {"nodeid": "tests/test_core.py::test_ignore_invalid_locales_in_lc_ctype", "lineno": 49, "outcome": "passed", "keywords": ["test_ignore_invalid_locales_in_lc_ctype", "test_core.py", "tests", "testbed", ""], "setup": {"duration": 0.00028467399999998477, "outcome": "passed"}, "call": {"duration": 0.00015240699999985452, "outcome": "passed"}, "teardown": {"duration": 0.00016916999999994076, "outcome": "passed"}}, {"nodeid": "tests/test_core.py::test_get_global", "lineno": 57, "outcome": "failed", "keywords": ["test_get_global", "test_core.py", "tests", "testbed", ""], "setup": {"duration": 0.00014022299999982835, "outcome": "passed"}, "call": {"duration": 0.00015291500000014224, "outcome": "failed", "crash": {"path": "/testbed/tests/test_core.py", "lineno": 59, "message": "TypeError: 'NoneType' object is not subscriptable"}, "traceback": [{"path": "tests/test_core.py", "lineno": 59, "message": "TypeError"}], "longrepr": "def test_get_global():\n>       assert core.get_global('zone_aliases')['GMT'] == 'Etc/GMT'\nE       TypeError: 'NoneType' object is not subscriptable\n\ntests/test_core.py:59: TypeError"}, "teardown": {"duration": 0.00017431800000000663, "outcome": "passed"}}, {"nodeid": "tests/test_core.py::test_hash", "lineno": 63, "outcome": "failed", "keywords": ["test_hash", "test_core.py", "tests", "testbed", ""], "setup": {"duration": 0.00015691400000017452, "outcome": "passed"}, "call": {"duration": 0.00016131999999968727, "outcome": "failed", "crash": {"path": "/testbed/babel/core.py", "lineno": 151, "message": "TypeError: __str__ returned non-string (type NoneType)"}, "traceback": [{"path": "tests/test_core.py", "lineno": 65, "message": ""}, {"path": "babel/core.py", "lineno": 151, "message": "TypeError"}], "longrepr": "def test_hash():\n>       locale_a = Locale('en', 'US')\n\ntests/test_core.py:65: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = Locale('en', territory='US'), language = 'en', territory = 'US'\nscript = None, variant = None, modifier = None\n\n    def __init__(self, language: str, territory: (str | None)=None, script:\n        (str | None)=None, variant: (str | None)=None, modifier: (str |\n        None)=None) ->None:\n        \"\"\"Initialize the locale object from the given identifier components.\n    \n        >>> locale = Locale('en', 'US')\n        >>> locale.language\n        'en'\n        >>> locale.territory\n        'US'\n    \n        :param language: the language code\n        :param territory: the territory (country or region) code\n        :param script: the script code\n        :param variant: the variant code\n        :param modifier: a modifier (following the '@' symbol, sometimes called '@variant')\n        :raise `UnknownLocaleError`: if no locale data is available for the\n                                     requested locale\n        \"\"\"\n        self.language = language\n        self.territory = territory\n        self.script = script\n        self.variant = variant\n        self.modifier = modifier\n        self.__data: localedata.LocaleDataDict | None = None\n>       identifier = str(self)\nE       TypeError: __str__ returned non-string (type NoneType)\n\nbabel/core.py:151: TypeError"}, "teardown": {"duration": 0.0001803719999999842, "outcome": "passed"}}, {"nodeid": "tests/test_core.py::test_default_locale", "lineno": 266, "outcome": "failed", "keywords": ["test_default_locale", "test_core.py", "tests", "testbed", ""], "setup": {"duration": 0.0003030650000002133, "outcome": "passed"}, "call": {"duration": 0.0002697980000001543, "outcome": "failed", "crash": {"path": "/testbed/tests/test_core.py", "lineno": 271, "message": "AssertionError: assert None == 'fr_FR'\n +  where None = default_locale('LC_MESSAGES')"}, "traceback": [{"path": "tests/test_core.py", "lineno": 271, "message": "AssertionError"}], "longrepr": "os_environ = {'BLIS_NUM_THREADS': '1', 'CFLAGS': '-g0', 'HOME': '/root', 'LANG': 'fr_FR.UTF-8', ...}\n\n    def test_default_locale(os_environ):\n        for name in ['LANGUAGE', 'LC_ALL', 'LC_CTYPE', 'LC_MESSAGES']:\n            os_environ[name] = ''\n        os_environ['LANG'] = 'fr_FR.UTF-8'\n>       assert default_locale('LC_MESSAGES') == 'fr_FR'\nE       AssertionError: assert None == 'fr_FR'\nE        +  where None = default_locale('LC_MESSAGES')\n\ntests/test_core.py:271: AssertionError"}, "teardown": {"duration": 0.0002039910000002365, "outcome": "passed"}}, {"nodeid": "tests/test_core.py::test_negotiate_locale", "lineno": 280, "outcome": "failed", "keywords": ["test_negotiate_locale", "test_core.py", "tests", "testbed", ""], "setup": {"duration": 0.00014733199999961144, "outcome": "passed"}, "call": {"duration": 0.00028005600000025055, "outcome": "failed", "crash": {"path": "/testbed/tests/test_core.py", "lineno": 282, "message": "AssertionError: assert None == 'de_DE'\n +  where None = <function negotiate_locale at 0x7fda9a79a9e0>(['de_DE', 'en_US'], ['de_DE', 'de_AT'])\n +    where <function negotiate_locale at 0x7fda9a79a9e0> = core.negotiate_locale"}, "traceback": [{"path": "tests/test_core.py", "lineno": 282, "message": "AssertionError"}], "longrepr": "def test_negotiate_locale():\n>       assert (core.negotiate_locale(['de_DE', 'en_US'], ['de_DE', 'de_AT']) ==\n                'de_DE')\nE       AssertionError: assert None == 'de_DE'\nE        +  where None = <function negotiate_locale at 0x7fda9a79a9e0>(['de_DE', 'en_US'], ['de_DE', 'de_AT'])\nE        +    where <function negotiate_locale at 0x7fda9a79a9e0> = core.negotiate_locale\n\ntests/test_core.py:282: AssertionError"}, "teardown": {"duration": 0.00022029799999989663, "outcome": "passed"}}, {"nodeid": "tests/test_core.py::test_parse_locale", "lineno": 293, "outcome": "failed", "keywords": ["test_parse_locale", "test_core.py", "tests", "testbed", ""], "setup": {"duration": 0.00015120699999959797, "outcome": "passed"}, "call": {"duration": 0.0002710060000001846, "outcome": "failed", "crash": {"path": "/testbed/tests/test_core.py", "lineno": 295, "message": "AssertionError: assert None == ('zh', 'CN', None, None)\n +  where None = <function parse_locale at 0x7fda9a79aa70>('zh_CN')\n +    where <function parse_locale at 0x7fda9a79aa70> = core.parse_locale"}, "traceback": [{"path": "tests/test_core.py", "lineno": 295, "message": "AssertionError"}], "longrepr": "def test_parse_locale():\n>       assert core.parse_locale('zh_CN') == ('zh', 'CN', None, None)\nE       AssertionError: assert None == ('zh', 'CN', None, None)\nE        +  where None = <function parse_locale at 0x7fda9a79aa70>('zh_CN')\nE        +    where <function parse_locale at 0x7fda9a79aa70> = core.parse_locale\n\ntests/test_core.py:295: AssertionError"}, "teardown": {"duration": 0.0001750650000000853, "outcome": "passed"}}, {"nodeid": "tests/test_core.py::test_compatible_classes_in_global_and_localedata[babel/global.dat]", "lineno": 311, "outcome": "passed", "keywords": ["test_compatible_classes_in_global_and_localedata[babel/global.dat]", "parametrize", "pytestmark", "babel/global.dat", "test_core.py", "tests", "testbed", ""], "setup": {"duration": 0.00021499699999960598, "outcome": "passed"}, "call": {"duration": 0.005048407999999949, "outcome": "passed"}, "teardown": {"duration": 0.00016595600000002264, "outcome": "passed"}}, {"nodeid": "tests/test_core.py::test_compatible_classes_in_global_and_localedata[babel/locale-data/root.dat]", "lineno": 311, "outcome": "failed", "keywords": ["test_compatible_classes_in_global_and_localedata[babel/locale-data/root.dat]", "parametrize", "pytestmark", "babel/locale-data/root.dat", "test_core.py", "tests", "testbed", ""], "setup": {"duration": 0.00021553800000040368, "outcome": "passed"}, "call": {"duration": 0.0013663480000003503, "outcome": "failed", "crash": {"path": "/testbed/babel/localtime/_unix.py", "lineno": 4, "message": "ImportError: cannot import name '_get_tzinfo_from_file' from 'babel.localtime._helpers' (/testbed/babel/localtime/_helpers.py)"}, "traceback": [{"path": "tests/test_core.py", "lineno": 334, "message": ""}, {"path": "tests/test_core.py", "lineno": 330, "message": "in find_class"}, {"path": "babel/dates.py", "lineno": 29, "message": "in <module>"}, {"path": "babel/localtime/__init__.py", "lineno": 18, "message": "in <module>"}, {"path": "babel/localtime/_unix.py", "lineno": 4, "message": "ImportError"}], "longrepr": "filename = 'babel/locale-data/root.dat'\n\n    @pytest.mark.parametrize('filename', [\n        'babel/global.dat',\n        'babel/locale-data/root.dat',\n        'babel/locale-data/en.dat',\n        'babel/locale-data/en_US.dat',\n        'babel/locale-data/en_US_POSIX.dat',\n        'babel/locale-data/zh_Hans_CN.dat',\n        'babel/locale-data/zh_Hant_TW.dat',\n        'babel/locale-data/es_419.dat',\n    ])\n    def test_compatible_classes_in_global_and_localedata(filename):\n        import pickle\n    \n        class Unpickler(pickle.Unpickler):\n    \n            def find_class(self, module, name):\n                # *.dat files must have compatible classes between Python 2 and 3\n                if module.split('.')[0] == 'babel':\n                    return pickle.Unpickler.find_class(self, module, name)\n                raise pickle.UnpicklingError(f\"global '{module}.{name}' is forbidden\")\n    \n        with open(filename, 'rb') as f:\n>           assert Unpickler(f).load()\n\ntests/test_core.py:334: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ntests/test_core.py:330: in find_class\n    return pickle.Unpickler.find_class(self, module, name)\nbabel/dates.py:29: in <module>\n    from babel import localtime\nbabel/localtime/__init__.py:18: in <module>\n    from babel.localtime._unix import _get_localzone\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n    import datetime\n    import os\n    import re\n>   from babel.localtime._helpers import _get_tzinfo, _get_tzinfo_from_file, _get_tzinfo_or_raise\nE   ImportError: cannot import name '_get_tzinfo_from_file' from 'babel.localtime._helpers' (/testbed/babel/localtime/_helpers.py)\n\nbabel/localtime/_unix.py:4: ImportError"}, "teardown": {"duration": 0.00021890100000021562, "outcome": "passed"}}, {"nodeid": "tests/test_core.py::test_compatible_classes_in_global_and_localedata[babel/locale-data/en.dat]", "lineno": 311, "outcome": "failed", "keywords": ["test_compatible_classes_in_global_and_localedata[babel/locale-data/en.dat]", "parametrize", "pytestmark", "babel/locale-data/en.dat", "test_core.py", "tests", "testbed", ""], "setup": {"duration": 0.00020321600000006157, "outcome": "passed"}, "call": {"duration": 0.0018138340000000142, "outcome": "failed", "crash": {"path": "/testbed/babel/localtime/_unix.py", "lineno": 4, "message": "ImportError: cannot import name '_get_tzinfo_from_file' from 'babel.localtime._helpers' (/testbed/babel/localtime/_helpers.py)"}, "traceback": [{"path": "tests/test_core.py", "lineno": 334, "message": ""}, {"path": "tests/test_core.py", "lineno": 330, "message": "in find_class"}, {"path": "babel/dates.py", "lineno": 29, "message": "in <module>"}, {"path": "babel/localtime/__init__.py", "lineno": 18, "message": "in <module>"}, {"path": "babel/localtime/_unix.py", "lineno": 4, "message": "ImportError"}], "longrepr": "filename = 'babel/locale-data/en.dat'\n\n    @pytest.mark.parametrize('filename', [\n        'babel/global.dat',\n        'babel/locale-data/root.dat',\n        'babel/locale-data/en.dat',\n        'babel/locale-data/en_US.dat',\n        'babel/locale-data/en_US_POSIX.dat',\n        'babel/locale-data/zh_Hans_CN.dat',\n        'babel/locale-data/zh_Hant_TW.dat',\n        'babel/locale-data/es_419.dat',\n    ])\n    def test_compatible_classes_in_global_and_localedata(filename):\n        import pickle\n    \n        class Unpickler(pickle.Unpickler):\n    \n            def find_class(self, module, name):\n                # *.dat files must have compatible classes between Python 2 and 3\n                if module.split('.')[0] == 'babel':\n                    return pickle.Unpickler.find_class(self, module, name)\n                raise pickle.UnpicklingError(f\"global '{module}.{name}' is forbidden\")\n    \n        with open(filename, 'rb') as f:\n>           assert Unpickler(f).load()\n\ntests/test_core.py:334: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ntests/test_core.py:330: in find_class\n    return pickle.Unpickler.find_class(self, module, name)\nbabel/dates.py:29: in <module>\n    from babel import localtime\nbabel/localtime/__init__.py:18: in <module>\n    from babel.localtime._unix import _get_localzone\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n    import datetime\n    import os\n    import re\n>   from babel.localtime._helpers import _get_tzinfo, _get_tzinfo_from_file, _get_tzinfo_or_raise\nE   ImportError: cannot import name '_get_tzinfo_from_file' from 'babel.localtime._helpers' (/testbed/babel/localtime/_helpers.py)\n\nbabel/localtime/_unix.py:4: ImportError"}, "teardown": {"duration": 0.00019954600000016143, "outcome": "passed"}}, {"nodeid": "tests/test_core.py::test_compatible_classes_in_global_and_localedata[babel/locale-data/en_US.dat]", "lineno": 311, "outcome": "passed", "keywords": ["test_compatible_classes_in_global_and_localedata[babel/locale-data/en_US.dat]", "parametrize", "pytestmark", "babel/locale-data/en_US.dat", "test_core.py", "tests", "testbed", ""], "setup": {"duration": 0.000197541999999995, "outcome": "passed"}, "call": {"duration": 0.00037046799999984614, "outcome": "passed"}, "teardown": {"duration": 0.00015030000000004762, "outcome": "passed"}}, {"nodeid": "tests/test_core.py::test_compatible_classes_in_global_and_localedata[babel/locale-data/en_US_POSIX.dat]", "lineno": 311, "outcome": "passed", "keywords": ["test_compatible_classes_in_global_and_localedata[babel/locale-data/en_US_POSIX.dat]", "parametrize", "pytestmark", "babel/locale-data/en_US_POSIX.dat", "test_core.py", "tests", "testbed", ""], "setup": {"duration": 0.00018053799999995235, "outcome": "passed"}, "call": {"duration": 0.0004951549999998583, "outcome": "passed"}, "teardown": {"duration": 0.00014857799999967725, "outcome": "passed"}}, {"nodeid": "tests/test_core.py::test_compatible_classes_in_global_and_localedata[babel/locale-data/zh_Hans_CN.dat]", "lineno": 311, "outcome": "passed", "keywords": ["test_compatible_classes_in_global_and_localedata[babel/locale-data/zh_Hans_CN.dat]", "parametrize", "pytestmark", "babel/locale-data/zh_Hans_CN.dat", "test_core.py", "tests", "testbed", ""], "setup": {"duration": 0.00018836299999991368, "outcome": "passed"}, "call": {"duration": 0.0004664169999997192, "outcome": "passed"}, "teardown": {"duration": 0.00014408500000007152, "outcome": "passed"}}, {"nodeid": "tests/test_core.py::test_compatible_classes_in_global_and_localedata[babel/locale-data/zh_Hant_TW.dat]", "lineno": 311, "outcome": "passed", "keywords": ["test_compatible_classes_in_global_and_localedata[babel/locale-data/zh_Hant_TW.dat]", "parametrize", "pytestmark", "babel/locale-data/zh_Hant_TW.dat", "test_core.py", "tests", "testbed", ""], "setup": {"duration": 0.00019447099999991835, "outcome": "passed"}, "call": {"duration": 0.00042816800000000654, "outcome": "passed"}, "teardown": {"duration": 0.00014377599999981783, "outcome": "passed"}}, {"nodeid": "tests/test_core.py::test_compatible_classes_in_global_and_localedata[babel/locale-data/es_419.dat]", "lineno": 311, "outcome": "failed", "keywords": ["test_compatible_classes_in_global_and_localedata[babel/locale-data/es_419.dat]", "parametrize", "pytestmark", "babel/locale-data/es_419.dat", "test_core.py", "tests", "testbed", ""], "setup": {"duration": 0.0001872139999998801, "outcome": "passed"}, "call": {"duration": 0.0013324439999999882, "outcome": "failed", "crash": {"path": "/testbed/babel/localtime/_unix.py", "lineno": 4, "message": "ImportError: cannot import name '_get_tzinfo_from_file' from 'babel.localtime._helpers' (/testbed/babel/localtime/_helpers.py)"}, "traceback": [{"path": "tests/test_core.py", "lineno": 334, "message": ""}, {"path": "tests/test_core.py", "lineno": 330, "message": "in find_class"}, {"path": "babel/dates.py", "lineno": 29, "message": "in <module>"}, {"path": "babel/localtime/__init__.py", "lineno": 18, "message": "in <module>"}, {"path": "babel/localtime/_unix.py", "lineno": 4, "message": "ImportError"}], "longrepr": "filename = 'babel/locale-data/es_419.dat'\n\n    @pytest.mark.parametrize('filename', [\n        'babel/global.dat',\n        'babel/locale-data/root.dat',\n        'babel/locale-data/en.dat',\n        'babel/locale-data/en_US.dat',\n        'babel/locale-data/en_US_POSIX.dat',\n        'babel/locale-data/zh_Hans_CN.dat',\n        'babel/locale-data/zh_Hant_TW.dat',\n        'babel/locale-data/es_419.dat',\n    ])\n    def test_compatible_classes_in_global_and_localedata(filename):\n        import pickle\n    \n        class Unpickler(pickle.Unpickler):\n    \n            def find_class(self, module, name):\n                # *.dat files must have compatible classes between Python 2 and 3\n                if module.split('.')[0] == 'babel':\n                    return pickle.Unpickler.find_class(self, module, name)\n                raise pickle.UnpicklingError(f\"global '{module}.{name}' is forbidden\")\n    \n        with open(filename, 'rb') as f:\n>           assert Unpickler(f).load()\n\ntests/test_core.py:334: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ntests/test_core.py:330: in find_class\n    return pickle.Unpickler.find_class(self, module, name)\nbabel/dates.py:29: in <module>\n    from babel import localtime\nbabel/localtime/__init__.py:18: in <module>\n    from babel.localtime._unix import _get_localzone\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n    import datetime\n    import os\n    import re\n>   from babel.localtime._helpers import _get_tzinfo, _get_tzinfo_from_file, _get_tzinfo_or_raise\nE   ImportError: cannot import name '_get_tzinfo_from_file' from 'babel.localtime._helpers' (/testbed/babel/localtime/_helpers.py)\n\nbabel/localtime/_unix.py:4: ImportError"}, "teardown": {"duration": 0.00019367300000006082, "outcome": "passed"}}, {"nodeid": "tests/test_core.py::test_issue_601_no_language_name_but_has_variant", "lineno": 336, "outcome": "failed", "keywords": ["test_issue_601_no_language_name_but_has_variant", "test_core.py", "tests", "testbed", ""], "setup": {"duration": 0.0001554879999998704, "outcome": "passed"}, "call": {"duration": 0.00015895400000021098, "outcome": "failed", "crash": {"path": "/testbed/tests/test_core.py", "lineno": 344, "message": "AttributeError: 'NoneType' object has no attribute 'get_display_name'"}, "traceback": [{"path": "tests/test_core.py", "lineno": 344, "message": "AttributeError"}], "longrepr": "def test_issue_601_no_language_name_but_has_variant():\n        # kw_GB has a variant for Finnish but no actual language name for Finnish,\n        # so `get_display_name()` previously crashed with a TypeError as it attempted\n        # to concatenate \" (Finnish)\" to None.\n        # Instead, it's better to return None altogether, as we can't reliably format\n        # part of a language name.\n    \n>       assert Locale.parse('fi_FI').get_display_name('kw_GB') is None\nE       AttributeError: 'NoneType' object has no attribute 'get_display_name'\n\ntests/test_core.py:344: AttributeError"}, "teardown": {"duration": 0.0001757330000002888, "outcome": "passed"}}, {"nodeid": "tests/test_core.py::test_issue_814", "lineno": 346, "outcome": "failed", "keywords": ["test_issue_814", "test_core.py", "tests", "testbed", ""], "setup": {"duration": 0.00014934799999988257, "outcome": "passed"}, "call": {"duration": 0.00015486400000019884, "outcome": "failed", "crash": {"path": "/testbed/tests/test_core.py", "lineno": 349, "message": "AttributeError: 'NoneType' object has no attribute 'variant'"}, "traceback": [{"path": "tests/test_core.py", "lineno": 349, "message": "AttributeError"}], "longrepr": "def test_issue_814():\n        loc = Locale.parse('ca_ES_valencia')\n>       assert loc.variant == \"VALENCIA\"\nE       AttributeError: 'NoneType' object has no attribute 'variant'\n\ntests/test_core.py:349: AttributeError"}, "teardown": {"duration": 0.00017508199999971552, "outcome": "passed"}}, {"nodeid": "tests/test_languages.py::test_official_languages", "lineno": 3, "outcome": "failed", "keywords": ["test_official_languages", "test_languages.py", "tests", "testbed", ""], "setup": {"duration": 0.00016242699999979848, "outcome": "passed"}, "call": {"duration": 0.0002657109999999463, "outcome": "failed", "crash": {"path": "/testbed/tests/test_languages.py", "lineno": 5, "message": "AssertionError: assert None == ('fi', 'sv')\n +  where None = get_official_languages('FI')"}, "traceback": [{"path": "tests/test_languages.py", "lineno": 5, "message": "AssertionError"}], "longrepr": "def test_official_languages():\n>       assert get_official_languages(\"FI\") == (\"fi\", \"sv\")\nE       AssertionError: assert None == ('fi', 'sv')\nE        +  where None = get_official_languages('FI')\n\ntests/test_languages.py:5: AssertionError"}, "teardown": {"duration": 0.0001716439999999153, "outcome": "passed"}}, {"nodeid": "tests/test_languages.py::test_get_language_info", "lineno": 11, "outcome": "failed", "keywords": ["test_get_language_info", "test_languages.py", "tests", "testbed", ""], "setup": {"duration": 0.00014555300000029803, "outcome": "passed"}, "call": {"duration": 0.0001747819999997624, "outcome": "failed", "crash": {"path": "/testbed/tests/test_languages.py", "lineno": 13, "message": "TypeError: 'NoneType' object is not iterable"}, "traceback": [{"path": "tests/test_languages.py", "lineno": 13, "message": "TypeError"}], "longrepr": "def test_get_language_info():\n>       assert (\n            set(get_territory_language_info(\"HU\")) ==\n            {\"hu\", \"fr\", \"en\", \"de\", \"ro\", \"hr\", \"sk\", \"sl\"}\n        )\nE       TypeError: 'NoneType' object is not iterable\n\ntests/test_languages.py:13: TypeError"}, "teardown": {"duration": 0.00017119600000015112, "outcome": "passed"}}, {"nodeid": "tests/test_lists.py::test_format_list", "lineno": 5, "outcome": "failed", "keywords": ["test_format_list", "test_lists.py", "tests", "testbed", ""], "setup": {"duration": 0.00015660499999992084, "outcome": "passed"}, "call": {"duration": 0.00028043400000044016, "outcome": "failed", "crash": {"path": "/testbed/tests/test_lists.py", "lineno": 15, "message": "AssertionError: assert None == ''\n +  where None = <function format_list at 0x7fda9a509b40>([], locale='en')\n +    where <function format_list at 0x7fda9a509b40> = lists.format_list"}, "traceback": [{"path": "tests/test_lists.py", "lineno": 15, "message": "AssertionError"}], "longrepr": "def test_format_list():\n        for list, locale, expected in [\n            ([], 'en', ''),\n            (['string'], 'en', 'string'),\n            (['string1', 'string2'], 'en', 'string1 and string2'),\n            (['string1', 'string2', 'string3'], 'en', 'string1, string2, and string3'),\n            (['string1', 'string2', 'string3'], 'zh', 'string1\u3001string2\u548cstring3'),\n            (['string1', 'string2', 'string3', 'string4'], 'ne', 'string1,string2, string3 \u0930 string4'),\n        ]:\n>           assert lists.format_list(list, locale=locale) == expected\nE           AssertionError: assert None == ''\nE            +  where None = <function format_list at 0x7fda9a509b40>([], locale='en')\nE            +    where <function format_list at 0x7fda9a509b40> = lists.format_list\n\ntests/test_lists.py:15: AssertionError"}, "teardown": {"duration": 0.00017246399999981676, "outcome": "passed"}}, {"nodeid": "tests/test_lists.py::test_format_list_error", "lineno": 17, "outcome": "failed", "keywords": ["test_format_list_error", "test_lists.py", "tests", "testbed", ""], "setup": {"duration": 0.0001533079999997966, "outcome": "passed"}, "call": {"duration": 0.00017744399999974902, "outcome": "failed", "crash": {"path": "/testbed/tests/test_lists.py", "lineno": 19, "message": "Failed: DID NOT RAISE <class 'ValueError'>"}, "traceback": [{"path": "tests/test_lists.py", "lineno": 19, "message": "Failed"}], "longrepr": "def test_format_list_error():\n>       with pytest.raises(ValueError):\nE       Failed: DID NOT RAISE <class 'ValueError'>\n\ntests/test_lists.py:19: Failed"}, "teardown": {"duration": 0.00017019600000001134, "outcome": "passed"}}, {"nodeid": "tests/test_localedata.py::MergeResolveTestCase::test_merge_items", "lineno": 27, "outcome": "failed", "keywords": ["test_merge_items", "MergeResolveTestCase", "test_localedata.py", "tests", "testbed", ""], "setup": {"duration": 0.0002503320000002418, "outcome": "passed"}, "call": {"duration": 0.00046440599999986176, "outcome": "failed", "crash": {"path": "/testbed/tests/test_localedata.py", "lineno": 31, "message": "AssertionError: assert {1: 'foo', 3: 'baz'} == {1: 'Foo', 2: 'Bar', 3: 'baz'}\n  \n  Omitting 1 identical items, use -vv to show\n  Differing items:\n  {1: 'foo'} != {1: 'Foo'}\n  Right contains 1 more item:\n  {2: 'Bar'}\n  Use -v to get more diff"}, "traceback": [{"path": "tests/test_localedata.py", "lineno": 31, "message": "AssertionError"}], "longrepr": "self = <tests.test_localedata.MergeResolveTestCase testMethod=test_merge_items>\n\n    def test_merge_items(self):\n        d = {1: 'foo', 3: 'baz'}\n        localedata.merge(d, {1: 'Foo', 2: 'Bar'})\n>       assert d == {1: 'Foo', 2: 'Bar', 3: 'baz'}\nE       AssertionError: assert {1: 'foo', 3: 'baz'} == {1: 'Foo', 2: 'Bar', 3: 'baz'}\nE         \nE         Omitting 1 identical items, use -vv to show\nE         Differing items:\nE         {1: 'foo'} != {1: 'Foo'}\nE         Right contains 1 more item:\nE         {2: 'Bar'}\nE         Use -v to get more diff\n\ntests/test_localedata.py:31: AssertionError"}, "teardown": {"duration": 0.00017600100000025876, "outcome": "passed"}}, {"nodeid": "tests/test_localedata.py::MergeResolveTestCase::test_merge_nested_dict", "lineno": 32, "outcome": "failed", "keywords": ["test_merge_nested_dict", "MergeResolveTestCase", "test_localedata.py", "tests", "testbed", ""], "setup": {"duration": 0.00017402300000002313, "outcome": "passed"}, "call": {"duration": 0.000415504000000233, "outcome": "failed", "crash": {"path": "/testbed/tests/test_localedata.py", "lineno": 37, "message": "AssertionError: assert {'x': {'a': 1...': 2, 'c': 3}} == {'x': {'a': 1...: 3, 'd': 14}}\n  \n  Differing items:\n  {'x': {'a': 1, 'b': 2, 'c': 3}} != {'x': {'a': 1, 'b': 12, 'c': 3, 'd': 14}}\n  Use -v to get more diff"}, "traceback": [{"path": "tests/test_localedata.py", "lineno": 37, "message": "AssertionError"}], "longrepr": "self = <tests.test_localedata.MergeResolveTestCase testMethod=test_merge_nested_dict>\n\n    def test_merge_nested_dict(self):\n        d1 = {'x': {'a': 1, 'b': 2, 'c': 3}}\n        d2 = {'x': {'a': 1, 'b': 12, 'd': 14}}\n        localedata.merge(d1, d2)\n>       assert d1 == {'x': {'a': 1, 'b': 12, 'c': 3, 'd': 14}}\nE       AssertionError: assert {'x': {'a': 1...': 2, 'c': 3}} == {'x': {'a': 1...: 3, 'd': 14}}\nE         \nE         Differing items:\nE         {'x': {'a': 1, 'b': 2, 'c': 3}} != {'x': {'a': 1, 'b': 12, 'c': 3, 'd': 14}}\nE         Use -v to get more diff\n\ntests/test_localedata.py:37: AssertionError"}, "teardown": {"duration": 0.00017852300000020804, "outcome": "passed"}}, {"nodeid": "tests/test_localedata.py::MergeResolveTestCase::test_merge_nested_dict_no_overlap", "lineno": 38, "outcome": "failed", "keywords": ["test_merge_nested_dict_no_overlap", "MergeResolveTestCase", "test_localedata.py", "tests", "testbed", ""], "setup": {"duration": 0.00017687300000002182, "outcome": "passed"}, "call": {"duration": 0.00040076900000007853, "outcome": "failed", "crash": {"path": "/testbed/tests/test_localedata.py", "lineno": 43, "message": "AssertionError: assert {'x': {'a': 1, 'b': 2}} == {'x': {'a': 1... 11, 'b': 12}}\n  \n  Omitting 1 identical items, use -vv to show\n  Right contains 1 more item:\n  {'y': {'a': 11, 'b': 12}}\n  Use -v to get more diff"}, "traceback": [{"path": "tests/test_localedata.py", "lineno": 43, "message": "AssertionError"}], "longrepr": "self = <tests.test_localedata.MergeResolveTestCase testMethod=test_merge_nested_dict_no_overlap>\n\n    def test_merge_nested_dict_no_overlap(self):\n        d1 = {'x': {'a': 1, 'b': 2}}\n        d2 = {'y': {'a': 11, 'b': 12}}\n        localedata.merge(d1, d2)\n>       assert d1 == {'x': {'a': 1, 'b': 2}, 'y': {'a': 11, 'b': 12}}\nE       AssertionError: assert {'x': {'a': 1, 'b': 2}} == {'x': {'a': 1... 11, 'b': 12}}\nE         \nE         Omitting 1 identical items, use -vv to show\nE         Right contains 1 more item:\nE         {'y': {'a': 11, 'b': 12}}\nE         Use -v to get more diff\n\ntests/test_localedata.py:43: AssertionError"}, "teardown": {"duration": 0.000175497000000302, "outcome": "passed"}}, {"nodeid": "tests/test_localedata.py::MergeResolveTestCase::test_merge_with_alias_and_resolve", "lineno": 44, "outcome": "failed", "keywords": ["test_merge_with_alias_and_resolve", "MergeResolveTestCase", "test_localedata.py", "tests", "testbed", ""], "setup": {"duration": 0.0001732199999997519, "outcome": "passed"}, "call": {"duration": 0.00046940299999986834, "outcome": "failed", "crash": {"path": "/testbed/tests/test_localedata.py", "lineno": 56, "message": "AssertionError: assert {'x': {'a': 1...Alias ('x',)>} == {'x': {'a': 1...22, 'e': 25})}\n  \n  Differing items:\n  {'y': <Alias ('x',)>} != {'y': (<Alias ('x',)>, {'b': 22, 'e': 25})}\n  {'x': {'a': 1, 'b': 2, 'c': 3}} != {'x': {'a': 1, 'b': 12, 'c': 3, 'd': 14}}\n  Use -v to get more diff"}, "traceback": [{"path": "tests/test_localedata.py", "lineno": 56, "message": "AssertionError"}], "longrepr": "self = <tests.test_localedata.MergeResolveTestCase testMethod=test_merge_with_alias_and_resolve>\n\n    def test_merge_with_alias_and_resolve(self):\n        alias = localedata.Alias('x')\n        d1 = {\n            'x': {'a': 1, 'b': 2, 'c': 3},\n            'y': alias,\n        }\n        d2 = {\n            'x': {'a': 1, 'b': 12, 'd': 14},\n            'y': {'b': 22, 'e': 25},\n        }\n        localedata.merge(d1, d2)\n>       assert d1 == {'x': {'a': 1, 'b': 12, 'c': 3, 'd': 14}, 'y': (alias, {'b': 22, 'e': 25})}\nE       AssertionError: assert {'x': {'a': 1...Alias ('x',)>} == {'x': {'a': 1...22, 'e': 25})}\nE         \nE         Differing items:\nE         {'y': <Alias ('x',)>} != {'y': (<Alias ('x',)>, {'b': 22, 'e': 25})}\nE         {'x': {'a': 1, 'b': 2, 'c': 3}} != {'x': {'a': 1, 'b': 12, 'c': 3, 'd': 14}}\nE         Use -v to get more diff\n\ntests/test_localedata.py:56: AssertionError"}, "teardown": {"duration": 0.00021950599999964737, "outcome": "passed"}}, {"nodeid": "tests/test_localedata.py::test_load", "lineno": 60, "outcome": "failed", "keywords": ["test_load", "test_localedata.py", "tests", "testbed", ""], "setup": {"duration": 0.0001481760000001664, "outcome": "passed"}, "call": {"duration": 0.0001558230000000549, "outcome": "failed", "crash": {"path": "/testbed/tests/test_localedata.py", "lineno": 62, "message": "TypeError: 'NoneType' object is not subscriptable"}, "traceback": [{"path": "tests/test_localedata.py", "lineno": 62, "message": "TypeError"}], "longrepr": "def test_load():\n>       assert localedata.load('en_US')['languages']['sv'] == 'Swedish'\nE       TypeError: 'NoneType' object is not subscriptable\n\ntests/test_localedata.py:62: TypeError"}, "teardown": {"duration": 0.00017260600000001958, "outcome": "passed"}}, {"nodeid": "tests/test_localedata.py::test_merge", "lineno": 65, "outcome": "failed", "keywords": ["test_merge", "test_localedata.py", "tests", "testbed", ""], "setup": {"duration": 0.0001467840000000109, "outcome": "passed"}, "call": {"duration": 0.0003462469999999662, "outcome": "failed", "crash": {"path": "/testbed/tests/test_localedata.py", "lineno": 69, "message": "AssertionError: assert {1: 'foo', 3: 'baz'} == {1: 'Foo', 2: 'Bar', 3: 'baz'}\n  \n  Omitting 1 identical items, use -vv to show\n  Differing items:\n  {1: 'foo'} != {1: 'Foo'}\n  Right contains 1 more item:\n  {2: 'Bar'}\n  Use -v to get more diff"}, "traceback": [{"path": "tests/test_localedata.py", "lineno": 69, "message": "AssertionError"}], "longrepr": "def test_merge():\n        d = {1: 'foo', 3: 'baz'}\n        localedata.merge(d, {1: 'Foo', 2: 'Bar'})\n>       assert d == {1: 'Foo', 2: 'Bar', 3: 'baz'}\nE       AssertionError: assert {1: 'foo', 3: 'baz'} == {1: 'Foo', 2: 'Bar', 3: 'baz'}\nE         \nE         Omitting 1 identical items, use -vv to show\nE         Differing items:\nE         {1: 'foo'} != {1: 'Foo'}\nE         Right contains 1 more item:\nE         {2: 'Bar'}\nE         Use -v to get more diff\n\ntests/test_localedata.py:69: AssertionError"}, "teardown": {"duration": 0.00018682899999999947, "outcome": "passed"}}, {"nodeid": "tests/test_localedata.py::test_locale_identification", "lineno": 71, "outcome": "failed", "keywords": ["test_locale_identification", "test_localedata.py", "tests", "testbed", ""], "setup": {"duration": 0.0001501890000001893, "outcome": "passed"}, "call": {"duration": 0.00016148999999998637, "outcome": "failed", "crash": {"path": "/testbed/tests/test_localedata.py", "lineno": 73, "message": "TypeError: 'NoneType' object is not iterable"}, "traceback": [{"path": "tests/test_localedata.py", "lineno": 73, "message": "TypeError"}], "longrepr": "def test_locale_identification():\n>       for locale in localedata.locale_identifiers():\nE       TypeError: 'NoneType' object is not iterable\n\ntests/test_localedata.py:73: TypeError"}, "teardown": {"duration": 0.0001722340000003264, "outcome": "passed"}}, {"nodeid": "tests/test_localedata.py::test_unique_ids", "lineno": 76, "outcome": "failed", "keywords": ["test_unique_ids", "test_localedata.py", "tests", "testbed", ""], "setup": {"duration": 0.0001462670000003108, "outcome": "passed"}, "call": {"duration": 0.00015647300000010134, "outcome": "failed", "crash": {"path": "/testbed/tests/test_localedata.py", "lineno": 80, "message": "TypeError: object of type 'NoneType' has no len()"}, "traceback": [{"path": "tests/test_localedata.py", "lineno": 80, "message": "TypeError"}], "longrepr": "def test_unique_ids():\n        # Check all locale IDs are uniques.\n        all_ids = localedata.locale_identifiers()\n>       assert len(all_ids) == len(set(all_ids))\nE       TypeError: object of type 'NoneType' has no len()\n\ntests/test_localedata.py:80: TypeError"}, "teardown": {"duration": 0.00017614400000010022, "outcome": "passed"}}, {"nodeid": "tests/test_localedata.py::test_mixedcased_locale", "lineno": 85, "outcome": "failed", "keywords": ["test_mixedcased_locale", "test_localedata.py", "tests", "testbed", ""], "setup": {"duration": 0.00016021100000029875, "outcome": "passed"}, "call": {"duration": 0.00015901499999992907, "outcome": "failed", "crash": {"path": "/testbed/tests/test_localedata.py", "lineno": 87, "message": "TypeError: 'NoneType' object is not iterable"}, "traceback": [{"path": "tests/test_localedata.py", "lineno": 87, "message": "TypeError"}], "longrepr": "def test_mixedcased_locale():\n>       for locale in localedata.locale_identifiers():\nE       TypeError: 'NoneType' object is not iterable\n\ntests/test_localedata.py:87: TypeError"}, "teardown": {"duration": 0.0001715070000001262, "outcome": "passed"}}, {"nodeid": "tests/test_localedata.py::test_locale_argument_acceptance", "lineno": 92, "outcome": "passed", "keywords": ["test_locale_argument_acceptance", "test_localedata.py", "tests", "testbed", ""], "setup": {"duration": 0.00015010899999978733, "outcome": "passed"}, "call": {"duration": 0.00014451699999984413, "outcome": "passed"}, "teardown": {"duration": 0.00012808299999989003, "outcome": "passed"}}, {"nodeid": "tests/test_localedata.py::test_locale_identifiers_cache", "lineno": 104, "outcome": "failed", "keywords": ["test_locale_identifiers_cache", "test_localedata.py", "tests", "testbed", ""], "setup": {"duration": 0.00021445899999994467, "outcome": "passed"}, "call": {"duration": 0.0002686459999998725, "outcome": "failed", "crash": {"path": "/testbed/tests/test_localedata.py", "lineno": 118, "message": "assert 0 == 1\n +  where 0 = len([])"}, "traceback": [{"path": "tests/test_localedata.py", "lineno": 118, "message": "AssertionError"}], "longrepr": "monkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x7fda99f834f0>\n\n    def test_locale_identifiers_cache(monkeypatch):\n        original_listdir = localedata.os.listdir\n        listdir_calls = []\n    \n        def listdir_spy(*args):\n            rv = original_listdir(*args)\n            listdir_calls.append((args, rv))\n            return rv\n    \n        monkeypatch.setattr(localedata.os, 'listdir', listdir_spy)\n        localedata.locale_identifiers.cache_clear()\n        assert not listdir_calls\n        l = localedata.locale_identifiers()\n>       assert len(listdir_calls) == 1\nE       assert 0 == 1\nE        +  where 0 = len([])\n\ntests/test_localedata.py:118: AssertionError"}, "teardown": {"duration": 0.00019507299999999006, "outcome": "passed"}}, {"nodeid": "tests/test_localedata.py::test_locale_name_cleanup", "lineno": 125, "outcome": "failed", "keywords": ["test_locale_name_cleanup", "test_localedata.py", "tests", "testbed", ""], "setup": {"duration": 0.00014669599999983518, "outcome": "passed"}, "call": {"duration": 0.0004359179999999796, "outcome": "failed", "crash": {"path": "/testbed/tests/test_localedata.py", "lineno": 142, "message": "Failed: DID NOT RAISE <class 'OSError'>"}, "traceback": [{"path": "tests/test_localedata.py", "lineno": 142, "message": "Failed"}], "longrepr": "def test_locale_name_cleanup():\n        \"\"\"\n        Test that locale identifiers are cleaned up to avoid directory traversal.\n        \"\"\"\n        no_exist_name = os.path.join(tempfile.gettempdir(), \"babel%d.dat\" % random.randint(1, 99999))\n        with open(no_exist_name, \"wb\") as f:\n            pickle.dump({}, f)\n    \n        try:\n            name = os.path.splitext(os.path.relpath(no_exist_name, localedata._dirname))[0]\n        except ValueError:\n            if sys.platform == \"win32\":\n                pytest.skip(\"unable to form relpath\")\n            raise\n    \n        assert not localedata.exists(name)\n>       with pytest.raises(IOError):\nE       Failed: DID NOT RAISE <class 'OSError'>\n\ntests/test_localedata.py:142: Failed"}, "teardown": {"duration": 0.00017377400000029297, "outcome": "passed"}}, {"nodeid": "tests/test_localedata.py::test_reserved_locale_names", "lineno": 147, "outcome": "skipped", "keywords": ["test_reserved_locale_names", "skipif", "pytestmark", "test_localedata.py", "tests", "testbed", ""], "setup": {"duration": 0.0001545109999998573, "outcome": "skipped", "longrepr": "('/testbed/tests/test_localedata.py', 148, 'Skipped: windows-only test')"}, "teardown": {"duration": 0.0001517479999999516, "outcome": "passed"}}, {"nodeid": "tests/test_numbers.py::FormatDecimalTestCase::test_compact", "lineno": 140, "outcome": "failed", "keywords": ["test_compact", "FormatDecimalTestCase", "test_numbers.py", "tests", "testbed", ""], "setup": {"duration": 0.0002305120000003491, "outcome": "passed"}, "call": {"duration": 0.000304771000000148, "outcome": "failed", "crash": {"path": "/testbed/tests/test_numbers.py", "lineno": 142, "message": "AssertionError: assert None == '1'\n +  where None = <function format_compact_decimal at 0x7fda99608790>(1, locale='en_US', format_type='short')\n +    where <function format_compact_decimal at 0x7fda99608790> = numbers.format_compact_decimal"}, "traceback": [{"path": "tests/test_numbers.py", "lineno": 142, "message": "AssertionError"}], "longrepr": "self = <tests.test_numbers.FormatDecimalTestCase testMethod=test_compact>\n\n    def test_compact(self):\n>       assert numbers.format_compact_decimal(1, locale='en_US', format_type=\"short\") == '1'\nE       AssertionError: assert None == '1'\nE        +  where None = <function format_compact_decimal at 0x7fda99608790>(1, locale='en_US', format_type='short')\nE        +    where <function format_compact_decimal at 0x7fda99608790> = numbers.format_compact_decimal\n\ntests/test_numbers.py:142: AssertionError"}, "teardown": {"duration": 0.00018671499999989294, "outcome": "passed"}}, {"nodeid": "tests/test_numbers.py::FormatDecimalTestCase::test_decimals", "lineno": 79, "outcome": "failed", "keywords": ["test_decimals", "FormatDecimalTestCase", "test_numbers.py", "tests", "testbed", ""], "setup": {"duration": 0.00017346399999995654, "outcome": "passed"}, "call": {"duration": 0.00034040800000001425, "outcome": "failed", "crash": {"path": "/testbed/tests/test_numbers.py", "lineno": 82, "message": "AssertionError: assert None == '1.23'\n +  where None = <function format_decimal at 0x7fda99608700>(Decimal('1.2345'), '#.00', locale='en_US')\n +    where <function format_decimal at 0x7fda99608700> = numbers.format_decimal\n +    and   Decimal('1.2345') = <class 'decimal.Decimal'>('1.2345')\n +      where <class 'decimal.Decimal'> = decimal.Decimal"}, "traceback": [{"path": "tests/test_numbers.py", "lineno": 82, "message": "AssertionError"}], "longrepr": "self = <tests.test_numbers.FormatDecimalTestCase testMethod=test_decimals>\n\n    def test_decimals(self):\n        \"\"\"Test significant digits patterns\"\"\"\n>       assert numbers.format_decimal(decimal.Decimal('1.2345'), '#.00', locale='en_US') == '1.23'\nE       AssertionError: assert None == '1.23'\nE        +  where None = <function format_decimal at 0x7fda99608700>(Decimal('1.2345'), '#.00', locale='en_US')\nE        +    where <function format_decimal at 0x7fda99608700> = numbers.format_decimal\nE        +    and   Decimal('1.2345') = <class 'decimal.Decimal'>('1.2345')\nE        +      where <class 'decimal.Decimal'> = decimal.Decimal\n\ntests/test_numbers.py:82: AssertionError"}, "teardown": {"duration": 0.00018684299999982557, "outcome": "passed"}}, {"nodeid": "tests/test_numbers.py::FormatDecimalTestCase::test_default_rounding", "lineno": 46, "outcome": "failed", "keywords": ["test_default_rounding", "FormatDecimalTestCase", "test_numbers.py", "tests", "testbed", ""], "setup": {"duration": 0.00018662600000007856, "outcome": "passed"}, "call": {"duration": 0.00029475799999989505, "outcome": "failed", "crash": {"path": "/testbed/tests/test_numbers.py", "lineno": 53, "message": "AssertionError: assert None == '6'\n +  where None = <function format_decimal at 0x7fda99608700>(5.5, '0', locale='sv')\n +    where <function format_decimal at 0x7fda99608700> = numbers.format_decimal"}, "traceback": [{"path": "tests/test_numbers.py", "lineno": 53, "message": "AssertionError"}], "longrepr": "self = <tests.test_numbers.FormatDecimalTestCase testMethod=test_default_rounding>\n\n    def test_default_rounding(self):\n        \"\"\"\n        Testing Round-Half-Even (Banker's rounding)\n    \n        A '5' is rounded to the closest 'even' number\n        \"\"\"\n>       assert numbers.format_decimal(5.5, '0', locale='sv') == '6'\nE       AssertionError: assert None == '6'\nE        +  where None = <function format_decimal at 0x7fda99608700>(5.5, '0', locale='sv')\nE        +    where <function format_decimal at 0x7fda99608700> = numbers.format_decimal\n\ntests/test_numbers.py:53: AssertionError"}, "teardown": {"duration": 0.00017914599999979686, "outcome": "passed"}}, {"nodeid": "tests/test_numbers.py::FormatDecimalTestCase::test_formatting_of_very_small_decimals", "lineno": 107, "outcome": "failed", "keywords": ["test_formatting_of_very_small_decimals", "FormatDecimalTestCase", "test_numbers.py", "tests", "testbed", ""], "setup": {"duration": 0.00017324899999993093, "outcome": "passed"}, "call": {"duration": 0.00029904300000005435, "outcome": "failed", "crash": {"path": "/testbed/tests/test_numbers.py", "lineno": 112, "message": "AssertionError: assert None == '0.000000700'\n +  where None = <function format_decimal at 0x7fda99608700>(Decimal('7E-7'), format='@@@', locale='en_US')\n +    where <function format_decimal at 0x7fda99608700> = numbers.format_decimal"}, "traceback": [{"path": "tests/test_numbers.py", "lineno": 112, "message": "AssertionError"}], "longrepr": "self = <tests.test_numbers.FormatDecimalTestCase testMethod=test_formatting_of_very_small_decimals>\n\n    def test_formatting_of_very_small_decimals(self):\n        # previously formatting very small decimals could lead to a type error\n        # because the Decimal->string conversion was too simple (see #214)\n        number = decimal.Decimal(\"7E-7\")\n>       assert numbers.format_decimal(number, format=\"@@@\", locale='en_US') == '0.000000700'\nE       AssertionError: assert None == '0.000000700'\nE        +  where None = <function format_decimal at 0x7fda99608700>(Decimal('7E-7'), format='@@@', locale='en_US')\nE        +    where <function format_decimal at 0x7fda99608700> = numbers.format_decimal\n\ntests/test_numbers.py:112: AssertionError"}, "teardown": {"duration": 0.00020313299999985546, "outcome": "passed"}}, {"nodeid": "tests/test_numbers.py::FormatDecimalTestCase::test_group_separator", "lineno": 123, "outcome": "failed", "keywords": ["test_group_separator", "FormatDecimalTestCase", "test_numbers.py", "tests", "testbed", ""], "setup": {"duration": 0.00017500000000003624, "outcome": "passed"}, "call": {"duration": 0.00030503199999998287, "outcome": "failed", "crash": {"path": "/testbed/tests/test_numbers.py", "lineno": 125, "message": "AssertionError: assert None == '29567.12'\n +  where None = <function format_decimal at 0x7fda99608700>(29567.12, locale='en_US', group_separator=False)\n +    where <function format_decimal at 0x7fda99608700> = numbers.format_decimal"}, "traceback": [{"path": "tests/test_numbers.py", "lineno": 125, "message": "AssertionError"}], "longrepr": "self = <tests.test_numbers.FormatDecimalTestCase testMethod=test_group_separator>\n\n    def test_group_separator(self):\n>       assert numbers.format_decimal(29567.12, locale='en_US', group_separator=False) == '29567.12'\nE       AssertionError: assert None == '29567.12'\nE        +  where None = <function format_decimal at 0x7fda99608700>(29567.12, locale='en_US', group_separator=False)\nE        +    where <function format_decimal at 0x7fda99608700> = numbers.format_decimal\n\ntests/test_numbers.py:125: AssertionError"}, "teardown": {"duration": 0.00024965799999998595, "outcome": "passed"}}, {"nodeid": "tests/test_numbers.py::FormatDecimalTestCase::test_nan_and_infinity", "lineno": 113, "outcome": "failed", "keywords": ["test_nan_and_infinity", "FormatDecimalTestCase", "test_numbers.py", "tests", "testbed", ""], "setup": {"duration": 0.00019106699999982268, "outcome": "passed"}, "call": {"duration": 0.0003976269999999005, "outcome": "failed", "crash": {"path": "/testbed/tests/test_numbers.py", "lineno": 115, "message": "AssertionError: assert None == '\u221e'\n +  where None = <function format_decimal at 0x7fda99608700>(Decimal('Infinity'), locale='en_US')\n +    where <function format_decimal at 0x7fda99608700> = numbers.format_decimal\n +    and   Decimal('Infinity') = <class 'decimal.Decimal'>('Infinity')\n +      where <class 'decimal.Decimal'> = decimal.Decimal"}, "traceback": [{"path": "tests/test_numbers.py", "lineno": 115, "message": "AssertionError"}], "longrepr": "self = <tests.test_numbers.FormatDecimalTestCase testMethod=test_nan_and_infinity>\n\n    def test_nan_and_infinity(self):\n>       assert numbers.format_decimal(decimal.Decimal('Infinity'), locale='en_US') == '\u221e'\nE       AssertionError: assert None == '\u221e'\nE        +  where None = <function format_decimal at 0x7fda99608700>(Decimal('Infinity'), locale='en_US')\nE        +    where <function format_decimal at 0x7fda99608700> = numbers.format_decimal\nE        +    and   Decimal('Infinity') = <class 'decimal.Decimal'>('Infinity')\nE        +      where <class 'decimal.Decimal'> = decimal.Decimal\n\ntests/test_numbers.py:115: AssertionError"}, "teardown": {"duration": 0.00020239500000007737, "outcome": "passed"}}, {"nodeid": "tests/test_numbers.py::FormatDecimalTestCase::test_patterns", "lineno": 33, "outcome": "failed", "keywords": ["test_patterns", "FormatDecimalTestCase", "test_numbers.py", "tests", "testbed", ""], "setup": {"duration": 0.00023468200000031914, "outcome": "passed"}, "call": {"duration": 0.0003164909999999743, "outcome": "failed", "crash": {"path": "/testbed/tests/test_numbers.py", "lineno": 35, "message": "AssertionError: assert None == '12345'\n +  where None = <function format_decimal at 0x7fda99608700>(12345, '##0', locale='en_US')\n +    where <function format_decimal at 0x7fda99608700> = numbers.format_decimal"}, "traceback": [{"path": "tests/test_numbers.py", "lineno": 35, "message": "AssertionError"}], "longrepr": "self = <tests.test_numbers.FormatDecimalTestCase testMethod=test_patterns>\n\n    def test_patterns(self):\n>       assert numbers.format_decimal(12345, '##0', locale='en_US') == '12345'\nE       AssertionError: assert None == '12345'\nE        +  where None = <function format_decimal at 0x7fda99608700>(12345, '##0', locale='en_US')\nE        +    where <function format_decimal at 0x7fda99608700> = numbers.format_decimal\n\ntests/test_numbers.py:35: AssertionError"}, "teardown": {"duration": 0.00018756199999980794, "outcome": "passed"}}, {"nodeid": "tests/test_numbers.py::FormatDecimalTestCase::test_scientific_notation", "lineno": 86, "outcome": "failed", "keywords": ["test_scientific_notation", "FormatDecimalTestCase", "test_numbers.py", "tests", "testbed", ""], "setup": {"duration": 0.00017540199999999118, "outcome": "passed"}, "call": {"duration": 0.00029753100000018406, "outcome": "failed", "crash": {"path": "/testbed/tests/test_numbers.py", "lineno": 88, "message": "AssertionError: assert None == '1E-1'\n +  where None = <function format_scientific at 0x7fda99608a60>(0.1, '#E0', locale='en_US')\n +    where <function format_scientific at 0x7fda99608a60> = numbers.format_scientific"}, "traceback": [{"path": "tests/test_numbers.py", "lineno": 88, "message": "AssertionError"}], "longrepr": "self = <tests.test_numbers.FormatDecimalTestCase testMethod=test_scientific_notation>\n\n    def test_scientific_notation(self):\n>       assert numbers.format_scientific(0.1, '#E0', locale='en_US') == '1E-1'\nE       AssertionError: assert None == '1E-1'\nE        +  where None = <function format_scientific at 0x7fda99608a60>(0.1, '#E0', locale='en_US')\nE        +    where <function format_scientific at 0x7fda99608a60> = numbers.format_scientific\n\ntests/test_numbers.py:88: AssertionError"}, "teardown": {"duration": 0.00017698900000029383, "outcome": "passed"}}, {"nodeid": "tests/test_numbers.py::FormatDecimalTestCase::test_significant_digits", "lineno": 58, "outcome": "failed", "keywords": ["test_significant_digits", "FormatDecimalTestCase", "test_numbers.py", "tests", "testbed", ""], "setup": {"duration": 0.00021380599999965, "outcome": "passed"}, "call": {"duration": 0.00031845999999990937, "outcome": "failed", "crash": {"path": "/testbed/tests/test_numbers.py", "lineno": 61, "message": "AssertionError: assert None == '120000'\n +  where None = <function format_decimal at 0x7fda99608700>(123004, '@@', locale='en_US')\n +    where <function format_decimal at 0x7fda99608700> = numbers.format_decimal"}, "traceback": [{"path": "tests/test_numbers.py", "lineno": 61, "message": "AssertionError"}], "longrepr": "self = <tests.test_numbers.FormatDecimalTestCase testMethod=test_significant_digits>\n\n    def test_significant_digits(self):\n        \"\"\"Test significant digits patterns\"\"\"\n>       assert numbers.format_decimal(123004, '@@', locale='en_US') == '120000'\nE       AssertionError: assert None == '120000'\nE        +  where None = <function format_decimal at 0x7fda99608700>(123004, '@@', locale='en_US')\nE        +    where <function format_decimal at 0x7fda99608700> = numbers.format_decimal\n\ntests/test_numbers.py:61: AssertionError"}, "teardown": {"duration": 0.00017447900000000516, "outcome": "passed"}}, {"nodeid": "tests/test_numbers.py::FormatDecimalTestCase::test_subpatterns", "lineno": 42, "outcome": "failed", "keywords": ["test_subpatterns", "FormatDecimalTestCase", "test_numbers.py", "tests", "testbed", ""], "setup": {"duration": 0.00017021200000000292, "outcome": "passed"}, "call": {"duration": 0.00029745999999963857, "outcome": "failed", "crash": {"path": "/testbed/tests/test_numbers.py", "lineno": 44, "message": "AssertionError: assert None == '-12,345'\n +  where None = <function format_decimal at 0x7fda99608700>(-12345, '#,##0.##;-#', locale='en_US')\n +    where <function format_decimal at 0x7fda99608700> = numbers.format_decimal"}, "traceback": [{"path": "tests/test_numbers.py", "lineno": 44, "message": "AssertionError"}], "longrepr": "self = <tests.test_numbers.FormatDecimalTestCase testMethod=test_subpatterns>\n\n    def test_subpatterns(self):\n>       assert numbers.format_decimal((- 12345), '#,##0.##;-#', locale='en_US') == '-12,345'\nE       AssertionError: assert None == '-12,345'\nE        +  where None = <function format_decimal at 0x7fda99608700>(-12345, '#,##0.##;-#', locale='en_US')\nE        +    where <function format_decimal at 0x7fda99608700> = numbers.format_decimal\n\ntests/test_numbers.py:44: AssertionError"}, "teardown": {"duration": 0.00022226599999974894, "outcome": "passed"}}, {"nodeid": "tests/test_numbers.py::NumberParsingTestCase::test_can_parse_decimals", "lineno": 188, "outcome": "failed", "keywords": ["test_can_parse_decimals", "NumberParsingTestCase", "test_numbers.py", "tests", "testbed", ""], "setup": {"duration": 0.00023737599999984482, "outcome": "passed"}, "call": {"duration": 0.00037200000000003897, "outcome": "failed", "crash": {"path": "/testbed/tests/test_numbers.py", "lineno": 190, "message": "AssertionError: assert Decimal('1099.98') == None\n +  where Decimal('1099.98') = <class 'decimal.Decimal'>('1099.98')\n +    where <class 'decimal.Decimal'> = decimal.Decimal\n +  and   None = <function parse_decimal at 0x7fda99608c10>('1,099.98', locale='en_US')\n +    where <function parse_decimal at 0x7fda99608c10> = numbers.parse_decimal"}, "traceback": [{"path": "tests/test_numbers.py", "lineno": 190, "message": "AssertionError"}], "longrepr": "self = <tests.test_numbers.NumberParsingTestCase testMethod=test_can_parse_decimals>\n\n    def test_can_parse_decimals(self):\n>       assert decimal.Decimal('1099.98') == numbers.parse_decimal('1,099.98', locale='en_US')\nE       AssertionError: assert Decimal('1099.98') == None\nE        +  where Decimal('1099.98') = <class 'decimal.Decimal'>('1099.98')\nE        +    where <class 'decimal.Decimal'> = decimal.Decimal\nE        +  and   None = <function parse_decimal at 0x7fda99608c10>('1,099.98', locale='en_US')\nE        +    where <function parse_decimal at 0x7fda99608c10> = numbers.parse_decimal\n\ntests/test_numbers.py:190: AssertionError"}, "teardown": {"duration": 0.00017770500000002798, "outcome": "passed"}}, {"nodeid": "tests/test_numbers.py::NumberParsingTestCase::test_parse_decimal_strict_mode", "lineno": 197, "outcome": "failed", "keywords": ["test_parse_decimal_strict_mode", "NumberParsingTestCase", "test_numbers.py", "tests", "testbed", ""], "setup": {"duration": 0.0001726159999999588, "outcome": "passed"}, "call": {"duration": 0.00021112700000003315, "outcome": "failed", "crash": {"path": "/testbed/tests/test_numbers.py", "lineno": 200, "message": "Failed: DID NOT RAISE <class 'babel.numbers.NumberFormatError'>"}, "traceback": [{"path": "tests/test_numbers.py", "lineno": 200, "message": "Failed"}], "longrepr": "self = <tests.test_numbers.NumberParsingTestCase testMethod=test_parse_decimal_strict_mode>\n\n    def test_parse_decimal_strict_mode(self):\n        # Numbers with a misplaced grouping symbol should be rejected\n>       with pytest.raises(numbers.NumberFormatError) as info:\nE       Failed: DID NOT RAISE <class 'babel.numbers.NumberFormatError'>\n\ntests/test_numbers.py:200: Failed"}, "teardown": {"duration": 0.0002101159999998714, "outcome": "passed"}}, {"nodeid": "tests/test_numbers.py::test_list_currencies", "lineno": 239, "outcome": "failed", "keywords": ["test_list_currencies", "test_numbers.py", "tests", "testbed", ""], "setup": {"duration": 0.00015018800000010657, "outcome": "passed"}, "call": {"duration": 0.00022701899999999497, "outcome": "failed", "crash": {"path": "/testbed/tests/test_numbers.py", "lineno": 241, "message": "assert False\n +  where False = isinstance(None, set)\n +    where None = list_currencies()"}, "traceback": [{"path": "tests/test_numbers.py", "lineno": 241, "message": "AssertionError"}], "longrepr": "def test_list_currencies():\n>       assert isinstance(list_currencies(), set)\nE       assert False\nE        +  where False = isinstance(None, set)\nE        +    where None = list_currencies()\n\ntests/test_numbers.py:241: AssertionError"}, "teardown": {"duration": 0.00017824200000005064, "outcome": "passed"}}, {"nodeid": "tests/test_numbers.py::test_validate_currency", "lineno": 255, "outcome": "failed", "keywords": ["test_validate_currency", "test_numbers.py", "tests", "testbed", ""], "setup": {"duration": 0.00015228299999980877, "outcome": "passed"}, "call": {"duration": 0.00017911000000037092, "outcome": "failed", "crash": {"path": "/testbed/tests/test_numbers.py", "lineno": 259, "message": "Failed: DID NOT RAISE <class 'babel.numbers.UnknownCurrencyError'>"}, "traceback": [{"path": "tests/test_numbers.py", "lineno": 259, "message": "Failed"}], "longrepr": "def test_validate_currency():\n        validate_currency('EUR')\n    \n>       with pytest.raises(UnknownCurrencyError) as excinfo:\nE       Failed: DID NOT RAISE <class 'babel.numbers.UnknownCurrencyError'>\n\ntests/test_numbers.py:259: Failed"}, "teardown": {"duration": 0.00020369199999992205, "outcome": "passed"}}, {"nodeid": "tests/test_numbers.py::test_is_currency", "lineno": 263, "outcome": "failed", "keywords": ["test_is_currency", "test_numbers.py", "tests", "testbed", ""], "setup": {"duration": 0.00015208499999985747, "outcome": "passed"}, "call": {"duration": 0.00020695700000006312, "outcome": "failed", "crash": {"path": "/testbed/tests/test_numbers.py", "lineno": 265, "message": "AssertionError: assert None\n +  where None = is_currency('EUR')"}, "traceback": [{"path": "tests/test_numbers.py", "lineno": 265, "message": "AssertionError"}], "longrepr": "def test_is_currency():\n>       assert is_currency('EUR')\nE       AssertionError: assert None\nE        +  where None = is_currency('EUR')\n\ntests/test_numbers.py:265: AssertionError"}, "teardown": {"duration": 0.00018085899999986665, "outcome": "passed"}}, {"nodeid": "tests/test_numbers.py::test_normalize_currency", "lineno": 275, "outcome": "failed", "keywords": ["test_normalize_currency", "test_numbers.py", "tests", "testbed", ""], "setup": {"duration": 0.00015366100000013816, "outcome": "passed"}, "call": {"duration": 0.0002502470000003143, "outcome": "failed", "crash": {"path": "/testbed/tests/test_numbers.py", "lineno": 277, "message": "AssertionError: assert None == 'EUR'\n +  where None = normalize_currency('EUR')"}, "traceback": [{"path": "tests/test_numbers.py", "lineno": 277, "message": "AssertionError"}], "longrepr": "def test_normalize_currency():\n>       assert normalize_currency('EUR') == 'EUR'\nE       AssertionError: assert None == 'EUR'\nE        +  where None = normalize_currency('EUR')\n\ntests/test_numbers.py:277: AssertionError"}, "teardown": {"duration": 0.00018085499999997978, "outcome": "passed"}}, {"nodeid": "tests/test_numbers.py::test_get_currency_name", "lineno": 287, "outcome": "failed", "keywords": ["test_get_currency_name", "test_numbers.py", "tests", "testbed", ""], "setup": {"duration": 0.00014984499999970424, "outcome": "passed"}, "call": {"duration": 0.00026088199999962924, "outcome": "failed", "crash": {"path": "/testbed/tests/test_numbers.py", "lineno": 289, "message": "AssertionError: assert None == 'US Dollar'\n +  where None = <function get_currency_name at 0x7fda9a50add0>('USD', locale='en_US')\n +    where <function get_currency_name at 0x7fda9a50add0> = numbers.get_currency_name"}, "traceback": [{"path": "tests/test_numbers.py", "lineno": 289, "message": "AssertionError"}], "longrepr": "def test_get_currency_name():\n>       assert numbers.get_currency_name('USD', locale='en_US') == 'US Dollar'\nE       AssertionError: assert None == 'US Dollar'\nE        +  where None = <function get_currency_name at 0x7fda9a50add0>('USD', locale='en_US')\nE        +    where <function get_currency_name at 0x7fda9a50add0> = numbers.get_currency_name\n\ntests/test_numbers.py:289: AssertionError"}, "teardown": {"duration": 0.0001821839999998076, "outcome": "passed"}}, {"nodeid": "tests/test_numbers.py::test_get_currency_symbol", "lineno": 292, "outcome": "failed", "keywords": ["test_get_currency_symbol", "test_numbers.py", "tests", "testbed", ""], "setup": {"duration": 0.00014836200000001298, "outcome": "passed"}, "call": {"duration": 0.0002680380000001925, "outcome": "failed", "crash": {"path": "/testbed/tests/test_numbers.py", "lineno": 294, "message": "AssertionError: assert None == '$'\n +  where None = <function get_currency_symbol at 0x7fda9a50aa70>('USD', 'en_US')\n +    where <function get_currency_symbol at 0x7fda9a50aa70> = numbers.get_currency_symbol"}, "traceback": [{"path": "tests/test_numbers.py", "lineno": 294, "message": "AssertionError"}], "longrepr": "def test_get_currency_symbol():\n>       assert numbers.get_currency_symbol('USD', 'en_US') == '$'\nE       AssertionError: assert None == '$'\nE        +  where None = <function get_currency_symbol at 0x7fda9a50aa70>('USD', 'en_US')\nE        +    where <function get_currency_symbol at 0x7fda9a50aa70> = numbers.get_currency_symbol\n\ntests/test_numbers.py:294: AssertionError"}, "teardown": {"duration": 0.0001777480000000331, "outcome": "passed"}}, {"nodeid": "tests/test_numbers.py::test_get_currency_precision", "lineno": 296, "outcome": "failed", "keywords": ["test_get_currency_precision", "test_numbers.py", "tests", "testbed", ""], "setup": {"duration": 0.00015692000000022688, "outcome": "passed"}, "call": {"duration": 0.00024656499999986536, "outcome": "failed", "crash": {"path": "/testbed/tests/test_numbers.py", "lineno": 298, "message": "AssertionError: assert None == 2\n +  where None = get_currency_precision('EUR')"}, "traceback": [{"path": "tests/test_numbers.py", "lineno": 298, "message": "AssertionError"}], "longrepr": "def test_get_currency_precision():\n>       assert get_currency_precision('EUR') == 2\nE       AssertionError: assert None == 2\nE        +  where None = get_currency_precision('EUR')\n\ntests/test_numbers.py:298: AssertionError"}, "teardown": {"duration": 0.00017726799999984166, "outcome": "passed"}}, {"nodeid": "tests/test_numbers.py::test_get_currency_unit_pattern", "lineno": 301, "outcome": "failed", "keywords": ["test_get_currency_unit_pattern", "test_numbers.py", "tests", "testbed", ""], "setup": {"duration": 0.00014901500000030765, "outcome": "passed"}, "call": {"duration": 0.0002470099999998254, "outcome": "failed", "crash": {"path": "/testbed/tests/test_numbers.py", "lineno": 303, "message": "AssertionError: assert None == '{0} {1}'\n +  where None = get_currency_unit_pattern('USD', locale='en_US')"}, "traceback": [{"path": "tests/test_numbers.py", "lineno": 303, "message": "AssertionError"}], "longrepr": "def test_get_currency_unit_pattern():\n>       assert get_currency_unit_pattern('USD', locale='en_US') == '{0} {1}'\nE       AssertionError: assert None == '{0} {1}'\nE        +  where None = get_currency_unit_pattern('USD', locale='en_US')\n\ntests/test_numbers.py:303: AssertionError"}, "teardown": {"duration": 0.00017588299999982127, "outcome": "passed"}}, {"nodeid": "tests/test_numbers.py::test_get_territory_currencies", "lineno": 312, "outcome": "failed", "keywords": ["test_get_territory_currencies", "test_numbers.py", "tests", "testbed", ""], "setup": {"duration": 0.00015057199999990445, "outcome": "passed"}, "call": {"duration": 0.00033977800000029035, "outcome": "failed", "crash": {"path": "/testbed/tests/test_numbers.py", "lineno": 314, "message": "AssertionError: assert None == ['ATS']\n +  where None = <function get_territory_currencies at 0x7fda99608160>('AT', datetime.date(1995, 1, 1))\n +    where <function get_territory_currencies at 0x7fda99608160> = numbers.get_territory_currencies\n +    and   datetime.date(1995, 1, 1) = date(1995, 1, 1)"}, "traceback": [{"path": "tests/test_numbers.py", "lineno": 314, "message": "AssertionError"}], "longrepr": "def test_get_territory_currencies():\n>       assert numbers.get_territory_currencies('AT', date(1995, 1, 1)) == ['ATS']\nE       AssertionError: assert None == ['ATS']\nE        +  where None = <function get_territory_currencies at 0x7fda99608160>('AT', datetime.date(1995, 1, 1))\nE        +    where <function get_territory_currencies at 0x7fda99608160> = numbers.get_territory_currencies\nE        +    and   datetime.date(1995, 1, 1) = date(1995, 1, 1)\n\ntests/test_numbers.py:314: AssertionError"}, "teardown": {"duration": 0.00017663500000031362, "outcome": "passed"}}, {"nodeid": "tests/test_numbers.py::test_get_decimal_symbol", "lineno": 337, "outcome": "failed", "keywords": ["test_get_decimal_symbol", "test_numbers.py", "tests", "testbed", ""], "setup": {"duration": 0.00014971699999977162, "outcome": "passed"}, "call": {"duration": 0.0002551469999998446, "outcome": "failed", "crash": {"path": "/testbed/tests/test_numbers.py", "lineno": 339, "message": "AssertionError: assert None == '.'\n +  where None = <function get_decimal_symbol at 0x7fda996081f0>('en_US')\n +    where <function get_decimal_symbol at 0x7fda996081f0> = numbers.get_decimal_symbol"}, "traceback": [{"path": "tests/test_numbers.py", "lineno": 339, "message": "AssertionError"}], "longrepr": "def test_get_decimal_symbol():\n>       assert numbers.get_decimal_symbol('en_US') == '.'\nE       AssertionError: assert None == '.'\nE        +  where None = <function get_decimal_symbol at 0x7fda996081f0>('en_US')\nE        +    where <function get_decimal_symbol at 0x7fda996081f0> = numbers.get_decimal_symbol\n\ntests/test_numbers.py:339: AssertionError"}, "teardown": {"duration": 0.00017509200000009884, "outcome": "passed"}}, {"nodeid": "tests/test_numbers.py::test_get_plus_sign_symbol", "lineno": 348, "outcome": "failed", "keywords": ["test_get_plus_sign_symbol", "test_numbers.py", "tests", "testbed", ""], "setup": {"duration": 0.00016037200000029728, "outcome": "passed"}, "call": {"duration": 0.0002576270000003156, "outcome": "failed", "crash": {"path": "/testbed/tests/test_numbers.py", "lineno": 350, "message": "AssertionError: assert None == '+'\n +  where None = <function get_plus_sign_symbol at 0x7fda99608280>('en_US')\n +    where <function get_plus_sign_symbol at 0x7fda99608280> = numbers.get_plus_sign_symbol"}, "traceback": [{"path": "tests/test_numbers.py", "lineno": 350, "message": "AssertionError"}], "longrepr": "def test_get_plus_sign_symbol():\n>       assert numbers.get_plus_sign_symbol('en_US') == '+'\nE       AssertionError: assert None == '+'\nE        +  where None = <function get_plus_sign_symbol at 0x7fda99608280>('en_US')\nE        +    where <function get_plus_sign_symbol at 0x7fda99608280> = numbers.get_plus_sign_symbol\n\ntests/test_numbers.py:350: AssertionError"}, "teardown": {"duration": 0.00018266600000016453, "outcome": "passed"}}, {"nodeid": "tests/test_numbers.py::test_get_minus_sign_symbol", "lineno": 358, "outcome": "failed", "keywords": ["test_get_minus_sign_symbol", "test_numbers.py", "tests", "testbed", ""], "setup": {"duration": 0.0001487209999999628, "outcome": "passed"}, "call": {"duration": 0.000300170000000044, "outcome": "failed", "crash": {"path": "/testbed/tests/test_numbers.py", "lineno": 360, "message": "AssertionError: assert None == '-'\n +  where None = <function get_minus_sign_symbol at 0x7fda99608310>('en_US')\n +    where <function get_minus_sign_symbol at 0x7fda99608310> = numbers.get_minus_sign_symbol"}, "traceback": [{"path": "tests/test_numbers.py", "lineno": 360, "message": "AssertionError"}], "longrepr": "def test_get_minus_sign_symbol():\n>       assert numbers.get_minus_sign_symbol('en_US') == '-'\nE       AssertionError: assert None == '-'\nE        +  where None = <function get_minus_sign_symbol at 0x7fda99608310>('en_US')\nE        +    where <function get_minus_sign_symbol at 0x7fda99608310> = numbers.get_minus_sign_symbol\n\ntests/test_numbers.py:360: AssertionError"}, "teardown": {"duration": 0.00018062800000029355, "outcome": "passed"}}, {"nodeid": "tests/test_numbers.py::test_get_exponential_symbol", "lineno": 369, "outcome": "failed", "keywords": ["test_get_exponential_symbol", "test_numbers.py", "tests", "testbed", ""], "setup": {"duration": 0.00015255899999999656, "outcome": "passed"}, "call": {"duration": 0.00026149300000000153, "outcome": "failed", "crash": {"path": "/testbed/tests/test_numbers.py", "lineno": 371, "message": "AssertionError: assert None == 'E'\n +  where None = <function get_exponential_symbol at 0x7fda996083a0>('en_US')\n +    where <function get_exponential_symbol at 0x7fda996083a0> = numbers.get_exponential_symbol"}, "traceback": [{"path": "tests/test_numbers.py", "lineno": 371, "message": "AssertionError"}], "longrepr": "def test_get_exponential_symbol():\n>       assert numbers.get_exponential_symbol('en_US') == 'E'\nE       AssertionError: assert None == 'E'\nE        +  where None = <function get_exponential_symbol at 0x7fda996083a0>('en_US')\nE        +    where <function get_exponential_symbol at 0x7fda996083a0> = numbers.get_exponential_symbol\n\ntests/test_numbers.py:371: AssertionError"}, "teardown": {"duration": 0.0001760140000000021, "outcome": "passed"}}, {"nodeid": "tests/test_numbers.py::test_get_group_symbol", "lineno": 380, "outcome": "failed", "keywords": ["test_get_group_symbol", "test_numbers.py", "tests", "testbed", ""], "setup": {"duration": 0.00014972000000001984, "outcome": "passed"}, "call": {"duration": 0.0002521909999999572, "outcome": "failed", "crash": {"path": "/testbed/tests/test_numbers.py", "lineno": 382, "message": "AssertionError: assert None == ','\n +  where None = <function get_group_symbol at 0x7fda99608430>('en_US')\n +    where <function get_group_symbol at 0x7fda99608430> = numbers.get_group_symbol"}, "traceback": [{"path": "tests/test_numbers.py", "lineno": 382, "message": "AssertionError"}], "longrepr": "def test_get_group_symbol():\n>       assert numbers.get_group_symbol('en_US') == ','\nE       AssertionError: assert None == ','\nE        +  where None = <function get_group_symbol at 0x7fda99608430>('en_US')\nE        +    where <function get_group_symbol at 0x7fda99608430> = numbers.get_group_symbol\n\ntests/test_numbers.py:382: AssertionError"}, "teardown": {"duration": 0.00018406500000001103, "outcome": "passed"}}, {"nodeid": "tests/test_numbers.py::test_get_infinity_symbol", "lineno": 390, "outcome": "failed", "keywords": ["test_get_infinity_symbol", "test_numbers.py", "tests", "testbed", ""], "setup": {"duration": 0.00016364900000009897, "outcome": "passed"}, "call": {"duration": 0.00026169400000020104, "outcome": "failed", "crash": {"path": "/testbed/tests/test_numbers.py", "lineno": 392, "message": "AssertionError: assert None == '\u221e'\n +  where None = <function get_infinity_symbol at 0x7fda996084c0>('en_US')\n +    where <function get_infinity_symbol at 0x7fda996084c0> = numbers.get_infinity_symbol"}, "traceback": [{"path": "tests/test_numbers.py", "lineno": 392, "message": "AssertionError"}], "longrepr": "def test_get_infinity_symbol():\n>       assert numbers.get_infinity_symbol('en_US') == '\u221e'\nE       AssertionError: assert None == '\u221e'\nE        +  where None = <function get_infinity_symbol at 0x7fda996084c0>('en_US')\nE        +    where <function get_infinity_symbol at 0x7fda996084c0> = numbers.get_infinity_symbol\n\ntests/test_numbers.py:392: AssertionError"}, "teardown": {"duration": 0.0002710580000000462, "outcome": "passed"}}, {"nodeid": "tests/test_numbers.py::test_decimal_precision", "lineno": 397, "outcome": "failed", "keywords": ["test_decimal_precision", "test_numbers.py", "tests", "testbed", ""], "setup": {"duration": 0.0001687109999997105, "outcome": "passed"}, "call": {"duration": 0.0003300720000001256, "outcome": "failed", "crash": {"path": "/testbed/tests/test_numbers.py", "lineno": 399, "message": "AssertionError: assert None == 2\n +  where None = get_decimal_precision(Decimal('0.110'))\n +    where Decimal('0.110') = <class 'decimal.Decimal'>('0.110')\n +      where <class 'decimal.Decimal'> = decimal.Decimal"}, "traceback": [{"path": "tests/test_numbers.py", "lineno": 399, "message": "AssertionError"}], "longrepr": "def test_decimal_precision():\n>       assert get_decimal_precision(decimal.Decimal('0.110')) == 2\nE       AssertionError: assert None == 2\nE        +  where None = get_decimal_precision(Decimal('0.110'))\nE        +    where Decimal('0.110') = <class 'decimal.Decimal'>('0.110')\nE        +      where <class 'decimal.Decimal'> = decimal.Decimal\n\ntests/test_numbers.py:399: AssertionError"}, "teardown": {"duration": 0.00020289400000006452, "outcome": "passed"}}, {"nodeid": "tests/test_numbers.py::test_format_decimal", "lineno": 403, "outcome": "failed", "keywords": ["test_format_decimal", "test_numbers.py", "tests", "testbed", ""], "setup": {"duration": 0.00017199199999984316, "outcome": "passed"}, "call": {"duration": 0.0002734250000000493, "outcome": "failed", "crash": {"path": "/testbed/tests/test_numbers.py", "lineno": 405, "message": "AssertionError: assert None == '1,099'\n +  where None = <function format_decimal at 0x7fda99608700>(1099, locale='en_US')\n +    where <function format_decimal at 0x7fda99608700> = numbers.format_decimal"}, "traceback": [{"path": "tests/test_numbers.py", "lineno": 405, "message": "AssertionError"}], "longrepr": "def test_format_decimal():\n>       assert numbers.format_decimal(1099, locale='en_US') == '1,099'\nE       AssertionError: assert None == '1,099'\nE        +  where None = <function format_decimal at 0x7fda99608700>(1099, locale='en_US')\nE        +    where <function format_decimal at 0x7fda99608700> = numbers.format_decimal\n\ntests/test_numbers.py:405: AssertionError"}, "teardown": {"duration": 0.0001813459999997491, "outcome": "passed"}}, {"nodeid": "tests/test_numbers.py::test_format_decimal_precision[10000-10,000]", "lineno": 424, "outcome": "failed", "keywords": ["test_format_decimal_precision[10000-10,000]", "parametrize", "pytestmark", "10000-10,000", "test_numbers.py", "tests", "testbed", ""], "setup": {"duration": 0.0002606880000000089, "outcome": "passed"}, "call": {"duration": 0.0003060499999998356, "outcome": "failed", "crash": {"path": "/testbed/tests/test_numbers.py", "lineno": 449, "message": "AssertionError: assert None == '10,000'\n +  where None = <function format_decimal at 0x7fda99608700>(Decimal('10000'), locale='en_US', decimal_quantization=False)\n +    where <function format_decimal at 0x7fda99608700> = numbers.format_decimal\n +    and   Decimal('10000') = <class 'decimal.Decimal'>('10000')\n +      where <class 'decimal.Decimal'> = decimal.Decimal"}, "traceback": [{"path": "tests/test_numbers.py", "lineno": 449, "message": "AssertionError"}], "longrepr": "input_value = '10000', expected_value = '10,000'\n\n    @pytest.mark.parametrize('input_value, expected_value', [\n        ('10000', '10,000'),\n        ('1', '1'),\n        ('1.0', '1'),\n        ('1.1', '1.1'),\n        ('1.11', '1.11'),\n        ('1.110', '1.11'),\n        ('1.001', '1.001'),\n        ('1.00100', '1.001'),\n        ('01.00100', '1.001'),\n        ('101.00100', '101.001'),\n        ('00000', '0'),\n        ('0', '0'),\n        ('0.0', '0'),\n        ('0.1', '0.1'),\n        ('0.11', '0.11'),\n        ('0.110', '0.11'),\n        ('0.001', '0.001'),\n        ('0.00100', '0.001'),\n        ('00.00100', '0.001'),\n        ('000.00100', '0.001'),\n    ])\n    def test_format_decimal_precision(input_value, expected_value):\n        # Test precision conservation.\n>       assert numbers.format_decimal(\n            decimal.Decimal(input_value), locale='en_US', decimal_quantization=False) == expected_value\nE       AssertionError: assert None == '10,000'\nE        +  where None = <function format_decimal at 0x7fda99608700>(Decimal('10000'), locale='en_US', decimal_quantization=False)\nE        +    where <function format_decimal at 0x7fda99608700> = numbers.format_decimal\nE        +    and   Decimal('10000') = <class 'decimal.Decimal'>('10000')\nE        +      where <class 'decimal.Decimal'> = decimal.Decimal\n\ntests/test_numbers.py:449: AssertionError"}, "teardown": {"duration": 0.00020880899999964342, "outcome": "passed"}}, {"nodeid": "tests/test_numbers.py::test_format_decimal_precision[1-1]", "lineno": 424, "outcome": "failed", "keywords": ["test_format_decimal_precision[1-1]", "parametrize", "pytestmark", "1-1", "test_numbers.py", "tests", "testbed", ""], "setup": {"duration": 0.00023605100000034795, "outcome": "passed"}, "call": {"duration": 0.0003060429999997005, "outcome": "failed", "crash": {"path": "/testbed/tests/test_numbers.py", "lineno": 449, "message": "AssertionError: assert None == '1'\n +  where None = <function format_decimal at 0x7fda99608700>(Decimal('1'), locale='en_US', decimal_quantization=False)\n +    where <function format_decimal at 0x7fda99608700> = numbers.format_decimal\n +    and   Decimal('1') = <class 'decimal.Decimal'>('1')\n +      where <class 'decimal.Decimal'> = decimal.Decimal"}, "traceback": [{"path": "tests/test_numbers.py", "lineno": 449, "message": "AssertionError"}], "longrepr": "input_value = '1', expected_value = '1'\n\n    @pytest.mark.parametrize('input_value, expected_value', [\n        ('10000', '10,000'),\n        ('1', '1'),\n        ('1.0', '1'),\n        ('1.1', '1.1'),\n        ('1.11', '1.11'),\n        ('1.110', '1.11'),\n        ('1.001', '1.001'),\n        ('1.00100', '1.001'),\n        ('01.00100', '1.001'),\n        ('101.00100', '101.001'),\n        ('00000', '0'),\n        ('0', '0'),\n        ('0.0', '0'),\n        ('0.1', '0.1'),\n        ('0.11', '0.11'),\n        ('0.110', '0.11'),\n        ('0.001', '0.001'),\n        ('0.00100', '0.001'),\n        ('00.00100', '0.001'),\n        ('000.00100', '0.001'),\n    ])\n    def test_format_decimal_precision(input_value, expected_value):\n        # Test precision conservation.\n>       assert numbers.format_decimal(\n            decimal.Decimal(input_value), locale='en_US', decimal_quantization=False) == expected_value\nE       AssertionError: assert None == '1'\nE        +  where None = <function format_decimal at 0x7fda99608700>(Decimal('1'), locale='en_US', decimal_quantization=False)\nE        +    where <function format_decimal at 0x7fda99608700> = numbers.format_decimal\nE        +    and   Decimal('1') = <class 'decimal.Decimal'>('1')\nE        +      where <class 'decimal.Decimal'> = decimal.Decimal\n\ntests/test_numbers.py:449: AssertionError"}, "teardown": {"duration": 0.00020590600000014447, "outcome": "passed"}}, {"nodeid": "tests/test_numbers.py::test_format_decimal_precision[1.0-1]", "lineno": 424, "outcome": "failed", "keywords": ["test_format_decimal_precision[1.0-1]", "parametrize", "pytestmark", "1.0-1", "test_numbers.py", "tests", "testbed", ""], "setup": {"duration": 0.00023444399999972276, "outcome": "passed"}, "call": {"duration": 0.0003242219999997076, "outcome": "failed", "crash": {"path": "/testbed/tests/test_numbers.py", "lineno": 449, "message": "AssertionError: assert None == '1'\n +  where None = <function format_decimal at 0x7fda99608700>(Decimal('1.0'), locale='en_US', decimal_quantization=False)\n +    where <function format_decimal at 0x7fda99608700> = numbers.format_decimal\n +    and   Decimal('1.0') = <class 'decimal.Decimal'>('1.0')\n +      where <class 'decimal.Decimal'> = decimal.Decimal"}, "traceback": [{"path": "tests/test_numbers.py", "lineno": 449, "message": "AssertionError"}], "longrepr": "input_value = '1.0', expected_value = '1'\n\n    @pytest.mark.parametrize('input_value, expected_value', [\n        ('10000', '10,000'),\n        ('1', '1'),\n        ('1.0', '1'),\n        ('1.1', '1.1'),\n        ('1.11', '1.11'),\n        ('1.110', '1.11'),\n        ('1.001', '1.001'),\n        ('1.00100', '1.001'),\n        ('01.00100', '1.001'),\n        ('101.00100', '101.001'),\n        ('00000', '0'),\n        ('0', '0'),\n        ('0.0', '0'),\n        ('0.1', '0.1'),\n        ('0.11', '0.11'),\n        ('0.110', '0.11'),\n        ('0.001', '0.001'),\n        ('0.00100', '0.001'),\n        ('00.00100', '0.001'),\n        ('000.00100', '0.001'),\n    ])\n    def test_format_decimal_precision(input_value, expected_value):\n        # Test precision conservation.\n>       assert numbers.format_decimal(\n            decimal.Decimal(input_value), locale='en_US', decimal_quantization=False) == expected_value\nE       AssertionError: assert None == '1'\nE        +  where None = <function format_decimal at 0x7fda99608700>(Decimal('1.0'), locale='en_US', decimal_quantization=False)\nE        +    where <function format_decimal at 0x7fda99608700> = numbers.format_decimal\nE        +    and   Decimal('1.0') = <class 'decimal.Decimal'>('1.0')\nE        +      where <class 'decimal.Decimal'> = decimal.Decimal\n\ntests/test_numbers.py:449: AssertionError"}, "teardown": {"duration": 0.0002145640000001947, "outcome": "passed"}}, {"nodeid": "tests/test_numbers.py::test_format_decimal_precision[1.1-1.1]", "lineno": 424, "outcome": "failed", "keywords": ["test_format_decimal_precision[1.1-1.1]", "parametrize", "pytestmark", "1.1-1.1", "test_numbers.py", "tests", "testbed", ""], "setup": {"duration": 0.00024727199999974303, "outcome": "passed"}, "call": {"duration": 0.00030057899999968996, "outcome": "failed", "crash": {"path": "/testbed/tests/test_numbers.py", "lineno": 449, "message": "AssertionError: assert None == '1.1'\n +  where None = <function format_decimal at 0x7fda99608700>(Decimal('1.1'), locale='en_US', decimal_quantization=False)\n +    where <function format_decimal at 0x7fda99608700> = numbers.format_decimal\n +    and   Decimal('1.1') = <class 'decimal.Decimal'>('1.1')\n +      where <class 'decimal.Decimal'> = decimal.Decimal"}, "traceback": [{"path": "tests/test_numbers.py", "lineno": 449, "message": "AssertionError"}], "longrepr": "input_value = '1.1', expected_value = '1.1'\n\n    @pytest.mark.parametrize('input_value, expected_value', [\n        ('10000', '10,000'),\n        ('1', '1'),\n        ('1.0', '1'),\n        ('1.1', '1.1'),\n        ('1.11', '1.11'),\n        ('1.110', '1.11'),\n        ('1.001', '1.001'),\n        ('1.00100', '1.001'),\n        ('01.00100', '1.001'),\n        ('101.00100', '101.001'),\n        ('00000', '0'),\n        ('0', '0'),\n        ('0.0', '0'),\n        ('0.1', '0.1'),\n        ('0.11', '0.11'),\n        ('0.110', '0.11'),\n        ('0.001', '0.001'),\n        ('0.00100', '0.001'),\n        ('00.00100', '0.001'),\n        ('000.00100', '0.001'),\n    ])\n    def test_format_decimal_precision(input_value, expected_value):\n        # Test precision conservation.\n>       assert numbers.format_decimal(\n            decimal.Decimal(input_value), locale='en_US', decimal_quantization=False) == expected_value\nE       AssertionError: assert None == '1.1'\nE        +  where None = <function format_decimal at 0x7fda99608700>(Decimal('1.1'), locale='en_US', decimal_quantization=False)\nE        +    where <function format_decimal at 0x7fda99608700> = numbers.format_decimal\nE        +    and   Decimal('1.1') = <class 'decimal.Decimal'>('1.1')\nE        +      where <class 'decimal.Decimal'> = decimal.Decimal\n\ntests/test_numbers.py:449: AssertionError"}, "teardown": {"duration": 0.00020575099999975421, "outcome": "passed"}}, {"nodeid": "tests/test_numbers.py::test_format_decimal_precision[1.11-1.11]", "lineno": 424, "outcome": "failed", "keywords": ["test_format_decimal_precision[1.11-1.11]", "parametrize", "pytestmark", "1.11-1.11", "test_numbers.py", "tests", "testbed", ""], "setup": {"duration": 0.00026299700000009807, "outcome": "passed"}, "call": {"duration": 0.0003013000000002819, "outcome": "failed", "crash": {"path": "/testbed/tests/test_numbers.py", "lineno": 449, "message": "AssertionError: assert None == '1.11'\n +  where None = <function format_decimal at 0x7fda99608700>(Decimal('1.11'), locale='en_US', decimal_quantization=False)\n +    where <function format_decimal at 0x7fda99608700> = numbers.format_decimal\n +    and   Decimal('1.11') = <class 'decimal.Decimal'>('1.11')\n +      where <class 'decimal.Decimal'> = decimal.Decimal"}, "traceback": [{"path": "tests/test_numbers.py", "lineno": 449, "message": "AssertionError"}], "longrepr": "input_value = '1.11', expected_value = '1.11'\n\n    @pytest.mark.parametrize('input_value, expected_value', [\n        ('10000', '10,000'),\n        ('1', '1'),\n        ('1.0', '1'),\n        ('1.1', '1.1'),\n        ('1.11', '1.11'),\n        ('1.110', '1.11'),\n        ('1.001', '1.001'),\n        ('1.00100', '1.001'),\n        ('01.00100', '1.001'),\n        ('101.00100', '101.001'),\n        ('00000', '0'),\n        ('0', '0'),\n        ('0.0', '0'),\n        ('0.1', '0.1'),\n        ('0.11', '0.11'),\n        ('0.110', '0.11'),\n        ('0.001', '0.001'),\n        ('0.00100', '0.001'),\n        ('00.00100', '0.001'),\n        ('000.00100', '0.001'),\n    ])\n    def test_format_decimal_precision(input_value, expected_value):\n        # Test precision conservation.\n>       assert numbers.format_decimal(\n            decimal.Decimal(input_value), locale='en_US', decimal_quantization=False) == expected_value\nE       AssertionError: assert None == '1.11'\nE        +  where None = <function format_decimal at 0x7fda99608700>(Decimal('1.11'), locale='en_US', decimal_quantization=False)\nE        +    where <function format_decimal at 0x7fda99608700> = numbers.format_decimal\nE        +    and   Decimal('1.11') = <class 'decimal.Decimal'>('1.11')\nE        +      where <class 'decimal.Decimal'> = decimal.Decimal\n\ntests/test_numbers.py:449: AssertionError"}, "teardown": {"duration": 0.00020558500000023017, "outcome": "passed"}}, {"nodeid": "tests/test_numbers.py::test_format_decimal_precision[1.110-1.11]", "lineno": 424, "outcome": "failed", "keywords": ["test_format_decimal_precision[1.110-1.11]", "parametrize", "pytestmark", "1.110-1.11", "test_numbers.py", "tests", "testbed", ""], "setup": {"duration": 0.00024419100000017124, "outcome": "passed"}, "call": {"duration": 0.00029158200000001244, "outcome": "failed", "crash": {"path": "/testbed/tests/test_numbers.py", "lineno": 449, "message": "AssertionError: assert None == '1.11'\n +  where None = <function format_decimal at 0x7fda99608700>(Decimal('1.110'), locale='en_US', decimal_quantization=False)\n +    where <function format_decimal at 0x7fda99608700> = numbers.format_decimal\n +    and   Decimal('1.110') = <class 'decimal.Decimal'>('1.110')\n +      where <class 'decimal.Decimal'> = decimal.Decimal"}, "traceback": [{"path": "tests/test_numbers.py", "lineno": 449, "message": "AssertionError"}], "longrepr": "input_value = '1.110', expected_value = '1.11'\n\n    @pytest.mark.parametrize('input_value, expected_value', [\n        ('10000', '10,000'),\n        ('1', '1'),\n        ('1.0', '1'),\n        ('1.1', '1.1'),\n        ('1.11', '1.11'),\n        ('1.110', '1.11'),\n        ('1.001', '1.001'),\n        ('1.00100', '1.001'),\n        ('01.00100', '1.001'),\n        ('101.00100', '101.001'),\n        ('00000', '0'),\n        ('0', '0'),\n        ('0.0', '0'),\n        ('0.1', '0.1'),\n        ('0.11', '0.11'),\n        ('0.110', '0.11'),\n        ('0.001', '0.001'),\n        ('0.00100', '0.001'),\n        ('00.00100', '0.001'),\n        ('000.00100', '0.001'),\n    ])\n    def test_format_decimal_precision(input_value, expected_value):\n        # Test precision conservation.\n>       assert numbers.format_decimal(\n            decimal.Decimal(input_value), locale='en_US', decimal_quantization=False) == expected_value\nE       AssertionError: assert None == '1.11'\nE        +  where None = <function format_decimal at 0x7fda99608700>(Decimal('1.110'), locale='en_US', decimal_quantization=False)\nE        +    where <function format_decimal at 0x7fda99608700> = numbers.format_decimal\nE        +    and   Decimal('1.110') = <class 'decimal.Decimal'>('1.110')\nE        +      where <class 'decimal.Decimal'> = decimal.Decimal\n\ntests/test_numbers.py:449: AssertionError"}, "teardown": {"duration": 0.00022749800000010367, "outcome": "passed"}}, {"nodeid": "tests/test_numbers.py::test_format_decimal_precision[1.001-1.001]", "lineno": 424, "outcome": "failed", "keywords": ["test_format_decimal_precision[1.001-1.001]", "parametrize", "pytestmark", "1.001-1.001", "test_numbers.py", "tests", "testbed", ""], "setup": {"duration": 0.0002387299999999648, "outcome": "passed"}, "call": {"duration": 0.00029813000000000756, "outcome": "failed", "crash": {"path": "/testbed/tests/test_numbers.py", "lineno": 449, "message": "AssertionError: assert None == '1.001'\n +  where None = <function format_decimal at 0x7fda99608700>(Decimal('1.001'), locale='en_US', decimal_quantization=False)\n +    where <function format_decimal at 0x7fda99608700> = numbers.format_decimal\n +    and   Decimal('1.001') = <class 'decimal.Decimal'>('1.001')\n +      where <class 'decimal.Decimal'> = decimal.Decimal"}, "traceback": [{"path": "tests/test_numbers.py", "lineno": 449, "message": "AssertionError"}], "longrepr": "input_value = '1.001', expected_value = '1.001'\n\n    @pytest.mark.parametrize('input_value, expected_value', [\n        ('10000', '10,000'),\n        ('1', '1'),\n        ('1.0', '1'),\n        ('1.1', '1.1'),\n        ('1.11', '1.11'),\n        ('1.110', '1.11'),\n        ('1.001', '1.001'),\n        ('1.00100', '1.001'),\n        ('01.00100', '1.001'),\n        ('101.00100', '101.001'),\n        ('00000', '0'),\n        ('0', '0'),\n        ('0.0', '0'),\n        ('0.1', '0.1'),\n        ('0.11', '0.11'),\n        ('0.110', '0.11'),\n        ('0.001', '0.001'),\n        ('0.00100', '0.001'),\n        ('00.00100', '0.001'),\n        ('000.00100', '0.001'),\n    ])\n    def test_format_decimal_precision(input_value, expected_value):\n        # Test precision conservation.\n>       assert numbers.format_decimal(\n            decimal.Decimal(input_value), locale='en_US', decimal_quantization=False) == expected_value\nE       AssertionError: assert None == '1.001'\nE        +  where None = <function format_decimal at 0x7fda99608700>(Decimal('1.001'), locale='en_US', decimal_quantization=False)\nE        +    where <function format_decimal at 0x7fda99608700> = numbers.format_decimal\nE        +    and   Decimal('1.001') = <class 'decimal.Decimal'>('1.001')\nE        +      where <class 'decimal.Decimal'> = decimal.Decimal\n\ntests/test_numbers.py:449: AssertionError"}, "teardown": {"duration": 0.0002052930000000508, "outcome": "passed"}}, {"nodeid": "tests/test_numbers.py::test_format_decimal_precision[1.00100-1.001]", "lineno": 424, "outcome": "failed", "keywords": ["test_format_decimal_precision[1.00100-1.001]", "parametrize", "pytestmark", "1.00100-1.001", "test_numbers.py", "tests", "testbed", ""], "setup": {"duration": 0.00026468099999998884, "outcome": "passed"}, "call": {"duration": 0.0002942799999998691, "outcome": "failed", "crash": {"path": "/testbed/tests/test_numbers.py", "lineno": 449, "message": "AssertionError: assert None == '1.001'\n +  where None = <function format_decimal at 0x7fda99608700>(Decimal('1.00100'), locale='en_US', decimal_quantization=False)\n +    where <function format_decimal at 0x7fda99608700> = numbers.format_decimal\n +    and   Decimal('1.00100') = <class 'decimal.Decimal'>('1.00100')\n +      where <class 'decimal.Decimal'> = decimal.Decimal"}, "traceback": [{"path": "tests/test_numbers.py", "lineno": 449, "message": "AssertionError"}], "longrepr": "input_value = '1.00100', expected_value = '1.001'\n\n    @pytest.mark.parametrize('input_value, expected_value', [\n        ('10000', '10,000'),\n        ('1', '1'),\n        ('1.0', '1'),\n        ('1.1', '1.1'),\n        ('1.11', '1.11'),\n        ('1.110', '1.11'),\n        ('1.001', '1.001'),\n        ('1.00100', '1.001'),\n        ('01.00100', '1.001'),\n        ('101.00100', '101.001'),\n        ('00000', '0'),\n        ('0', '0'),\n        ('0.0', '0'),\n        ('0.1', '0.1'),\n        ('0.11', '0.11'),\n        ('0.110', '0.11'),\n        ('0.001', '0.001'),\n        ('0.00100', '0.001'),\n        ('00.00100', '0.001'),\n        ('000.00100', '0.001'),\n    ])\n    def test_format_decimal_precision(input_value, expected_value):\n        # Test precision conservation.\n>       assert numbers.format_decimal(\n            decimal.Decimal(input_value), locale='en_US', decimal_quantization=False) == expected_value\nE       AssertionError: assert None == '1.001'\nE        +  where None = <function format_decimal at 0x7fda99608700>(Decimal('1.00100'), locale='en_US', decimal_quantization=False)\nE        +    where <function format_decimal at 0x7fda99608700> = numbers.format_decimal\nE        +    and   Decimal('1.00100') = <class 'decimal.Decimal'>('1.00100')\nE        +      where <class 'decimal.Decimal'> = decimal.Decimal\n\ntests/test_numbers.py:449: AssertionError"}, "teardown": {"duration": 0.00020702399999983356, "outcome": "passed"}}, {"nodeid": "tests/test_numbers.py::test_format_decimal_precision[01.00100-1.001]", "lineno": 424, "outcome": "failed", "keywords": ["test_format_decimal_precision[01.00100-1.001]", "parametrize", "pytestmark", "01.00100-1.001", "test_numbers.py", "tests", "testbed", ""], "setup": {"duration": 0.00024518699999998006, "outcome": "passed"}, "call": {"duration": 0.0002961139999997364, "outcome": "failed", "crash": {"path": "/testbed/tests/test_numbers.py", "lineno": 449, "message": "AssertionError: assert None == '1.001'\n +  where None = <function format_decimal at 0x7fda99608700>(Decimal('1.00100'), locale='en_US', decimal_quantization=False)\n +    where <function format_decimal at 0x7fda99608700> = numbers.format_decimal\n +    and   Decimal('1.00100') = <class 'decimal.Decimal'>('01.00100')\n +      where <class 'decimal.Decimal'> = decimal.Decimal"}, "traceback": [{"path": "tests/test_numbers.py", "lineno": 449, "message": "AssertionError"}], "longrepr": "input_value = '01.00100', expected_value = '1.001'\n\n    @pytest.mark.parametrize('input_value, expected_value', [\n        ('10000', '10,000'),\n        ('1', '1'),\n        ('1.0', '1'),\n        ('1.1', '1.1'),\n        ('1.11', '1.11'),\n        ('1.110', '1.11'),\n        ('1.001', '1.001'),\n        ('1.00100', '1.001'),\n        ('01.00100', '1.001'),\n        ('101.00100', '101.001'),\n        ('00000', '0'),\n        ('0', '0'),\n        ('0.0', '0'),\n        ('0.1', '0.1'),\n        ('0.11', '0.11'),\n        ('0.110', '0.11'),\n        ('0.001', '0.001'),\n        ('0.00100', '0.001'),\n        ('00.00100', '0.001'),\n        ('000.00100', '0.001'),\n    ])\n    def test_format_decimal_precision(input_value, expected_value):\n        # Test precision conservation.\n>       assert numbers.format_decimal(\n            decimal.Decimal(input_value), locale='en_US', decimal_quantization=False) == expected_value\nE       AssertionError: assert None == '1.001'\nE        +  where None = <function format_decimal at 0x7fda99608700>(Decimal('1.00100'), locale='en_US', decimal_quantization=False)\nE        +    where <function format_decimal at 0x7fda99608700> = numbers.format_decimal\nE        +    and   Decimal('1.00100') = <class 'decimal.Decimal'>('01.00100')\nE        +      where <class 'decimal.Decimal'> = decimal.Decimal\n\ntests/test_numbers.py:449: AssertionError"}, "teardown": {"duration": 0.00020402399999985832, "outcome": "passed"}}, {"nodeid": "tests/test_numbers.py::test_format_decimal_precision[101.00100-101.001]", "lineno": 424, "outcome": "failed", "keywords": ["test_format_decimal_precision[101.00100-101.001]", "parametrize", "pytestmark", "101.00100-101.001", "test_numbers.py", "tests", "testbed", ""], "setup": {"duration": 0.00024319100000003147, "outcome": "passed"}, "call": {"duration": 0.00029519200000027723, "outcome": "failed", "crash": {"path": "/testbed/tests/test_numbers.py", "lineno": 449, "message": "AssertionError: assert None == '101.001'\n +  where None = <function format_decimal at 0x7fda99608700>(Decimal('101.00100'), locale='en_US', decimal_quantization=False)\n +    where <function format_decimal at 0x7fda99608700> = numbers.format_decimal\n +    and   Decimal('101.00100') = <class 'decimal.Decimal'>('101.00100')\n +      where <class 'decimal.Decimal'> = decimal.Decimal"}, "traceback": [{"path": "tests/test_numbers.py", "lineno": 449, "message": "AssertionError"}], "longrepr": "input_value = '101.00100', expected_value = '101.001'\n\n    @pytest.mark.parametrize('input_value, expected_value', [\n        ('10000', '10,000'),\n        ('1', '1'),\n        ('1.0', '1'),\n        ('1.1', '1.1'),\n        ('1.11', '1.11'),\n        ('1.110', '1.11'),\n        ('1.001', '1.001'),\n        ('1.00100', '1.001'),\n        ('01.00100', '1.001'),\n        ('101.00100', '101.001'),\n        ('00000', '0'),\n        ('0', '0'),\n        ('0.0', '0'),\n        ('0.1', '0.1'),\n        ('0.11', '0.11'),\n        ('0.110', '0.11'),\n        ('0.001', '0.001'),\n        ('0.00100', '0.001'),\n        ('00.00100', '0.001'),\n        ('000.00100', '0.001'),\n    ])\n    def test_format_decimal_precision(input_value, expected_value):\n        # Test precision conservation.\n>       assert numbers.format_decimal(\n            decimal.Decimal(input_value), locale='en_US', decimal_quantization=False) == expected_value\nE       AssertionError: assert None == '101.001'\nE        +  where None = <function format_decimal at 0x7fda99608700>(Decimal('101.00100'), locale='en_US', decimal_quantization=False)\nE        +    where <function format_decimal at 0x7fda99608700> = numbers.format_decimal\nE        +    and   Decimal('101.00100') = <class 'decimal.Decimal'>('101.00100')\nE        +      where <class 'decimal.Decimal'> = decimal.Decimal\n\ntests/test_numbers.py:449: AssertionError"}, "teardown": {"duration": 0.00020357199999976316, "outcome": "passed"}}, {"nodeid": "tests/test_numbers.py::test_format_decimal_precision[00000-0]", "lineno": 424, "outcome": "failed", "keywords": ["test_format_decimal_precision[00000-0]", "parametrize", "pytestmark", "00000-0", "test_numbers.py", "tests", "testbed", ""], "setup": {"duration": 0.00023170999999999609, "outcome": "passed"}, "call": {"duration": 0.0003173520000001595, "outcome": "failed", "crash": {"path": "/testbed/tests/test_numbers.py", "lineno": 449, "message": "AssertionError: assert None == '0'\n +  where None = <function format_decimal at 0x7fda99608700>(Decimal('0'), locale='en_US', decimal_quantization=False)\n +    where <function format_decimal at 0x7fda99608700> = numbers.format_decimal\n +    and   Decimal('0') = <class 'decimal.Decimal'>('00000')\n +      where <class 'decimal.Decimal'> = decimal.Decimal"}, "traceback": [{"path": "tests/test_numbers.py", "lineno": 449, "message": "AssertionError"}], "longrepr": "input_value = '00000', expected_value = '0'\n\n    @pytest.mark.parametrize('input_value, expected_value', [\n        ('10000', '10,000'),\n        ('1', '1'),\n        ('1.0', '1'),\n        ('1.1', '1.1'),\n        ('1.11', '1.11'),\n        ('1.110', '1.11'),\n        ('1.001', '1.001'),\n        ('1.00100', '1.001'),\n        ('01.00100', '1.001'),\n        ('101.00100', '101.001'),\n        ('00000', '0'),\n        ('0', '0'),\n        ('0.0', '0'),\n        ('0.1', '0.1'),\n        ('0.11', '0.11'),\n        ('0.110', '0.11'),\n        ('0.001', '0.001'),\n        ('0.00100', '0.001'),\n        ('00.00100', '0.001'),\n        ('000.00100', '0.001'),\n    ])\n    def test_format_decimal_precision(input_value, expected_value):\n        # Test precision conservation.\n>       assert numbers.format_decimal(\n            decimal.Decimal(input_value), locale='en_US', decimal_quantization=False) == expected_value\nE       AssertionError: assert None == '0'\nE        +  where None = <function format_decimal at 0x7fda99608700>(Decimal('0'), locale='en_US', decimal_quantization=False)\nE        +    where <function format_decimal at 0x7fda99608700> = numbers.format_decimal\nE        +    and   Decimal('0') = <class 'decimal.Decimal'>('00000')\nE        +      where <class 'decimal.Decimal'> = decimal.Decimal\n\ntests/test_numbers.py:449: AssertionError"}, "teardown": {"duration": 0.00022533899999999107, "outcome": "passed"}}, {"nodeid": "tests/test_numbers.py::test_format_decimal_precision[0-0]", "lineno": 424, "outcome": "failed", "keywords": ["test_format_decimal_precision[0-0]", "parametrize", "pytestmark", "0-0", "test_numbers.py", "tests", "testbed", ""], "setup": {"duration": 0.0002332059999998748, "outcome": "passed"}, "call": {"duration": 0.0003005350000000462, "outcome": "failed", "crash": {"path": "/testbed/tests/test_numbers.py", "lineno": 449, "message": "AssertionError: assert None == '0'\n +  where None = <function format_decimal at 0x7fda99608700>(Decimal('0'), locale='en_US', decimal_quantization=False)\n +    where <function format_decimal at 0x7fda99608700> = numbers.format_decimal\n +    and   Decimal('0') = <class 'decimal.Decimal'>('0')\n +      where <class 'decimal.Decimal'> = decimal.Decimal"}, "traceback": [{"path": "tests/test_numbers.py", "lineno": 449, "message": "AssertionError"}], "longrepr": "input_value = '0', expected_value = '0'\n\n    @pytest.mark.parametrize('input_value, expected_value', [\n        ('10000', '10,000'),\n        ('1', '1'),\n        ('1.0', '1'),\n        ('1.1', '1.1'),\n        ('1.11', '1.11'),\n        ('1.110', '1.11'),\n        ('1.001', '1.001'),\n        ('1.00100', '1.001'),\n        ('01.00100', '1.001'),\n        ('101.00100', '101.001'),\n        ('00000', '0'),\n        ('0', '0'),\n        ('0.0', '0'),\n        ('0.1', '0.1'),\n        ('0.11', '0.11'),\n        ('0.110', '0.11'),\n        ('0.001', '0.001'),\n        ('0.00100', '0.001'),\n        ('00.00100', '0.001'),\n        ('000.00100', '0.001'),\n    ])\n    def test_format_decimal_precision(input_value, expected_value):\n        # Test precision conservation.\n>       assert numbers.format_decimal(\n            decimal.Decimal(input_value), locale='en_US', decimal_quantization=False) == expected_value\nE       AssertionError: assert None == '0'\nE        +  where None = <function format_decimal at 0x7fda99608700>(Decimal('0'), locale='en_US', decimal_quantization=False)\nE        +    where <function format_decimal at 0x7fda99608700> = numbers.format_decimal\nE        +    and   Decimal('0') = <class 'decimal.Decimal'>('0')\nE        +      where <class 'decimal.Decimal'> = decimal.Decimal\n\ntests/test_numbers.py:449: AssertionError"}, "teardown": {"duration": 0.0002567749999999869, "outcome": "passed"}}, {"nodeid": "tests/test_numbers.py::test_format_decimal_precision[0.0-0]", "lineno": 424, "outcome": "failed", "keywords": ["test_format_decimal_precision[0.0-0]", "parametrize", "pytestmark", "0.0-0", "test_numbers.py", "tests", "testbed", ""], "setup": {"duration": 0.0002624980000001109, "outcome": "passed"}, "call": {"duration": 0.0003241469999997193, "outcome": "failed", "crash": {"path": "/testbed/tests/test_numbers.py", "lineno": 449, "message": "AssertionError: assert None == '0'\n +  where None = <function format_decimal at 0x7fda99608700>(Decimal('0.0'), locale='en_US', decimal_quantization=False)\n +    where <function format_decimal at 0x7fda99608700> = numbers.format_decimal\n +    and   Decimal('0.0') = <class 'decimal.Decimal'>('0.0')\n +      where <class 'decimal.Decimal'> = decimal.Decimal"}, "traceback": [{"path": "tests/test_numbers.py", "lineno": 449, "message": "AssertionError"}], "longrepr": "input_value = '0.0', expected_value = '0'\n\n    @pytest.mark.parametrize('input_value, expected_value', [\n        ('10000', '10,000'),\n        ('1', '1'),\n        ('1.0', '1'),\n        ('1.1', '1.1'),\n        ('1.11', '1.11'),\n        ('1.110', '1.11'),\n        ('1.001', '1.001'),\n        ('1.00100', '1.001'),\n        ('01.00100', '1.001'),\n        ('101.00100', '101.001'),\n        ('00000', '0'),\n        ('0', '0'),\n        ('0.0', '0'),\n        ('0.1', '0.1'),\n        ('0.11', '0.11'),\n        ('0.110', '0.11'),\n        ('0.001', '0.001'),\n        ('0.00100', '0.001'),\n        ('00.00100', '0.001'),\n        ('000.00100', '0.001'),\n    ])\n    def test_format_decimal_precision(input_value, expected_value):\n        # Test precision conservation.\n>       assert numbers.format_decimal(\n            decimal.Decimal(input_value), locale='en_US', decimal_quantization=False) == expected_value\nE       AssertionError: assert None == '0'\nE        +  where None = <function format_decimal at 0x7fda99608700>(Decimal('0.0'), locale='en_US', decimal_quantization=False)\nE        +    where <function format_decimal at 0x7fda99608700> = numbers.format_decimal\nE        +    and   Decimal('0.0') = <class 'decimal.Decimal'>('0.0')\nE        +      where <class 'decimal.Decimal'> = decimal.Decimal\n\ntests/test_numbers.py:449: AssertionError"}, "teardown": {"duration": 0.000321530999999986, "outcome": "passed"}}, {"nodeid": "tests/test_numbers.py::test_format_decimal_precision[0.1-0.1]", "lineno": 424, "outcome": "failed", "keywords": ["test_format_decimal_precision[0.1-0.1]", "parametrize", "pytestmark", "0.1-0.1", "test_numbers.py", "tests", "testbed", ""], "setup": {"duration": 0.0002707669999999496, "outcome": "passed"}, "call": {"duration": 0.00036532500000019397, "outcome": "failed", "crash": {"path": "/testbed/tests/test_numbers.py", "lineno": 449, "message": "AssertionError: assert None == '0.1'\n +  where None = <function format_decimal at 0x7fda99608700>(Decimal('0.1'), locale='en_US', decimal_quantization=False)\n +    where <function format_decimal at 0x7fda99608700> = numbers.format_decimal\n +    and   Decimal('0.1') = <class 'decimal.Decimal'>('0.1')\n +      where <class 'decimal.Decimal'> = decimal.Decimal"}, "traceback": [{"path": "tests/test_numbers.py", "lineno": 449, "message": "AssertionError"}], "longrepr": "input_value = '0.1', expected_value = '0.1'\n\n    @pytest.mark.parametrize('input_value, expected_value', [\n        ('10000', '10,000'),\n        ('1', '1'),\n        ('1.0', '1'),\n        ('1.1', '1.1'),\n        ('1.11', '1.11'),\n        ('1.110', '1.11'),\n        ('1.001', '1.001'),\n        ('1.00100', '1.001'),\n        ('01.00100', '1.001'),\n        ('101.00100', '101.001'),\n        ('00000', '0'),\n        ('0', '0'),\n        ('0.0', '0'),\n        ('0.1', '0.1'),\n        ('0.11', '0.11'),\n        ('0.110', '0.11'),\n        ('0.001', '0.001'),\n        ('0.00100', '0.001'),\n        ('00.00100', '0.001'),\n        ('000.00100', '0.001'),\n    ])\n    def test_format_decimal_precision(input_value, expected_value):\n        # Test precision conservation.\n>       assert numbers.format_decimal(\n            decimal.Decimal(input_value), locale='en_US', decimal_quantization=False) == expected_value\nE       AssertionError: assert None == '0.1'\nE        +  where None = <function format_decimal at 0x7fda99608700>(Decimal('0.1'), locale='en_US', decimal_quantization=False)\nE        +    where <function format_decimal at 0x7fda99608700> = numbers.format_decimal\nE        +    and   Decimal('0.1') = <class 'decimal.Decimal'>('0.1')\nE        +      where <class 'decimal.Decimal'> = decimal.Decimal\n\ntests/test_numbers.py:449: AssertionError"}, "teardown": {"duration": 0.0003042609999996948, "outcome": "passed"}}, {"nodeid": "tests/test_numbers.py::test_format_decimal_precision[0.11-0.11]", "lineno": 424, "outcome": "failed", "keywords": ["test_format_decimal_precision[0.11-0.11]", "parametrize", "pytestmark", "0.11-0.11", "test_numbers.py", "tests", "testbed", ""], "setup": {"duration": 0.0002621429999996039, "outcome": "passed"}, "call": {"duration": 0.00033682400000012436, "outcome": "failed", "crash": {"path": "/testbed/tests/test_numbers.py", "lineno": 449, "message": "AssertionError: assert None == '0.11'\n +  where None = <function format_decimal at 0x7fda99608700>(Decimal('0.11'), locale='en_US', decimal_quantization=False)\n +    where <function format_decimal at 0x7fda99608700> = numbers.format_decimal\n +    and   Decimal('0.11') = <class 'decimal.Decimal'>('0.11')\n +      where <class 'decimal.Decimal'> = decimal.Decimal"}, "traceback": [{"path": "tests/test_numbers.py", "lineno": 449, "message": "AssertionError"}], "longrepr": "input_value = '0.11', expected_value = '0.11'\n\n    @pytest.mark.parametrize('input_value, expected_value', [\n        ('10000', '10,000'),\n        ('1', '1'),\n        ('1.0', '1'),\n        ('1.1', '1.1'),\n        ('1.11', '1.11'),\n        ('1.110', '1.11'),\n        ('1.001', '1.001'),\n        ('1.00100', '1.001'),\n        ('01.00100', '1.001'),\n        ('101.00100', '101.001'),\n        ('00000', '0'),\n        ('0', '0'),\n        ('0.0', '0'),\n        ('0.1', '0.1'),\n        ('0.11', '0.11'),\n        ('0.110', '0.11'),\n        ('0.001', '0.001'),\n        ('0.00100', '0.001'),\n        ('00.00100', '0.001'),\n        ('000.00100', '0.001'),\n    ])\n    def test_format_decimal_precision(input_value, expected_value):\n        # Test precision conservation.\n>       assert numbers.format_decimal(\n            decimal.Decimal(input_value), locale='en_US', decimal_quantization=False) == expected_value\nE       AssertionError: assert None == '0.11'\nE        +  where None = <function format_decimal at 0x7fda99608700>(Decimal('0.11'), locale='en_US', decimal_quantization=False)\nE        +    where <function format_decimal at 0x7fda99608700> = numbers.format_decimal\nE        +    and   Decimal('0.11') = <class 'decimal.Decimal'>('0.11')\nE        +      where <class 'decimal.Decimal'> = decimal.Decimal\n\ntests/test_numbers.py:449: AssertionError"}, "teardown": {"duration": 0.00025709300000009705, "outcome": "passed"}}, {"nodeid": "tests/test_numbers.py::test_format_decimal_precision[0.110-0.11]", "lineno": 424, "outcome": "failed", "keywords": ["test_format_decimal_precision[0.110-0.11]", "parametrize", "pytestmark", "0.110-0.11", "test_numbers.py", "tests", "testbed", ""], "setup": {"duration": 0.0002635310000003166, "outcome": "passed"}, "call": {"duration": 0.0003525020000001433, "outcome": "failed", "crash": {"path": "/testbed/tests/test_numbers.py", "lineno": 449, "message": "AssertionError: assert None == '0.11'\n +  where None = <function format_decimal at 0x7fda99608700>(Decimal('0.110'), locale='en_US', decimal_quantization=False)\n +    where <function format_decimal at 0x7fda99608700> = numbers.format_decimal\n +    and   Decimal('0.110') = <class 'decimal.Decimal'>('0.110')\n +      where <class 'decimal.Decimal'> = decimal.Decimal"}, "traceback": [{"path": "tests/test_numbers.py", "lineno": 449, "message": "AssertionError"}], "longrepr": "input_value = '0.110', expected_value = '0.11'\n\n    @pytest.mark.parametrize('input_value, expected_value', [\n        ('10000', '10,000'),\n        ('1', '1'),\n        ('1.0', '1'),\n        ('1.1', '1.1'),\n        ('1.11', '1.11'),\n        ('1.110', '1.11'),\n        ('1.001', '1.001'),\n        ('1.00100', '1.001'),\n        ('01.00100', '1.001'),\n        ('101.00100', '101.001'),\n        ('00000', '0'),\n        ('0', '0'),\n        ('0.0', '0'),\n        ('0.1', '0.1'),\n        ('0.11', '0.11'),\n        ('0.110', '0.11'),\n        ('0.001', '0.001'),\n        ('0.00100', '0.001'),\n        ('00.00100', '0.001'),\n        ('000.00100', '0.001'),\n    ])\n    def test_format_decimal_precision(input_value, expected_value):\n        # Test precision conservation.\n>       assert numbers.format_decimal(\n            decimal.Decimal(input_value), locale='en_US', decimal_quantization=False) == expected_value\nE       AssertionError: assert None == '0.11'\nE        +  where None = <function format_decimal at 0x7fda99608700>(Decimal('0.110'), locale='en_US', decimal_quantization=False)\nE        +    where <function format_decimal at 0x7fda99608700> = numbers.format_decimal\nE        +    and   Decimal('0.110') = <class 'decimal.Decimal'>('0.110')\nE        +      where <class 'decimal.Decimal'> = decimal.Decimal\n\ntests/test_numbers.py:449: AssertionError"}, "teardown": {"duration": 0.00023757499999987886, "outcome": "passed"}}, {"nodeid": "tests/test_numbers.py::test_format_decimal_precision[0.001-0.001]", "lineno": 424, "outcome": "failed", "keywords": ["test_format_decimal_precision[0.001-0.001]", "parametrize", "pytestmark", "0.001-0.001", "test_numbers.py", "tests", "testbed", ""], "setup": {"duration": 0.000259387999999916, "outcome": "passed"}, "call": {"duration": 0.0003259010000000728, "outcome": "failed", "crash": {"path": "/testbed/tests/test_numbers.py", "lineno": 449, "message": "AssertionError: assert None == '0.001'\n +  where None = <function format_decimal at 0x7fda99608700>(Decimal('0.001'), locale='en_US', decimal_quantization=False)\n +    where <function format_decimal at 0x7fda99608700> = numbers.format_decimal\n +    and   Decimal('0.001') = <class 'decimal.Decimal'>('0.001')\n +      where <class 'decimal.Decimal'> = decimal.Decimal"}, "traceback": [{"path": "tests/test_numbers.py", "lineno": 449, "message": "AssertionError"}], "longrepr": "input_value = '0.001', expected_value = '0.001'\n\n    @pytest.mark.parametrize('input_value, expected_value', [\n        ('10000', '10,000'),\n        ('1', '1'),\n        ('1.0', '1'),\n        ('1.1', '1.1'),\n        ('1.11', '1.11'),\n        ('1.110', '1.11'),\n        ('1.001', '1.001'),\n        ('1.00100', '1.001'),\n        ('01.00100', '1.001'),\n        ('101.00100', '101.001'),\n        ('00000', '0'),\n        ('0', '0'),\n        ('0.0', '0'),\n        ('0.1', '0.1'),\n        ('0.11', '0.11'),\n        ('0.110', '0.11'),\n        ('0.001', '0.001'),\n        ('0.00100', '0.001'),\n        ('00.00100', '0.001'),\n        ('000.00100', '0.001'),\n    ])\n    def test_format_decimal_precision(input_value, expected_value):\n        # Test precision conservation.\n>       assert numbers.format_decimal(\n            decimal.Decimal(input_value), locale='en_US', decimal_quantization=False) == expected_value\nE       AssertionError: assert None == '0.001'\nE        +  where None = <function format_decimal at 0x7fda99608700>(Decimal('0.001'), locale='en_US', decimal_quantization=False)\nE        +    where <function format_decimal at 0x7fda99608700> = numbers.format_decimal\nE        +    and   Decimal('0.001') = <class 'decimal.Decimal'>('0.001')\nE        +      where <class 'decimal.Decimal'> = decimal.Decimal\n\ntests/test_numbers.py:449: AssertionError"}, "teardown": {"duration": 0.0002693229999999325, "outcome": "passed"}}, {"nodeid": "tests/test_numbers.py::test_format_decimal_precision[0.00100-0.001]", "lineno": 424, "outcome": "failed", "keywords": ["test_format_decimal_precision[0.00100-0.001]", "parametrize", "pytestmark", "0.00100-0.001", "test_numbers.py", "tests", "testbed", ""], "setup": {"duration": 0.0002597369999999266, "outcome": "passed"}, "call": {"duration": 0.0003397999999998902, "outcome": "failed", "crash": {"path": "/testbed/tests/test_numbers.py", "lineno": 449, "message": "AssertionError: assert None == '0.001'\n +  where None = <function format_decimal at 0x7fda99608700>(Decimal('0.00100'), locale='en_US', decimal_quantization=False)\n +    where <function format_decimal at 0x7fda99608700> = numbers.format_decimal\n +    and   Decimal('0.00100') = <class 'decimal.Decimal'>('0.00100')\n +      where <class 'decimal.Decimal'> = decimal.Decimal"}, "traceback": [{"path": "tests/test_numbers.py", "lineno": 449, "message": "AssertionError"}], "longrepr": "input_value = '0.00100', expected_value = '0.001'\n\n    @pytest.mark.parametrize('input_value, expected_value', [\n        ('10000', '10,000'),\n        ('1', '1'),\n        ('1.0', '1'),\n        ('1.1', '1.1'),\n        ('1.11', '1.11'),\n        ('1.110', '1.11'),\n        ('1.001', '1.001'),\n        ('1.00100', '1.001'),\n        ('01.00100', '1.001'),\n        ('101.00100', '101.001'),\n        ('00000', '0'),\n        ('0', '0'),\n        ('0.0', '0'),\n        ('0.1', '0.1'),\n        ('0.11', '0.11'),\n        ('0.110', '0.11'),\n        ('0.001', '0.001'),\n        ('0.00100', '0.001'),\n        ('00.00100', '0.001'),\n        ('000.00100', '0.001'),\n    ])\n    def test_format_decimal_precision(input_value, expected_value):\n        # Test precision conservation.\n>       assert numbers.format_decimal(\n            decimal.Decimal(input_value), locale='en_US', decimal_quantization=False) == expected_value\nE       AssertionError: assert None == '0.001'\nE        +  where None = <function format_decimal at 0x7fda99608700>(Decimal('0.00100'), locale='en_US', decimal_quantization=False)\nE        +    where <function format_decimal at 0x7fda99608700> = numbers.format_decimal\nE        +    and   Decimal('0.00100') = <class 'decimal.Decimal'>('0.00100')\nE        +      where <class 'decimal.Decimal'> = decimal.Decimal\n\ntests/test_numbers.py:449: AssertionError"}, "teardown": {"duration": 0.00026535400000016196, "outcome": "passed"}}, {"nodeid": "tests/test_numbers.py::test_format_decimal_precision[00.00100-0.001]", "lineno": 424, "outcome": "failed", "keywords": ["test_format_decimal_precision[00.00100-0.001]", "parametrize", "pytestmark", "00.00100-0.001", "test_numbers.py", "tests", "testbed", ""], "setup": {"duration": 0.00028343000000008445, "outcome": "passed"}, "call": {"duration": 0.0003484650000000755, "outcome": "failed", "crash": {"path": "/testbed/tests/test_numbers.py", "lineno": 449, "message": "AssertionError: assert None == '0.001'\n +  where None = <function format_decimal at 0x7fda99608700>(Decimal('0.00100'), locale='en_US', decimal_quantization=False)\n +    where <function format_decimal at 0x7fda99608700> = numbers.format_decimal\n +    and   Decimal('0.00100') = <class 'decimal.Decimal'>('00.00100')\n +      where <class 'decimal.Decimal'> = decimal.Decimal"}, "traceback": [{"path": "tests/test_numbers.py", "lineno": 449, "message": "AssertionError"}], "longrepr": "input_value = '00.00100', expected_value = '0.001'\n\n    @pytest.mark.parametrize('input_value, expected_value', [\n        ('10000', '10,000'),\n        ('1', '1'),\n        ('1.0', '1'),\n        ('1.1', '1.1'),\n        ('1.11', '1.11'),\n        ('1.110', '1.11'),\n        ('1.001', '1.001'),\n        ('1.00100', '1.001'),\n        ('01.00100', '1.001'),\n        ('101.00100', '101.001'),\n        ('00000', '0'),\n        ('0', '0'),\n        ('0.0', '0'),\n        ('0.1', '0.1'),\n        ('0.11', '0.11'),\n        ('0.110', '0.11'),\n        ('0.001', '0.001'),\n        ('0.00100', '0.001'),\n        ('00.00100', '0.001'),\n        ('000.00100', '0.001'),\n    ])\n    def test_format_decimal_precision(input_value, expected_value):\n        # Test precision conservation.\n>       assert numbers.format_decimal(\n            decimal.Decimal(input_value), locale='en_US', decimal_quantization=False) == expected_value\nE       AssertionError: assert None == '0.001'\nE        +  where None = <function format_decimal at 0x7fda99608700>(Decimal('0.00100'), locale='en_US', decimal_quantization=False)\nE        +    where <function format_decimal at 0x7fda99608700> = numbers.format_decimal\nE        +    and   Decimal('0.00100') = <class 'decimal.Decimal'>('00.00100')\nE        +      where <class 'decimal.Decimal'> = decimal.Decimal\n\ntests/test_numbers.py:449: AssertionError"}, "teardown": {"duration": 0.0002325010000001626, "outcome": "passed"}}, {"nodeid": "tests/test_numbers.py::test_format_decimal_precision[000.00100-0.001]", "lineno": 424, "outcome": "failed", "keywords": ["test_format_decimal_precision[000.00100-0.001]", "parametrize", "pytestmark", "000.00100-0.001", "test_numbers.py", "tests", "testbed", ""], "setup": {"duration": 0.00025653900000000007, "outcome": "passed"}, "call": {"duration": 0.000328789000000107, "outcome": "failed", "crash": {"path": "/testbed/tests/test_numbers.py", "lineno": 449, "message": "AssertionError: assert None == '0.001'\n +  where None = <function format_decimal at 0x7fda99608700>(Decimal('0.00100'), locale='en_US', decimal_quantization=False)\n +    where <function format_decimal at 0x7fda99608700> = numbers.format_decimal\n +    and   Decimal('0.00100') = <class 'decimal.Decimal'>('000.00100')\n +      where <class 'decimal.Decimal'> = decimal.Decimal"}, "traceback": [{"path": "tests/test_numbers.py", "lineno": 449, "message": "AssertionError"}], "longrepr": "input_value = '000.00100', expected_value = '0.001'\n\n    @pytest.mark.parametrize('input_value, expected_value', [\n        ('10000', '10,000'),\n        ('1', '1'),\n        ('1.0', '1'),\n        ('1.1', '1.1'),\n        ('1.11', '1.11'),\n        ('1.110', '1.11'),\n        ('1.001', '1.001'),\n        ('1.00100', '1.001'),\n        ('01.00100', '1.001'),\n        ('101.00100', '101.001'),\n        ('00000', '0'),\n        ('0', '0'),\n        ('0.0', '0'),\n        ('0.1', '0.1'),\n        ('0.11', '0.11'),\n        ('0.110', '0.11'),\n        ('0.001', '0.001'),\n        ('0.00100', '0.001'),\n        ('00.00100', '0.001'),\n        ('000.00100', '0.001'),\n    ])\n    def test_format_decimal_precision(input_value, expected_value):\n        # Test precision conservation.\n>       assert numbers.format_decimal(\n            decimal.Decimal(input_value), locale='en_US', decimal_quantization=False) == expected_value\nE       AssertionError: assert None == '0.001'\nE        +  where None = <function format_decimal at 0x7fda99608700>(Decimal('0.00100'), locale='en_US', decimal_quantization=False)\nE        +    where <function format_decimal at 0x7fda99608700> = numbers.format_decimal\nE        +    and   Decimal('0.00100') = <class 'decimal.Decimal'>('000.00100')\nE        +      where <class 'decimal.Decimal'> = decimal.Decimal\n\ntests/test_numbers.py:449: AssertionError"}, "teardown": {"duration": 0.00021729800000036548, "outcome": "passed"}}, {"nodeid": "tests/test_numbers.py::test_format_decimal_quantization", "lineno": 452, "outcome": "failed", "keywords": ["test_format_decimal_quantization", "test_numbers.py", "tests", "testbed", ""], "setup": {"duration": 0.0001605489999998433, "outcome": "passed"}, "call": {"duration": 0.0001686920000003589, "outcome": "failed", "crash": {"path": "/testbed/tests/test_numbers.py", "lineno": 455, "message": "TypeError: 'NoneType' object is not iterable"}, "traceback": [{"path": "tests/test_numbers.py", "lineno": 455, "message": "TypeError"}], "longrepr": "def test_format_decimal_quantization():\n        # Test all locales.\n>       for locale_code in localedata.locale_identifiers():\nE       TypeError: 'NoneType' object is not iterable\n\ntests/test_numbers.py:455: TypeError"}, "teardown": {"duration": 0.00022919900000006876, "outcome": "passed"}}, {"nodeid": "tests/test_numbers.py::test_format_currency", "lineno": 459, "outcome": "failed", "keywords": ["test_format_currency", "test_numbers.py", "tests", "testbed", ""], "setup": {"duration": 0.00015806100000004264, "outcome": "passed"}, "call": {"duration": 0.00029083400000029513, "outcome": "failed", "crash": {"path": "/testbed/tests/test_numbers.py", "lineno": 461, "message": "AssertionError: assert None == '$1,099.98'\n +  where None = <function format_currency at 0x7fda996088b0>(1099.98, 'USD', locale='en_US')\n +    where <function format_currency at 0x7fda996088b0> = numbers.format_currency"}, "traceback": [{"path": "tests/test_numbers.py", "lineno": 461, "message": "AssertionError"}], "longrepr": "def test_format_currency():\n>       assert (numbers.format_currency(1099.98, 'USD', locale='en_US')\n                == '$1,099.98')\nE       AssertionError: assert None == '$1,099.98'\nE        +  where None = <function format_currency at 0x7fda996088b0>(1099.98, 'USD', locale='en_US')\nE        +    where <function format_currency at 0x7fda996088b0> = numbers.format_currency\n\ntests/test_numbers.py:461: AssertionError"}, "teardown": {"duration": 0.00021949899999995637, "outcome": "passed"}}, {"nodeid": "tests/test_numbers.py::test_format_currency_format_type", "lineno": 488, "outcome": "failed", "keywords": ["test_format_currency_format_type", "test_numbers.py", "tests", "testbed", ""], "setup": {"duration": 0.0001734419999999126, "outcome": "passed"}, "call": {"duration": 0.00031003399999995906, "outcome": "failed", "crash": {"path": "/testbed/tests/test_numbers.py", "lineno": 490, "message": "AssertionError: assert None == '$1,099.98'\n +  where None = <function format_currency at 0x7fda996088b0>(1099.98, 'USD', locale='en_US', format_type='standard')\n +    where <function format_currency at 0x7fda996088b0> = numbers.format_currency"}, "traceback": [{"path": "tests/test_numbers.py", "lineno": 490, "message": "AssertionError"}], "longrepr": "def test_format_currency_format_type():\n>       assert (numbers.format_currency(1099.98, 'USD', locale='en_US',\n                                        format_type=\"standard\")\n                == '$1,099.98')\nE       AssertionError: assert None == '$1,099.98'\nE        +  where None = <function format_currency at 0x7fda996088b0>(1099.98, 'USD', locale='en_US', format_type='standard')\nE        +    where <function format_currency at 0x7fda996088b0> = numbers.format_currency\n\ntests/test_numbers.py:490: AssertionError"}, "teardown": {"duration": 0.0002067160000001067, "outcome": "passed"}}, {"nodeid": "tests/test_numbers.py::test_format_compact_currency", "lineno": 520, "outcome": "failed", "keywords": ["test_format_compact_currency", "test_numbers.py", "tests", "testbed", ""], "setup": {"duration": 0.00016878099999972918, "outcome": "passed"}, "call": {"duration": 0.0002946759999997717, "outcome": "failed", "crash": {"path": "/testbed/tests/test_numbers.py", "lineno": 522, "message": "AssertionError: assert None == '$1'\n +  where None = <function format_compact_currency at 0x7fda99608940>(1, 'USD', locale='en_US', format_type='short')\n +    where <function format_compact_currency at 0x7fda99608940> = numbers.format_compact_currency"}, "traceback": [{"path": "tests/test_numbers.py", "lineno": 522, "message": "AssertionError"}], "longrepr": "def test_format_compact_currency():\n>       assert numbers.format_compact_currency(1, 'USD', locale='en_US', format_type=\"short\") == '$1'\nE       AssertionError: assert None == '$1'\nE        +  where None = <function format_compact_currency at 0x7fda99608940>(1, 'USD', locale='en_US', format_type='short')\nE        +    where <function format_compact_currency at 0x7fda99608940> = numbers.format_compact_currency\n\ntests/test_numbers.py:522: AssertionError"}, "teardown": {"duration": 0.00019319599999967352, "outcome": "passed"}}, {"nodeid": "tests/test_numbers.py::test_format_compact_currency_invalid_format_type", "lineno": 537, "outcome": "failed", "keywords": ["test_format_compact_currency_invalid_format_type", "test_numbers.py", "tests", "testbed", ""], "setup": {"duration": 0.00015637600000006913, "outcome": "passed"}, "call": {"duration": 0.00018569200000007058, "outcome": "failed", "crash": {"path": "/testbed/tests/test_numbers.py", "lineno": 539, "message": "Failed: DID NOT RAISE <class 'babel.numbers.UnknownCurrencyFormatError'>"}, "traceback": [{"path": "tests/test_numbers.py", "lineno": 539, "message": "Failed"}], "longrepr": "def test_format_compact_currency_invalid_format_type():\n>       with pytest.raises(numbers.UnknownCurrencyFormatError):\nE       Failed: DID NOT RAISE <class 'babel.numbers.UnknownCurrencyFormatError'>\n\ntests/test_numbers.py:539: Failed"}, "teardown": {"duration": 0.00019426399999966648, "outcome": "passed"}}, {"nodeid": "tests/test_numbers.py::test_format_currency_precision[10000-$10,000.00]", "lineno": 542, "outcome": "failed", "keywords": ["test_format_currency_precision[10000-$10,000.00]", "parametrize", "pytestmark", "10000-$10,000.00", "test_numbers.py", "tests", "testbed", ""], "setup": {"duration": 0.0002567620000002435, "outcome": "passed"}, "call": {"duration": 0.00033797500000032343, "outcome": "failed", "crash": {"path": "/testbed/tests/test_numbers.py", "lineno": 567, "message": "AssertionError: assert None == '$10,000.00'\n +  where None = <function format_currency at 0x7fda996088b0>(Decimal('10000'), currency='USD', locale='en_US', decimal_quantization=False)\n +    where <function format_currency at 0x7fda996088b0> = numbers.format_currency\n +    and   Decimal('10000') = <class 'decimal.Decimal'>('10000')\n +      where <class 'decimal.Decimal'> = decimal.Decimal"}, "traceback": [{"path": "tests/test_numbers.py", "lineno": 567, "message": "AssertionError"}], "longrepr": "input_value = '10000', expected_value = '$10,000.00'\n\n    @pytest.mark.parametrize('input_value, expected_value', [\n        ('10000', '$10,000.00'),\n        ('1', '$1.00'),\n        ('1.0', '$1.00'),\n        ('1.1', '$1.10'),\n        ('1.11', '$1.11'),\n        ('1.110', '$1.11'),\n        ('1.001', '$1.001'),\n        ('1.00100', '$1.001'),\n        ('01.00100', '$1.001'),\n        ('101.00100', '$101.001'),\n        ('00000', '$0.00'),\n        ('0', '$0.00'),\n        ('0.0', '$0.00'),\n        ('0.1', '$0.10'),\n        ('0.11', '$0.11'),\n        ('0.110', '$0.11'),\n        ('0.001', '$0.001'),\n        ('0.00100', '$0.001'),\n        ('00.00100', '$0.001'),\n        ('000.00100', '$0.001'),\n    ])\n    def test_format_currency_precision(input_value, expected_value):\n        # Test precision conservation.\n>       assert numbers.format_currency(\n            decimal.Decimal(input_value),\n            currency='USD',\n            locale='en_US',\n            decimal_quantization=False,\n        ) == expected_value\nE       AssertionError: assert None == '$10,000.00'\nE        +  where None = <function format_currency at 0x7fda996088b0>(Decimal('10000'), currency='USD', locale='en_US', decimal_quantization=False)\nE        +    where <function format_currency at 0x7fda996088b0> = numbers.format_currency\nE        +    and   Decimal('10000') = <class 'decimal.Decimal'>('10000')\nE        +      where <class 'decimal.Decimal'> = decimal.Decimal\n\ntests/test_numbers.py:567: AssertionError"}, "teardown": {"duration": 0.00021857599999997035, "outcome": "passed"}}, {"nodeid": "tests/test_numbers.py::test_format_currency_precision[1-$1.00]", "lineno": 542, "outcome": "failed", "keywords": ["test_format_currency_precision[1-$1.00]", "parametrize", "pytestmark", "1-$1.00", "test_numbers.py", "tests", "testbed", ""], "setup": {"duration": 0.0002610039999999536, "outcome": "passed"}, "call": {"duration": 0.00031866899999988263, "outcome": "failed", "crash": {"path": "/testbed/tests/test_numbers.py", "lineno": 567, "message": "AssertionError: assert None == '$1.00'\n +  where None = <function format_currency at 0x7fda996088b0>(Decimal('1'), currency='USD', locale='en_US', decimal_quantization=False)\n +    where <function format_currency at 0x7fda996088b0> = numbers.format_currency\n +    and   Decimal('1') = <class 'decimal.Decimal'>('1')\n +      where <class 'decimal.Decimal'> = decimal.Decimal"}, "traceback": [{"path": "tests/test_numbers.py", "lineno": 567, "message": "AssertionError"}], "longrepr": "input_value = '1', expected_value = '$1.00'\n\n    @pytest.mark.parametrize('input_value, expected_value', [\n        ('10000', '$10,000.00'),\n        ('1', '$1.00'),\n        ('1.0', '$1.00'),\n        ('1.1', '$1.10'),\n        ('1.11', '$1.11'),\n        ('1.110', '$1.11'),\n        ('1.001', '$1.001'),\n        ('1.00100', '$1.001'),\n        ('01.00100', '$1.001'),\n        ('101.00100', '$101.001'),\n        ('00000', '$0.00'),\n        ('0', '$0.00'),\n        ('0.0', '$0.00'),\n        ('0.1', '$0.10'),\n        ('0.11', '$0.11'),\n        ('0.110', '$0.11'),\n        ('0.001', '$0.001'),\n        ('0.00100', '$0.001'),\n        ('00.00100', '$0.001'),\n        ('000.00100', '$0.001'),\n    ])\n    def test_format_currency_precision(input_value, expected_value):\n        # Test precision conservation.\n>       assert numbers.format_currency(\n            decimal.Decimal(input_value),\n            currency='USD',\n            locale='en_US',\n            decimal_quantization=False,\n        ) == expected_value\nE       AssertionError: assert None == '$1.00'\nE        +  where None = <function format_currency at 0x7fda996088b0>(Decimal('1'), currency='USD', locale='en_US', decimal_quantization=False)\nE        +    where <function format_currency at 0x7fda996088b0> = numbers.format_currency\nE        +    and   Decimal('1') = <class 'decimal.Decimal'>('1')\nE        +      where <class 'decimal.Decimal'> = decimal.Decimal\n\ntests/test_numbers.py:567: AssertionError"}, "teardown": {"duration": 0.0002095899999998707, "outcome": "passed"}}, {"nodeid": "tests/test_numbers.py::test_format_currency_precision[1.0-$1.00]", "lineno": 542, "outcome": "failed", "keywords": ["test_format_currency_precision[1.0-$1.00]", "parametrize", "pytestmark", "1.0-$1.00", "test_numbers.py", "tests", "testbed", ""], "setup": {"duration": 0.00024393800000011012, "outcome": "passed"}, "call": {"duration": 0.00031482599999987926, "outcome": "failed", "crash": {"path": "/testbed/tests/test_numbers.py", "lineno": 567, "message": "AssertionError: assert None == '$1.00'\n +  where None = <function format_currency at 0x7fda996088b0>(Decimal('1.0'), currency='USD', locale='en_US', decimal_quantization=False)\n +    where <function format_currency at 0x7fda996088b0> = numbers.format_currency\n +    and   Decimal('1.0') = <class 'decimal.Decimal'>('1.0')\n +      where <class 'decimal.Decimal'> = decimal.Decimal"}, "traceback": [{"path": "tests/test_numbers.py", "lineno": 567, "message": "AssertionError"}], "longrepr": "input_value = '1.0', expected_value = '$1.00'\n\n    @pytest.mark.parametrize('input_value, expected_value', [\n        ('10000', '$10,000.00'),\n        ('1', '$1.00'),\n        ('1.0', '$1.00'),\n        ('1.1', '$1.10'),\n        ('1.11', '$1.11'),\n        ('1.110', '$1.11'),\n        ('1.001', '$1.001'),\n        ('1.00100', '$1.001'),\n        ('01.00100', '$1.001'),\n        ('101.00100', '$101.001'),\n        ('00000', '$0.00'),\n        ('0', '$0.00'),\n        ('0.0', '$0.00'),\n        ('0.1', '$0.10'),\n        ('0.11', '$0.11'),\n        ('0.110', '$0.11'),\n        ('0.001', '$0.001'),\n        ('0.00100', '$0.001'),\n        ('00.00100', '$0.001'),\n        ('000.00100', '$0.001'),\n    ])\n    def test_format_currency_precision(input_value, expected_value):\n        # Test precision conservation.\n>       assert numbers.format_currency(\n            decimal.Decimal(input_value),\n            currency='USD',\n            locale='en_US',\n            decimal_quantization=False,\n        ) == expected_value\nE       AssertionError: assert None == '$1.00'\nE        +  where None = <function format_currency at 0x7fda996088b0>(Decimal('1.0'), currency='USD', locale='en_US', decimal_quantization=False)\nE        +    where <function format_currency at 0x7fda996088b0> = numbers.format_currency\nE        +    and   Decimal('1.0') = <class 'decimal.Decimal'>('1.0')\nE        +      where <class 'decimal.Decimal'> = decimal.Decimal\n\ntests/test_numbers.py:567: AssertionError"}, "teardown": {"duration": 0.00020955799999988756, "outcome": "passed"}}, {"nodeid": "tests/test_numbers.py::test_format_currency_precision[1.1-$1.10]", "lineno": 542, "outcome": "failed", "keywords": ["test_format_currency_precision[1.1-$1.10]", "parametrize", "pytestmark", "1.1-$1.10", "test_numbers.py", "tests", "testbed", ""], "setup": {"duration": 0.00024142099999968636, "outcome": "passed"}, "call": {"duration": 0.00031592600000029947, "outcome": "failed", "crash": {"path": "/testbed/tests/test_numbers.py", "lineno": 567, "message": "AssertionError: assert None == '$1.10'\n +  where None = <function format_currency at 0x7fda996088b0>(Decimal('1.1'), currency='USD', locale='en_US', decimal_quantization=False)\n +    where <function format_currency at 0x7fda996088b0> = numbers.format_currency\n +    and   Decimal('1.1') = <class 'decimal.Decimal'>('1.1')\n +      where <class 'decimal.Decimal'> = decimal.Decimal"}, "traceback": [{"path": "tests/test_numbers.py", "lineno": 567, "message": "AssertionError"}], "longrepr": "input_value = '1.1', expected_value = '$1.10'\n\n    @pytest.mark.parametrize('input_value, expected_value', [\n        ('10000', '$10,000.00'),\n        ('1', '$1.00'),\n        ('1.0', '$1.00'),\n        ('1.1', '$1.10'),\n        ('1.11', '$1.11'),\n        ('1.110', '$1.11'),\n        ('1.001', '$1.001'),\n        ('1.00100', '$1.001'),\n        ('01.00100', '$1.001'),\n        ('101.00100', '$101.001'),\n        ('00000', '$0.00'),\n        ('0', '$0.00'),\n        ('0.0', '$0.00'),\n        ('0.1', '$0.10'),\n        ('0.11', '$0.11'),\n        ('0.110', '$0.11'),\n        ('0.001', '$0.001'),\n        ('0.00100', '$0.001'),\n        ('00.00100', '$0.001'),\n        ('000.00100', '$0.001'),\n    ])\n    def test_format_currency_precision(input_value, expected_value):\n        # Test precision conservation.\n>       assert numbers.format_currency(\n            decimal.Decimal(input_value),\n            currency='USD',\n            locale='en_US',\n            decimal_quantization=False,\n        ) == expected_value\nE       AssertionError: assert None == '$1.10'\nE        +  where None = <function format_currency at 0x7fda996088b0>(Decimal('1.1'), currency='USD', locale='en_US', decimal_quantization=False)\nE        +    where <function format_currency at 0x7fda996088b0> = numbers.format_currency\nE        +    and   Decimal('1.1') = <class 'decimal.Decimal'>('1.1')\nE        +      where <class 'decimal.Decimal'> = decimal.Decimal\n\ntests/test_numbers.py:567: AssertionError"}, "teardown": {"duration": 0.00023401000000022876, "outcome": "passed"}}, {"nodeid": "tests/test_numbers.py::test_format_currency_precision[1.11-$1.11]", "lineno": 542, "outcome": "failed", "keywords": ["test_format_currency_precision[1.11-$1.11]", "parametrize", "pytestmark", "1.11-$1.11", "test_numbers.py", "tests", "testbed", ""], "setup": {"duration": 0.00023847599999982094, "outcome": "passed"}, "call": {"duration": 0.0003148130000001359, "outcome": "failed", "crash": {"path": "/testbed/tests/test_numbers.py", "lineno": 567, "message": "AssertionError: assert None == '$1.11'\n +  where None = <function format_currency at 0x7fda996088b0>(Decimal('1.11'), currency='USD', locale='en_US', decimal_quantization=False)\n +    where <function format_currency at 0x7fda996088b0> = numbers.format_currency\n +    and   Decimal('1.11') = <class 'decimal.Decimal'>('1.11')\n +      where <class 'decimal.Decimal'> = decimal.Decimal"}, "traceback": [{"path": "tests/test_numbers.py", "lineno": 567, "message": "AssertionError"}], "longrepr": "input_value = '1.11', expected_value = '$1.11'\n\n    @pytest.mark.parametrize('input_value, expected_value', [\n        ('10000', '$10,000.00'),\n        ('1', '$1.00'),\n        ('1.0', '$1.00'),\n        ('1.1', '$1.10'),\n        ('1.11', '$1.11'),\n        ('1.110', '$1.11'),\n        ('1.001', '$1.001'),\n        ('1.00100', '$1.001'),\n        ('01.00100', '$1.001'),\n        ('101.00100', '$101.001'),\n        ('00000', '$0.00'),\n        ('0', '$0.00'),\n        ('0.0', '$0.00'),\n        ('0.1', '$0.10'),\n        ('0.11', '$0.11'),\n        ('0.110', '$0.11'),\n        ('0.001', '$0.001'),\n        ('0.00100', '$0.001'),\n        ('00.00100', '$0.001'),\n        ('000.00100', '$0.001'),\n    ])\n    def test_format_currency_precision(input_value, expected_value):\n        # Test precision conservation.\n>       assert numbers.format_currency(\n            decimal.Decimal(input_value),\n            currency='USD',\n            locale='en_US',\n            decimal_quantization=False,\n        ) == expected_value\nE       AssertionError: assert None == '$1.11'\nE        +  where None = <function format_currency at 0x7fda996088b0>(Decimal('1.11'), currency='USD', locale='en_US', decimal_quantization=False)\nE        +    where <function format_currency at 0x7fda996088b0> = numbers.format_currency\nE        +    and   Decimal('1.11') = <class 'decimal.Decimal'>('1.11')\nE        +      where <class 'decimal.Decimal'> = decimal.Decimal\n\ntests/test_numbers.py:567: AssertionError"}, "teardown": {"duration": 0.00022021299999996913, "outcome": "passed"}}, {"nodeid": "tests/test_numbers.py::test_format_currency_precision[1.110-$1.11]", "lineno": 542, "outcome": "failed", "keywords": ["test_format_currency_precision[1.110-$1.11]", "parametrize", "pytestmark", "1.110-$1.11", "test_numbers.py", "tests", "testbed", ""], "setup": {"duration": 0.0002491589999999988, "outcome": "passed"}, "call": {"duration": 0.00029843700000009576, "outcome": "failed", "crash": {"path": "/testbed/tests/test_numbers.py", "lineno": 567, "message": "AssertionError: assert None == '$1.11'\n +  where None = <function format_currency at 0x7fda996088b0>(Decimal('1.110'), currency='USD', locale='en_US', decimal_quantization=False)\n +    where <function format_currency at 0x7fda996088b0> = numbers.format_currency\n +    and   Decimal('1.110') = <class 'decimal.Decimal'>('1.110')\n +      where <class 'decimal.Decimal'> = decimal.Decimal"}, "traceback": [{"path": "tests/test_numbers.py", "lineno": 567, "message": "AssertionError"}], "longrepr": "input_value = '1.110', expected_value = '$1.11'\n\n    @pytest.mark.parametrize('input_value, expected_value', [\n        ('10000', '$10,000.00'),\n        ('1', '$1.00'),\n        ('1.0', '$1.00'),\n        ('1.1', '$1.10'),\n        ('1.11', '$1.11'),\n        ('1.110', '$1.11'),\n        ('1.001', '$1.001'),\n        ('1.00100', '$1.001'),\n        ('01.00100', '$1.001'),\n        ('101.00100', '$101.001'),\n        ('00000', '$0.00'),\n        ('0', '$0.00'),\n        ('0.0', '$0.00'),\n        ('0.1', '$0.10'),\n        ('0.11', '$0.11'),\n        ('0.110', '$0.11'),\n        ('0.001', '$0.001'),\n        ('0.00100', '$0.001'),\n        ('00.00100', '$0.001'),\n        ('000.00100', '$0.001'),\n    ])\n    def test_format_currency_precision(input_value, expected_value):\n        # Test precision conservation.\n>       assert numbers.format_currency(\n            decimal.Decimal(input_value),\n            currency='USD',\n            locale='en_US',\n            decimal_quantization=False,\n        ) == expected_value\nE       AssertionError: assert None == '$1.11'\nE        +  where None = <function format_currency at 0x7fda996088b0>(Decimal('1.110'), currency='USD', locale='en_US', decimal_quantization=False)\nE        +    where <function format_currency at 0x7fda996088b0> = numbers.format_currency\nE        +    and   Decimal('1.110') = <class 'decimal.Decimal'>('1.110')\nE        +      where <class 'decimal.Decimal'> = decimal.Decimal\n\ntests/test_numbers.py:567: AssertionError"}, "teardown": {"duration": 0.00021570400000037182, "outcome": "passed"}}, {"nodeid": "tests/test_numbers.py::test_format_currency_precision[1.001-$1.001]", "lineno": 542, "outcome": "failed", "keywords": ["test_format_currency_precision[1.001-$1.001]", "parametrize", "pytestmark", "1.001-$1.001", "test_numbers.py", "tests", "testbed", ""], "setup": {"duration": 0.00023813799999983232, "outcome": "passed"}, "call": {"duration": 0.00030259200000015696, "outcome": "failed", "crash": {"path": "/testbed/tests/test_numbers.py", "lineno": 567, "message": "AssertionError: assert None == '$1.001'\n +  where None = <function format_currency at 0x7fda996088b0>(Decimal('1.001'), currency='USD', locale='en_US', decimal_quantization=False)\n +    where <function format_currency at 0x7fda996088b0> = numbers.format_currency\n +    and   Decimal('1.001') = <class 'decimal.Decimal'>('1.001')\n +      where <class 'decimal.Decimal'> = decimal.Decimal"}, "traceback": [{"path": "tests/test_numbers.py", "lineno": 567, "message": "AssertionError"}], "longrepr": "input_value = '1.001', expected_value = '$1.001'\n\n    @pytest.mark.parametrize('input_value, expected_value', [\n        ('10000', '$10,000.00'),\n        ('1', '$1.00'),\n        ('1.0', '$1.00'),\n        ('1.1', '$1.10'),\n        ('1.11', '$1.11'),\n        ('1.110', '$1.11'),\n        ('1.001', '$1.001'),\n        ('1.00100', '$1.001'),\n        ('01.00100', '$1.001'),\n        ('101.00100', '$101.001'),\n        ('00000', '$0.00'),\n        ('0', '$0.00'),\n        ('0.0', '$0.00'),\n        ('0.1', '$0.10'),\n        ('0.11', '$0.11'),\n        ('0.110', '$0.11'),\n        ('0.001', '$0.001'),\n        ('0.00100', '$0.001'),\n        ('00.00100', '$0.001'),\n        ('000.00100', '$0.001'),\n    ])\n    def test_format_currency_precision(input_value, expected_value):\n        # Test precision conservation.\n>       assert numbers.format_currency(\n            decimal.Decimal(input_value),\n            currency='USD',\n            locale='en_US',\n            decimal_quantization=False,\n        ) == expected_value\nE       AssertionError: assert None == '$1.001'\nE        +  where None = <function format_currency at 0x7fda996088b0>(Decimal('1.001'), currency='USD', locale='en_US', decimal_quantization=False)\nE        +    where <function format_currency at 0x7fda996088b0> = numbers.format_currency\nE        +    and   Decimal('1.001') = <class 'decimal.Decimal'>('1.001')\nE        +      where <class 'decimal.Decimal'> = decimal.Decimal\n\ntests/test_numbers.py:567: AssertionError"}, "teardown": {"duration": 0.0002092880000001962, "outcome": "passed"}}, {"nodeid": "tests/test_numbers.py::test_format_currency_precision[1.00100-$1.001]", "lineno": 542, "outcome": "failed", "keywords": ["test_format_currency_precision[1.00100-$1.001]", "parametrize", "pytestmark", "1.00100-$1.001", "test_numbers.py", "tests", "testbed", ""], "setup": {"duration": 0.0002705839999999071, "outcome": "passed"}, "call": {"duration": 0.00030660999999998495, "outcome": "failed", "crash": {"path": "/testbed/tests/test_numbers.py", "lineno": 567, "message": "AssertionError: assert None == '$1.001'\n +  where None = <function format_currency at 0x7fda996088b0>(Decimal('1.00100'), currency='USD', locale='en_US', decimal_quantization=False)\n +    where <function format_currency at 0x7fda996088b0> = numbers.format_currency\n +    and   Decimal('1.00100') = <class 'decimal.Decimal'>('1.00100')\n +      where <class 'decimal.Decimal'> = decimal.Decimal"}, "traceback": [{"path": "tests/test_numbers.py", "lineno": 567, "message": "AssertionError"}], "longrepr": "input_value = '1.00100', expected_value = '$1.001'\n\n    @pytest.mark.parametrize('input_value, expected_value', [\n        ('10000', '$10,000.00'),\n        ('1', '$1.00'),\n        ('1.0', '$1.00'),\n        ('1.1', '$1.10'),\n        ('1.11', '$1.11'),\n        ('1.110', '$1.11'),\n        ('1.001', '$1.001'),\n        ('1.00100', '$1.001'),\n        ('01.00100', '$1.001'),\n        ('101.00100', '$101.001'),\n        ('00000', '$0.00'),\n        ('0', '$0.00'),\n        ('0.0', '$0.00'),\n        ('0.1', '$0.10'),\n        ('0.11', '$0.11'),\n        ('0.110', '$0.11'),\n        ('0.001', '$0.001'),\n        ('0.00100', '$0.001'),\n        ('00.00100', '$0.001'),\n        ('000.00100', '$0.001'),\n    ])\n    def test_format_currency_precision(input_value, expected_value):\n        # Test precision conservation.\n>       assert numbers.format_currency(\n            decimal.Decimal(input_value),\n            currency='USD',\n            locale='en_US',\n            decimal_quantization=False,\n        ) == expected_value\nE       AssertionError: assert None == '$1.001'\nE        +  where None = <function format_currency at 0x7fda996088b0>(Decimal('1.00100'), currency='USD', locale='en_US', decimal_quantization=False)\nE        +    where <function format_currency at 0x7fda996088b0> = numbers.format_currency\nE        +    and   Decimal('1.00100') = <class 'decimal.Decimal'>('1.00100')\nE        +      where <class 'decimal.Decimal'> = decimal.Decimal\n\ntests/test_numbers.py:567: AssertionError"}, "teardown": {"duration": 0.0002737690000000903, "outcome": "passed"}}, {"nodeid": "tests/test_numbers.py::test_format_currency_precision[01.00100-$1.001]", "lineno": 542, "outcome": "failed", "keywords": ["test_format_currency_precision[01.00100-$1.001]", "parametrize", "pytestmark", "01.00100-$1.001", "test_numbers.py", "tests", "testbed", ""], "setup": {"duration": 0.00024247400000021457, "outcome": "passed"}, "call": {"duration": 0.0003095140000000107, "outcome": "failed", "crash": {"path": "/testbed/tests/test_numbers.py", "lineno": 567, "message": "AssertionError: assert None == '$1.001'\n +  where None = <function format_currency at 0x7fda996088b0>(Decimal('1.00100'), currency='USD', locale='en_US', decimal_quantization=False)\n +    where <function format_currency at 0x7fda996088b0> = numbers.format_currency\n +    and   Decimal('1.00100') = <class 'decimal.Decimal'>('01.00100')\n +      where <class 'decimal.Decimal'> = decimal.Decimal"}, "traceback": [{"path": "tests/test_numbers.py", "lineno": 567, "message": "AssertionError"}], "longrepr": "input_value = '01.00100', expected_value = '$1.001'\n\n    @pytest.mark.parametrize('input_value, expected_value', [\n        ('10000', '$10,000.00'),\n        ('1', '$1.00'),\n        ('1.0', '$1.00'),\n        ('1.1', '$1.10'),\n        ('1.11', '$1.11'),\n        ('1.110', '$1.11'),\n        ('1.001', '$1.001'),\n        ('1.00100', '$1.001'),\n        ('01.00100', '$1.001'),\n        ('101.00100', '$101.001'),\n        ('00000', '$0.00'),\n        ('0', '$0.00'),\n        ('0.0', '$0.00'),\n        ('0.1', '$0.10'),\n        ('0.11', '$0.11'),\n        ('0.110', '$0.11'),\n        ('0.001', '$0.001'),\n        ('0.00100', '$0.001'),\n        ('00.00100', '$0.001'),\n        ('000.00100', '$0.001'),\n    ])\n    def test_format_currency_precision(input_value, expected_value):\n        # Test precision conservation.\n>       assert numbers.format_currency(\n            decimal.Decimal(input_value),\n            currency='USD',\n            locale='en_US',\n            decimal_quantization=False,\n        ) == expected_value\nE       AssertionError: assert None == '$1.001'\nE        +  where None = <function format_currency at 0x7fda996088b0>(Decimal('1.00100'), currency='USD', locale='en_US', decimal_quantization=False)\nE        +    where <function format_currency at 0x7fda996088b0> = numbers.format_currency\nE        +    and   Decimal('1.00100') = <class 'decimal.Decimal'>('01.00100')\nE        +      where <class 'decimal.Decimal'> = decimal.Decimal\n\ntests/test_numbers.py:567: AssertionError"}, "teardown": {"duration": 0.00020503699999974145, "outcome": "passed"}}, {"nodeid": "tests/test_numbers.py::test_format_currency_precision[101.00100-$101.001]", "lineno": 542, "outcome": "failed", "keywords": ["test_format_currency_precision[101.00100-$101.001]", "parametrize", "pytestmark", "101.00100-$101.001", "test_numbers.py", "tests", "testbed", ""], "setup": {"duration": 0.00023000400000006138, "outcome": "passed"}, "call": {"duration": 0.0003127720000000167, "outcome": "failed", "crash": {"path": "/testbed/tests/test_numbers.py", "lineno": 567, "message": "AssertionError: assert None == '$101.001'\n +  where None = <function format_currency at 0x7fda996088b0>(Decimal('101.00100'), currency='USD', locale='en_US', decimal_quantization=False)\n +    where <function format_currency at 0x7fda996088b0> = numbers.format_currency\n +    and   Decimal('101.00100') = <class 'decimal.Decimal'>('101.00100')\n +      where <class 'decimal.Decimal'> = decimal.Decimal"}, "traceback": [{"path": "tests/test_numbers.py", "lineno": 567, "message": "AssertionError"}], "longrepr": "input_value = '101.00100', expected_value = '$101.001'\n\n    @pytest.mark.parametrize('input_value, expected_value', [\n        ('10000', '$10,000.00'),\n        ('1', '$1.00'),\n        ('1.0', '$1.00'),\n        ('1.1', '$1.10'),\n        ('1.11', '$1.11'),\n        ('1.110', '$1.11'),\n        ('1.001', '$1.001'),\n        ('1.00100', '$1.001'),\n        ('01.00100', '$1.001'),\n        ('101.00100', '$101.001'),\n        ('00000', '$0.00'),\n        ('0', '$0.00'),\n        ('0.0', '$0.00'),\n        ('0.1', '$0.10'),\n        ('0.11', '$0.11'),\n        ('0.110', '$0.11'),\n        ('0.001', '$0.001'),\n        ('0.00100', '$0.001'),\n        ('00.00100', '$0.001'),\n        ('000.00100', '$0.001'),\n    ])\n    def test_format_currency_precision(input_value, expected_value):\n        # Test precision conservation.\n>       assert numbers.format_currency(\n            decimal.Decimal(input_value),\n            currency='USD',\n            locale='en_US',\n            decimal_quantization=False,\n        ) == expected_value\nE       AssertionError: assert None == '$101.001'\nE        +  where None = <function format_currency at 0x7fda996088b0>(Decimal('101.00100'), currency='USD', locale='en_US', decimal_quantization=False)\nE        +    where <function format_currency at 0x7fda996088b0> = numbers.format_currency\nE        +    and   Decimal('101.00100') = <class 'decimal.Decimal'>('101.00100')\nE        +      where <class 'decimal.Decimal'> = decimal.Decimal\n\ntests/test_numbers.py:567: AssertionError"}, "teardown": {"duration": 0.0002166470000002363, "outcome": "passed"}}, {"nodeid": "tests/test_numbers.py::test_format_currency_precision[00000-$0.00]", "lineno": 542, "outcome": "failed", "keywords": ["test_format_currency_precision[00000-$0.00]", "parametrize", "pytestmark", "00000-$0.00", "test_numbers.py", "tests", "testbed", ""], "setup": {"duration": 0.00023109500000018102, "outcome": "passed"}, "call": {"duration": 0.00033379600000005283, "outcome": "failed", "crash": {"path": "/testbed/tests/test_numbers.py", "lineno": 567, "message": "AssertionError: assert None == '$0.00'\n +  where None = <function format_currency at 0x7fda996088b0>(Decimal('0'), currency='USD', locale='en_US', decimal_quantization=False)\n +    where <function format_currency at 0x7fda996088b0> = numbers.format_currency\n +    and   Decimal('0') = <class 'decimal.Decimal'>('00000')\n +      where <class 'decimal.Decimal'> = decimal.Decimal"}, "traceback": [{"path": "tests/test_numbers.py", "lineno": 567, "message": "AssertionError"}], "longrepr": "input_value = '00000', expected_value = '$0.00'\n\n    @pytest.mark.parametrize('input_value, expected_value', [\n        ('10000', '$10,000.00'),\n        ('1', '$1.00'),\n        ('1.0', '$1.00'),\n        ('1.1', '$1.10'),\n        ('1.11', '$1.11'),\n        ('1.110', '$1.11'),\n        ('1.001', '$1.001'),\n        ('1.00100', '$1.001'),\n        ('01.00100', '$1.001'),\n        ('101.00100', '$101.001'),\n        ('00000', '$0.00'),\n        ('0', '$0.00'),\n        ('0.0', '$0.00'),\n        ('0.1', '$0.10'),\n        ('0.11', '$0.11'),\n        ('0.110', '$0.11'),\n        ('0.001', '$0.001'),\n        ('0.00100', '$0.001'),\n        ('00.00100', '$0.001'),\n        ('000.00100', '$0.001'),\n    ])\n    def test_format_currency_precision(input_value, expected_value):\n        # Test precision conservation.\n>       assert numbers.format_currency(\n            decimal.Decimal(input_value),\n            currency='USD',\n            locale='en_US',\n            decimal_quantization=False,\n        ) == expected_value\nE       AssertionError: assert None == '$0.00'\nE        +  where None = <function format_currency at 0x7fda996088b0>(Decimal('0'), currency='USD', locale='en_US', decimal_quantization=False)\nE        +    where <function format_currency at 0x7fda996088b0> = numbers.format_currency\nE        +    and   Decimal('0') = <class 'decimal.Decimal'>('00000')\nE        +      where <class 'decimal.Decimal'> = decimal.Decimal\n\ntests/test_numbers.py:567: AssertionError"}, "teardown": {"duration": 0.00021388300000024785, "outcome": "passed"}}, {"nodeid": "tests/test_numbers.py::test_format_currency_precision[0-$0.00]", "lineno": 542, "outcome": "failed", "keywords": ["test_format_currency_precision[0-$0.00]", "parametrize", "pytestmark", "0-$0.00", "test_numbers.py", "tests", "testbed", ""], "setup": {"duration": 0.0002306129999998241, "outcome": "passed"}, "call": {"duration": 0.00029918699999997855, "outcome": "failed", "crash": {"path": "/testbed/tests/test_numbers.py", "lineno": 567, "message": "AssertionError: assert None == '$0.00'\n +  where None = <function format_currency at 0x7fda996088b0>(Decimal('0'), currency='USD', locale='en_US', decimal_quantization=False)\n +    where <function format_currency at 0x7fda996088b0> = numbers.format_currency\n +    and   Decimal('0') = <class 'decimal.Decimal'>('0')\n +      where <class 'decimal.Decimal'> = decimal.Decimal"}, "traceback": [{"path": "tests/test_numbers.py", "lineno": 567, "message": "AssertionError"}], "longrepr": "input_value = '0', expected_value = '$0.00'\n\n    @pytest.mark.parametrize('input_value, expected_value', [\n        ('10000', '$10,000.00'),\n        ('1', '$1.00'),\n        ('1.0', '$1.00'),\n        ('1.1', '$1.10'),\n        ('1.11', '$1.11'),\n        ('1.110', '$1.11'),\n        ('1.001', '$1.001'),\n        ('1.00100', '$1.001'),\n        ('01.00100', '$1.001'),\n        ('101.00100', '$101.001'),\n        ('00000', '$0.00'),\n        ('0', '$0.00'),\n        ('0.0', '$0.00'),\n        ('0.1', '$0.10'),\n        ('0.11', '$0.11'),\n        ('0.110', '$0.11'),\n        ('0.001', '$0.001'),\n        ('0.00100', '$0.001'),\n        ('00.00100', '$0.001'),\n        ('000.00100', '$0.001'),\n    ])\n    def test_format_currency_precision(input_value, expected_value):\n        # Test precision conservation.\n>       assert numbers.format_currency(\n            decimal.Decimal(input_value),\n            currency='USD',\n            locale='en_US',\n            decimal_quantization=False,\n        ) == expected_value\nE       AssertionError: assert None == '$0.00'\nE        +  where None = <function format_currency at 0x7fda996088b0>(Decimal('0'), currency='USD', locale='en_US', decimal_quantization=False)\nE        +    where <function format_currency at 0x7fda996088b0> = numbers.format_currency\nE        +    and   Decimal('0') = <class 'decimal.Decimal'>('0')\nE        +      where <class 'decimal.Decimal'> = decimal.Decimal\n\ntests/test_numbers.py:567: AssertionError"}, "teardown": {"duration": 0.00021366999999994363, "outcome": "passed"}}, {"nodeid": "tests/test_numbers.py::test_format_currency_precision[0.0-$0.00]", "lineno": 542, "outcome": "failed", "keywords": ["test_format_currency_precision[0.0-$0.00]", "parametrize", "pytestmark", "0.0-$0.00", "test_numbers.py", "tests", "testbed", ""], "setup": {"duration": 0.00022912400000008049, "outcome": "passed"}, "call": {"duration": 0.00029067100000013113, "outcome": "failed", "crash": {"path": "/testbed/tests/test_numbers.py", "lineno": 567, "message": "AssertionError: assert None == '$0.00'\n +  where None = <function format_currency at 0x7fda996088b0>(Decimal('0.0'), currency='USD', locale='en_US', decimal_quantization=False)\n +    where <function format_currency at 0x7fda996088b0> = numbers.format_currency\n +    and   Decimal('0.0') = <class 'decimal.Decimal'>('0.0')\n +      where <class 'decimal.Decimal'> = decimal.Decimal"}, "traceback": [{"path": "tests/test_numbers.py", "lineno": 567, "message": "AssertionError"}], "longrepr": "input_value = '0.0', expected_value = '$0.00'\n\n    @pytest.mark.parametrize('input_value, expected_value', [\n        ('10000', '$10,000.00'),\n        ('1', '$1.00'),\n        ('1.0', '$1.00'),\n        ('1.1', '$1.10'),\n        ('1.11', '$1.11'),\n        ('1.110', '$1.11'),\n        ('1.001', '$1.001'),\n        ('1.00100', '$1.001'),\n        ('01.00100', '$1.001'),\n        ('101.00100', '$101.001'),\n        ('00000', '$0.00'),\n        ('0', '$0.00'),\n        ('0.0', '$0.00'),\n        ('0.1', '$0.10'),\n        ('0.11', '$0.11'),\n        ('0.110', '$0.11'),\n        ('0.001', '$0.001'),\n        ('0.00100', '$0.001'),\n        ('00.00100', '$0.001'),\n        ('000.00100', '$0.001'),\n    ])\n    def test_format_currency_precision(input_value, expected_value):\n        # Test precision conservation.\n>       assert numbers.format_currency(\n            decimal.Decimal(input_value),\n            currency='USD',\n            locale='en_US',\n            decimal_quantization=False,\n        ) == expected_value\nE       AssertionError: assert None == '$0.00'\nE        +  where None = <function format_currency at 0x7fda996088b0>(Decimal('0.0'), currency='USD', locale='en_US', decimal_quantization=False)\nE        +    where <function format_currency at 0x7fda996088b0> = numbers.format_currency\nE        +    and   Decimal('0.0') = <class 'decimal.Decimal'>('0.0')\nE        +      where <class 'decimal.Decimal'> = decimal.Decimal\n\ntests/test_numbers.py:567: AssertionError"}, "teardown": {"duration": 0.00022283200000039471, "outcome": "passed"}}, {"nodeid": "tests/test_numbers.py::test_format_currency_precision[0.1-$0.10]", "lineno": 542, "outcome": "failed", "keywords": ["test_format_currency_precision[0.1-$0.10]", "parametrize", "pytestmark", "0.1-$0.10", "test_numbers.py", "tests", "testbed", ""], "setup": {"duration": 0.00022721000000025526, "outcome": "passed"}, "call": {"duration": 0.00030183199999989085, "outcome": "failed", "crash": {"path": "/testbed/tests/test_numbers.py", "lineno": 567, "message": "AssertionError: assert None == '$0.10'\n +  where None = <function format_currency at 0x7fda996088b0>(Decimal('0.1'), currency='USD', locale='en_US', decimal_quantization=False)\n +    where <function format_currency at 0x7fda996088b0> = numbers.format_currency\n +    and   Decimal('0.1') = <class 'decimal.Decimal'>('0.1')\n +      where <class 'decimal.Decimal'> = decimal.Decimal"}, "traceback": [{"path": "tests/test_numbers.py", "lineno": 567, "message": "AssertionError"}], "longrepr": "input_value = '0.1', expected_value = '$0.10'\n\n    @pytest.mark.parametrize('input_value, expected_value', [\n        ('10000', '$10,000.00'),\n        ('1', '$1.00'),\n        ('1.0', '$1.00'),\n        ('1.1', '$1.10'),\n        ('1.11', '$1.11'),\n        ('1.110', '$1.11'),\n        ('1.001', '$1.001'),\n        ('1.00100', '$1.001'),\n        ('01.00100', '$1.001'),\n        ('101.00100', '$101.001'),\n        ('00000', '$0.00'),\n        ('0', '$0.00'),\n        ('0.0', '$0.00'),\n        ('0.1', '$0.10'),\n        ('0.11', '$0.11'),\n        ('0.110', '$0.11'),\n        ('0.001', '$0.001'),\n        ('0.00100', '$0.001'),\n        ('00.00100', '$0.001'),\n        ('000.00100', '$0.001'),\n    ])\n    def test_format_currency_precision(input_value, expected_value):\n        # Test precision conservation.\n>       assert numbers.format_currency(\n            decimal.Decimal(input_value),\n            currency='USD',\n            locale='en_US',\n            decimal_quantization=False,\n        ) == expected_value\nE       AssertionError: assert None == '$0.10'\nE        +  where None = <function format_currency at 0x7fda996088b0>(Decimal('0.1'), currency='USD', locale='en_US', decimal_quantization=False)\nE        +    where <function format_currency at 0x7fda996088b0> = numbers.format_currency\nE        +    and   Decimal('0.1') = <class 'decimal.Decimal'>('0.1')\nE        +      where <class 'decimal.Decimal'> = decimal.Decimal\n\ntests/test_numbers.py:567: AssertionError"}, "teardown": {"duration": 0.00021261299999997263, "outcome": "passed"}}, {"nodeid": "tests/test_numbers.py::test_format_currency_precision[0.11-$0.11]", "lineno": 542, "outcome": "failed", "keywords": ["test_format_currency_precision[0.11-$0.11]", "parametrize", "pytestmark", "0.11-$0.11", "test_numbers.py", "tests", "testbed", ""], "setup": {"duration": 0.00023169500000008725, "outcome": "passed"}, "call": {"duration": 0.00029992300000003524, "outcome": "failed", "crash": {"path": "/testbed/tests/test_numbers.py", "lineno": 567, "message": "AssertionError: assert None == '$0.11'\n +  where None = <function format_currency at 0x7fda996088b0>(Decimal('0.11'), currency='USD', locale='en_US', decimal_quantization=False)\n +    where <function format_currency at 0x7fda996088b0> = numbers.format_currency\n +    and   Decimal('0.11') = <class 'decimal.Decimal'>('0.11')\n +      where <class 'decimal.Decimal'> = decimal.Decimal"}, "traceback": [{"path": "tests/test_numbers.py", "lineno": 567, "message": "AssertionError"}], "longrepr": "input_value = '0.11', expected_value = '$0.11'\n\n    @pytest.mark.parametrize('input_value, expected_value', [\n        ('10000', '$10,000.00'),\n        ('1', '$1.00'),\n        ('1.0', '$1.00'),\n        ('1.1', '$1.10'),\n        ('1.11', '$1.11'),\n        ('1.110', '$1.11'),\n        ('1.001', '$1.001'),\n        ('1.00100', '$1.001'),\n        ('01.00100', '$1.001'),\n        ('101.00100', '$101.001'),\n        ('00000', '$0.00'),\n        ('0', '$0.00'),\n        ('0.0', '$0.00'),\n        ('0.1', '$0.10'),\n        ('0.11', '$0.11'),\n        ('0.110', '$0.11'),\n        ('0.001', '$0.001'),\n        ('0.00100', '$0.001'),\n        ('00.00100', '$0.001'),\n        ('000.00100', '$0.001'),\n    ])\n    def test_format_currency_precision(input_value, expected_value):\n        # Test precision conservation.\n>       assert numbers.format_currency(\n            decimal.Decimal(input_value),\n            currency='USD',\n            locale='en_US',\n            decimal_quantization=False,\n        ) == expected_value\nE       AssertionError: assert None == '$0.11'\nE        +  where None = <function format_currency at 0x7fda996088b0>(Decimal('0.11'), currency='USD', locale='en_US', decimal_quantization=False)\nE        +    where <function format_currency at 0x7fda996088b0> = numbers.format_currency\nE        +    and   Decimal('0.11') = <class 'decimal.Decimal'>('0.11')\nE        +      where <class 'decimal.Decimal'> = decimal.Decimal\n\ntests/test_numbers.py:567: AssertionError"}, "teardown": {"duration": 0.00020261700000023808, "outcome": "passed"}}, {"nodeid": "tests/test_numbers.py::test_format_currency_precision[0.110-$0.11]", "lineno": 542, "outcome": "failed", "keywords": ["test_format_currency_precision[0.110-$0.11]", "parametrize", "pytestmark", "0.110-$0.11", "test_numbers.py", "tests", "testbed", ""], "setup": {"duration": 0.00023035499999979336, "outcome": "passed"}, "call": {"duration": 0.0002946129999998881, "outcome": "failed", "crash": {"path": "/testbed/tests/test_numbers.py", "lineno": 567, "message": "AssertionError: assert None == '$0.11'\n +  where None = <function format_currency at 0x7fda996088b0>(Decimal('0.110'), currency='USD', locale='en_US', decimal_quantization=False)\n +    where <function format_currency at 0x7fda996088b0> = numbers.format_currency\n +    and   Decimal('0.110') = <class 'decimal.Decimal'>('0.110')\n +      where <class 'decimal.Decimal'> = decimal.Decimal"}, "traceback": [{"path": "tests/test_numbers.py", "lineno": 567, "message": "AssertionError"}], "longrepr": "input_value = '0.110', expected_value = '$0.11'\n\n    @pytest.mark.parametrize('input_value, expected_value', [\n        ('10000', '$10,000.00'),\n        ('1', '$1.00'),\n        ('1.0', '$1.00'),\n        ('1.1', '$1.10'),\n        ('1.11', '$1.11'),\n        ('1.110', '$1.11'),\n        ('1.001', '$1.001'),\n        ('1.00100', '$1.001'),\n        ('01.00100', '$1.001'),\n        ('101.00100', '$101.001'),\n        ('00000', '$0.00'),\n        ('0', '$0.00'),\n        ('0.0', '$0.00'),\n        ('0.1', '$0.10'),\n        ('0.11', '$0.11'),\n        ('0.110', '$0.11'),\n        ('0.001', '$0.001'),\n        ('0.00100', '$0.001'),\n        ('00.00100', '$0.001'),\n        ('000.00100', '$0.001'),\n    ])\n    def test_format_currency_precision(input_value, expected_value):\n        # Test precision conservation.\n>       assert numbers.format_currency(\n            decimal.Decimal(input_value),\n            currency='USD',\n            locale='en_US',\n            decimal_quantization=False,\n        ) == expected_value\nE       AssertionError: assert None == '$0.11'\nE        +  where None = <function format_currency at 0x7fda996088b0>(Decimal('0.110'), currency='USD', locale='en_US', decimal_quantization=False)\nE        +    where <function format_currency at 0x7fda996088b0> = numbers.format_currency\nE        +    and   Decimal('0.110') = <class 'decimal.Decimal'>('0.110')\nE        +      where <class 'decimal.Decimal'> = decimal.Decimal\n\ntests/test_numbers.py:567: AssertionError"}, "teardown": {"duration": 0.00020186999999971533, "outcome": "passed"}}, {"nodeid": "tests/test_numbers.py::test_format_currency_precision[0.001-$0.001]", "lineno": 542, "outcome": "failed", "keywords": ["test_format_currency_precision[0.001-$0.001]", "parametrize", "pytestmark", "0.001-$0.001", "test_numbers.py", "tests", "testbed", ""], "setup": {"duration": 0.0002360050000000946, "outcome": "passed"}, "call": {"duration": 0.000748836000000086, "outcome": "failed", "crash": {"path": "/testbed/tests/test_numbers.py", "lineno": 567, "message": "AssertionError: assert None == '$0.001'\n +  where None = <function format_currency at 0x7fda996088b0>(Decimal('0.001'), currency='USD', locale='en_US', decimal_quantization=False)\n +    where <function format_currency at 0x7fda996088b0> = numbers.format_currency\n +    and   Decimal('0.001') = <class 'decimal.Decimal'>('0.001')\n +      where <class 'decimal.Decimal'> = decimal.Decimal"}, "traceback": [{"path": "tests/test_numbers.py", "lineno": 567, "message": "AssertionError"}], "longrepr": "input_value = '0.001', expected_value = '$0.001'\n\n    @pytest.mark.parametrize('input_value, expected_value', [\n        ('10000', '$10,000.00'),\n        ('1', '$1.00'),\n        ('1.0', '$1.00'),\n        ('1.1', '$1.10'),\n        ('1.11', '$1.11'),\n        ('1.110', '$1.11'),\n        ('1.001', '$1.001'),\n        ('1.00100', '$1.001'),\n        ('01.00100', '$1.001'),\n        ('101.00100', '$101.001'),\n        ('00000', '$0.00'),\n        ('0', '$0.00'),\n        ('0.0', '$0.00'),\n        ('0.1', '$0.10'),\n        ('0.11', '$0.11'),\n        ('0.110', '$0.11'),\n        ('0.001', '$0.001'),\n        ('0.00100', '$0.001'),\n        ('00.00100', '$0.001'),\n        ('000.00100', '$0.001'),\n    ])\n    def test_format_currency_precision(input_value, expected_value):\n        # Test precision conservation.\n>       assert numbers.format_currency(\n            decimal.Decimal(input_value),\n            currency='USD',\n            locale='en_US',\n            decimal_quantization=False,\n        ) == expected_value\nE       AssertionError: assert None == '$0.001'\nE        +  where None = <function format_currency at 0x7fda996088b0>(Decimal('0.001'), currency='USD', locale='en_US', decimal_quantization=False)\nE        +    where <function format_currency at 0x7fda996088b0> = numbers.format_currency\nE        +    and   Decimal('0.001') = <class 'decimal.Decimal'>('0.001')\nE        +      where <class 'decimal.Decimal'> = decimal.Decimal\n\ntests/test_numbers.py:567: AssertionError"}, "teardown": {"duration": 0.0003100120000003592, "outcome": "passed"}}, {"nodeid": "tests/test_numbers.py::test_format_currency_precision[0.00100-$0.001]", "lineno": 542, "outcome": "failed", "keywords": ["test_format_currency_precision[0.00100-$0.001]", "parametrize", "pytestmark", "0.00100-$0.001", "test_numbers.py", "tests", "testbed", ""], "setup": {"duration": 0.000281986999999706, "outcome": "passed"}, "call": {"duration": 0.0003348969999996676, "outcome": "failed", "crash": {"path": "/testbed/tests/test_numbers.py", "lineno": 567, "message": "AssertionError: assert None == '$0.001'\n +  where None = <function format_currency at 0x7fda996088b0>(Decimal('0.00100'), currency='USD', locale='en_US', decimal_quantization=False)\n +    where <function format_currency at 0x7fda996088b0> = numbers.format_currency\n +    and   Decimal('0.00100') = <class 'decimal.Decimal'>('0.00100')\n +      where <class 'decimal.Decimal'> = decimal.Decimal"}, "traceback": [{"path": "tests/test_numbers.py", "lineno": 567, "message": "AssertionError"}], "longrepr": "input_value = '0.00100', expected_value = '$0.001'\n\n    @pytest.mark.parametrize('input_value, expected_value', [\n        ('10000', '$10,000.00'),\n        ('1', '$1.00'),\n        ('1.0', '$1.00'),\n        ('1.1', '$1.10'),\n        ('1.11', '$1.11'),\n        ('1.110', '$1.11'),\n        ('1.001', '$1.001'),\n        ('1.00100', '$1.001'),\n        ('01.00100', '$1.001'),\n        ('101.00100', '$101.001'),\n        ('00000', '$0.00'),\n        ('0', '$0.00'),\n        ('0.0', '$0.00'),\n        ('0.1', '$0.10'),\n        ('0.11', '$0.11'),\n        ('0.110', '$0.11'),\n        ('0.001', '$0.001'),\n        ('0.00100', '$0.001'),\n        ('00.00100', '$0.001'),\n        ('000.00100', '$0.001'),\n    ])\n    def test_format_currency_precision(input_value, expected_value):\n        # Test precision conservation.\n>       assert numbers.format_currency(\n            decimal.Decimal(input_value),\n            currency='USD',\n            locale='en_US',\n            decimal_quantization=False,\n        ) == expected_value\nE       AssertionError: assert None == '$0.001'\nE        +  where None = <function format_currency at 0x7fda996088b0>(Decimal('0.00100'), currency='USD', locale='en_US', decimal_quantization=False)\nE        +    where <function format_currency at 0x7fda996088b0> = numbers.format_currency\nE        +    and   Decimal('0.00100') = <class 'decimal.Decimal'>('0.00100')\nE        +      where <class 'decimal.Decimal'> = decimal.Decimal\n\ntests/test_numbers.py:567: AssertionError"}, "teardown": {"duration": 0.000238073999999866, "outcome": "passed"}}, {"nodeid": "tests/test_numbers.py::test_format_currency_precision[00.00100-$0.001]", "lineno": 542, "outcome": "failed", "keywords": ["test_format_currency_precision[00.00100-$0.001]", "parametrize", "pytestmark", "00.00100-$0.001", "test_numbers.py", "tests", "testbed", ""], "setup": {"duration": 0.0002614069999999913, "outcome": "passed"}, "call": {"duration": 0.00036926699999995094, "outcome": "failed", "crash": {"path": "/testbed/tests/test_numbers.py", "lineno": 567, "message": "AssertionError: assert None == '$0.001'\n +  where None = <function format_currency at 0x7fda996088b0>(Decimal('0.00100'), currency='USD', locale='en_US', decimal_quantization=False)\n +    where <function format_currency at 0x7fda996088b0> = numbers.format_currency\n +    and   Decimal('0.00100') = <class 'decimal.Decimal'>('00.00100')\n +      where <class 'decimal.Decimal'> = decimal.Decimal"}, "traceback": [{"path": "tests/test_numbers.py", "lineno": 567, "message": "AssertionError"}], "longrepr": "input_value = '00.00100', expected_value = '$0.001'\n\n    @pytest.mark.parametrize('input_value, expected_value', [\n        ('10000', '$10,000.00'),\n        ('1', '$1.00'),\n        ('1.0', '$1.00'),\n        ('1.1', '$1.10'),\n        ('1.11', '$1.11'),\n        ('1.110', '$1.11'),\n        ('1.001', '$1.001'),\n        ('1.00100', '$1.001'),\n        ('01.00100', '$1.001'),\n        ('101.00100', '$101.001'),\n        ('00000', '$0.00'),\n        ('0', '$0.00'),\n        ('0.0', '$0.00'),\n        ('0.1', '$0.10'),\n        ('0.11', '$0.11'),\n        ('0.110', '$0.11'),\n        ('0.001', '$0.001'),\n        ('0.00100', '$0.001'),\n        ('00.00100', '$0.001'),\n        ('000.00100', '$0.001'),\n    ])\n    def test_format_currency_precision(input_value, expected_value):\n        # Test precision conservation.\n>       assert numbers.format_currency(\n            decimal.Decimal(input_value),\n            currency='USD',\n            locale='en_US',\n            decimal_quantization=False,\n        ) == expected_value\nE       AssertionError: assert None == '$0.001'\nE        +  where None = <function format_currency at 0x7fda996088b0>(Decimal('0.00100'), currency='USD', locale='en_US', decimal_quantization=False)\nE        +    where <function format_currency at 0x7fda996088b0> = numbers.format_currency\nE        +    and   Decimal('0.00100') = <class 'decimal.Decimal'>('00.00100')\nE        +      where <class 'decimal.Decimal'> = decimal.Decimal\n\ntests/test_numbers.py:567: AssertionError"}, "teardown": {"duration": 0.00024316400000001792, "outcome": "passed"}}, {"nodeid": "tests/test_numbers.py::test_format_currency_precision[000.00100-$0.001]", "lineno": 542, "outcome": "failed", "keywords": ["test_format_currency_precision[000.00100-$0.001]", "parametrize", "pytestmark", "000.00100-$0.001", "test_numbers.py", "tests", "testbed", ""], "setup": {"duration": 0.0002673419999998927, "outcome": "passed"}, "call": {"duration": 0.000324024999999839, "outcome": "failed", "crash": {"path": "/testbed/tests/test_numbers.py", "lineno": 567, "message": "AssertionError: assert None == '$0.001'\n +  where None = <function format_currency at 0x7fda996088b0>(Decimal('0.00100'), currency='USD', locale='en_US', decimal_quantization=False)\n +    where <function format_currency at 0x7fda996088b0> = numbers.format_currency\n +    and   Decimal('0.00100') = <class 'decimal.Decimal'>('000.00100')\n +      where <class 'decimal.Decimal'> = decimal.Decimal"}, "traceback": [{"path": "tests/test_numbers.py", "lineno": 567, "message": "AssertionError"}], "longrepr": "input_value = '000.00100', expected_value = '$0.001'\n\n    @pytest.mark.parametrize('input_value, expected_value', [\n        ('10000', '$10,000.00'),\n        ('1', '$1.00'),\n        ('1.0', '$1.00'),\n        ('1.1', '$1.10'),\n        ('1.11', '$1.11'),\n        ('1.110', '$1.11'),\n        ('1.001', '$1.001'),\n        ('1.00100', '$1.001'),\n        ('01.00100', '$1.001'),\n        ('101.00100', '$101.001'),\n        ('00000', '$0.00'),\n        ('0', '$0.00'),\n        ('0.0', '$0.00'),\n        ('0.1', '$0.10'),\n        ('0.11', '$0.11'),\n        ('0.110', '$0.11'),\n        ('0.001', '$0.001'),\n        ('0.00100', '$0.001'),\n        ('00.00100', '$0.001'),\n        ('000.00100', '$0.001'),\n    ])\n    def test_format_currency_precision(input_value, expected_value):\n        # Test precision conservation.\n>       assert numbers.format_currency(\n            decimal.Decimal(input_value),\n            currency='USD',\n            locale='en_US',\n            decimal_quantization=False,\n        ) == expected_value\nE       AssertionError: assert None == '$0.001'\nE        +  where None = <function format_currency at 0x7fda996088b0>(Decimal('0.00100'), currency='USD', locale='en_US', decimal_quantization=False)\nE        +    where <function format_currency at 0x7fda996088b0> = numbers.format_currency\nE        +    and   Decimal('0.00100') = <class 'decimal.Decimal'>('000.00100')\nE        +      where <class 'decimal.Decimal'> = decimal.Decimal\n\ntests/test_numbers.py:567: AssertionError"}, "teardown": {"duration": 0.000258594999999584, "outcome": "passed"}}, {"nodeid": "tests/test_numbers.py::test_format_currency_quantization", "lineno": 574, "outcome": "failed", "keywords": ["test_format_currency_quantization", "test_numbers.py", "tests", "testbed", ""], "setup": {"duration": 0.0001662449999999538, "outcome": "passed"}, "call": {"duration": 0.00017250799999990463, "outcome": "failed", "crash": {"path": "/testbed/tests/test_numbers.py", "lineno": 577, "message": "TypeError: 'NoneType' object is not iterable"}, "traceback": [{"path": "tests/test_numbers.py", "lineno": 577, "message": "TypeError"}], "longrepr": "def test_format_currency_quantization():\n        # Test all locales.\n>       for locale_code in localedata.locale_identifiers():\nE       TypeError: 'NoneType' object is not iterable\n\ntests/test_numbers.py:577: TypeError"}, "teardown": {"duration": 0.00020140999999984643, "outcome": "passed"}}, {"nodeid": "tests/test_numbers.py::test_format_currency_long_display_name", "lineno": 581, "outcome": "failed", "keywords": ["test_format_currency_long_display_name", "test_numbers.py", "tests", "testbed", ""], "setup": {"duration": 0.00015873900000018537, "outcome": "passed"}, "call": {"duration": 0.0003163320000001413, "outcome": "failed", "crash": {"path": "/testbed/tests/test_numbers.py", "lineno": 583, "message": "AssertionError: assert None == '1,099.98 US dollars'\n +  where None = <function format_currency at 0x7fda996088b0>(1099.98, 'USD', locale='en_US', format_type='name')\n +    where <function format_currency at 0x7fda996088b0> = numbers.format_currency"}, "traceback": [{"path": "tests/test_numbers.py", "lineno": 583, "message": "AssertionError"}], "longrepr": "def test_format_currency_long_display_name():\n>       assert (numbers.format_currency(1099.98, 'USD', locale='en_US', format_type='name')\n                == '1,099.98 US dollars')\nE       AssertionError: assert None == '1,099.98 US dollars'\nE        +  where None = <function format_currency at 0x7fda996088b0>(1099.98, 'USD', locale='en_US', format_type='name')\nE        +    where <function format_currency at 0x7fda996088b0> = numbers.format_currency\n\ntests/test_numbers.py:583: AssertionError"}, "teardown": {"duration": 0.00021609700000002618, "outcome": "passed"}}, {"nodeid": "tests/test_numbers.py::test_format_currency_long_display_name_all", "lineno": 613, "outcome": "failed", "keywords": ["test_format_currency_long_display_name_all", "test_numbers.py", "tests", "testbed", ""], "setup": {"duration": 0.00017234599999982336, "outcome": "passed"}, "call": {"duration": 0.00016919800000003704, "outcome": "failed", "crash": {"path": "/testbed/tests/test_numbers.py", "lineno": 615, "message": "TypeError: 'NoneType' object is not iterable"}, "traceback": [{"path": "tests/test_numbers.py", "lineno": 615, "message": "TypeError"}], "longrepr": "def test_format_currency_long_display_name_all():\n>       for locale_code in localedata.locale_identifiers():\nE       TypeError: 'NoneType' object is not iterable\n\ntests/test_numbers.py:615: TypeError"}, "teardown": {"duration": 0.00020059899999980146, "outcome": "passed"}}, {"nodeid": "tests/test_numbers.py::test_format_currency_long_display_name_custom_format", "lineno": 621, "outcome": "failed", "keywords": ["test_format_currency_long_display_name_custom_format", "test_numbers.py", "tests", "testbed", ""], "setup": {"duration": 0.00015400000000020952, "outcome": "passed"}, "call": {"duration": 0.0003323489999997875, "outcome": "failed", "crash": {"path": "/testbed/tests/test_numbers.py", "lineno": 623, "message": "AssertionError: assert None == '1099.98 US dollars'\n +  where None = <function format_currency at 0x7fda996088b0>(1099.98, 'USD', locale='en_US', format_type='name', format='##0')\n +    where <function format_currency at 0x7fda996088b0> = numbers.format_currency"}, "traceback": [{"path": "tests/test_numbers.py", "lineno": 623, "message": "AssertionError"}], "longrepr": "def test_format_currency_long_display_name_custom_format():\n>       assert (numbers.format_currency(1099.98, 'USD', locale='en_US',\n                                        format_type='name', format='##0')\n                == '1099.98 US dollars')\nE       AssertionError: assert None == '1099.98 US dollars'\nE        +  where None = <function format_currency at 0x7fda996088b0>(1099.98, 'USD', locale='en_US', format_type='name', format='##0')\nE        +    where <function format_currency at 0x7fda996088b0> = numbers.format_currency\n\ntests/test_numbers.py:623: AssertionError"}, "teardown": {"duration": 0.00026038699999997306, "outcome": "passed"}}, {"nodeid": "tests/test_numbers.py::test_format_percent", "lineno": 631, "outcome": "failed", "keywords": ["test_format_percent", "test_numbers.py", "tests", "testbed", ""], "setup": {"duration": 0.00016775200000029855, "outcome": "passed"}, "call": {"duration": 0.00030653399999991393, "outcome": "failed", "crash": {"path": "/testbed/tests/test_numbers.py", "lineno": 633, "message": "AssertionError: assert None == '34%'\n +  where None = <function format_percent at 0x7fda996089d0>(0.34, locale='en_US')\n +    where <function format_percent at 0x7fda996089d0> = numbers.format_percent"}, "traceback": [{"path": "tests/test_numbers.py", "lineno": 633, "message": "AssertionError"}], "longrepr": "def test_format_percent():\n>       assert numbers.format_percent(0.34, locale='en_US') == '34%'\nE       AssertionError: assert None == '34%'\nE        +  where None = <function format_percent at 0x7fda996089d0>(0.34, locale='en_US')\nE        +    where <function format_percent at 0x7fda996089d0> = numbers.format_percent\n\ntests/test_numbers.py:633: AssertionError"}, "teardown": {"duration": 0.00019818799999971048, "outcome": "passed"}}, {"nodeid": "tests/test_numbers.py::test_format_percent_precision[100-10,000%]", "lineno": 646, "outcome": "failed", "keywords": ["test_format_percent_precision[100-10,000%]", "parametrize", "pytestmark", "100-10,000%", "test_numbers.py", "tests", "testbed", ""], "setup": {"duration": 0.00025747500000017354, "outcome": "passed"}, "call": {"duration": 0.00032295900000001154, "outcome": "failed", "crash": {"path": "/testbed/tests/test_numbers.py", "lineno": 670, "message": "AssertionError: assert None == '10,000%'\n +  where None = <function format_percent at 0x7fda996089d0>(Decimal('100'), locale='en_US', decimal_quantization=False)\n +    where <function format_percent at 0x7fda996089d0> = numbers.format_percent\n +    and   Decimal('100') = <class 'decimal.Decimal'>('100')\n +      where <class 'decimal.Decimal'> = decimal.Decimal"}, "traceback": [{"path": "tests/test_numbers.py", "lineno": 670, "message": "AssertionError"}], "longrepr": "input_value = '100', expected_value = '10,000%'\n\n    @pytest.mark.parametrize('input_value, expected_value', [\n        ('100', '10,000%'),\n        ('0.01', '1%'),\n        ('0.010', '1%'),\n        ('0.011', '1.1%'),\n        ('0.0111', '1.11%'),\n        ('0.01110', '1.11%'),\n        ('0.01001', '1.001%'),\n        ('0.0100100', '1.001%'),\n        ('0.010100100', '1.01001%'),\n        ('0.000000', '0%'),\n        ('0', '0%'),\n        ('0.00', '0%'),\n        ('0.01', '1%'),\n        ('0.011', '1.1%'),\n        ('0.0110', '1.1%'),\n        ('0.0001', '0.01%'),\n        ('0.000100', '0.01%'),\n        ('0.0000100', '0.001%'),\n        ('0.00000100', '0.0001%'),\n    ])\n    def test_format_percent_precision(input_value, expected_value):\n        # Test precision conservation.\n>       assert numbers.format_percent(\n            decimal.Decimal(input_value), locale='en_US', decimal_quantization=False) == expected_value\nE       AssertionError: assert None == '10,000%'\nE        +  where None = <function format_percent at 0x7fda996089d0>(Decimal('100'), locale='en_US', decimal_quantization=False)\nE        +    where <function format_percent at 0x7fda996089d0> = numbers.format_percent\nE        +    and   Decimal('100') = <class 'decimal.Decimal'>('100')\nE        +      where <class 'decimal.Decimal'> = decimal.Decimal\n\ntests/test_numbers.py:670: AssertionError"}, "teardown": {"duration": 0.00021916399999977187, "outcome": "passed"}}, {"nodeid": "tests/test_numbers.py::test_format_percent_precision[0.01-1%0]", "lineno": 646, "outcome": "failed", "keywords": ["test_format_percent_precision[0.01-1%0]", "parametrize", "pytestmark", "0.01-1%0", "test_numbers.py", "tests", "testbed", ""], "setup": {"duration": 0.0002445010000000636, "outcome": "passed"}, "call": {"duration": 0.0003244900000001216, "outcome": "failed", "crash": {"path": "/testbed/tests/test_numbers.py", "lineno": 670, "message": "AssertionError: assert None == '1%'\n +  where None = <function format_percent at 0x7fda996089d0>(Decimal('0.01'), locale='en_US', decimal_quantization=False)\n +    where <function format_percent at 0x7fda996089d0> = numbers.format_percent\n +    and   Decimal('0.01') = <class 'decimal.Decimal'>('0.01')\n +      where <class 'decimal.Decimal'> = decimal.Decimal"}, "traceback": [{"path": "tests/test_numbers.py", "lineno": 670, "message": "AssertionError"}], "longrepr": "input_value = '0.01', expected_value = '1%'\n\n    @pytest.mark.parametrize('input_value, expected_value', [\n        ('100', '10,000%'),\n        ('0.01', '1%'),\n        ('0.010', '1%'),\n        ('0.011', '1.1%'),\n        ('0.0111', '1.11%'),\n        ('0.01110', '1.11%'),\n        ('0.01001', '1.001%'),\n        ('0.0100100', '1.001%'),\n        ('0.010100100', '1.01001%'),\n        ('0.000000', '0%'),\n        ('0', '0%'),\n        ('0.00', '0%'),\n        ('0.01', '1%'),\n        ('0.011', '1.1%'),\n        ('0.0110', '1.1%'),\n        ('0.0001', '0.01%'),\n        ('0.000100', '0.01%'),\n        ('0.0000100', '0.001%'),\n        ('0.00000100', '0.0001%'),\n    ])\n    def test_format_percent_precision(input_value, expected_value):\n        # Test precision conservation.\n>       assert numbers.format_percent(\n            decimal.Decimal(input_value), locale='en_US', decimal_quantization=False) == expected_value\nE       AssertionError: assert None == '1%'\nE        +  where None = <function format_percent at 0x7fda996089d0>(Decimal('0.01'), locale='en_US', decimal_quantization=False)\nE        +    where <function format_percent at 0x7fda996089d0> = numbers.format_percent\nE        +    and   Decimal('0.01') = <class 'decimal.Decimal'>('0.01')\nE        +      where <class 'decimal.Decimal'> = decimal.Decimal\n\ntests/test_numbers.py:670: AssertionError"}, "teardown": {"duration": 0.000213798999999959, "outcome": "passed"}}, {"nodeid": "tests/test_numbers.py::test_format_percent_precision[0.010-1%]", "lineno": 646, "outcome": "failed", "keywords": ["test_format_percent_precision[0.010-1%]", "parametrize", "pytestmark", "0.010-1%", "test_numbers.py", "tests", "testbed", ""], "setup": {"duration": 0.0002365380000002304, "outcome": "passed"}, "call": {"duration": 0.0003086759999999522, "outcome": "failed", "crash": {"path": "/testbed/tests/test_numbers.py", "lineno": 670, "message": "AssertionError: assert None == '1%'\n +  where None = <function format_percent at 0x7fda996089d0>(Decimal('0.010'), locale='en_US', decimal_quantization=False)\n +    where <function format_percent at 0x7fda996089d0> = numbers.format_percent\n +    and   Decimal('0.010') = <class 'decimal.Decimal'>('0.010')\n +      where <class 'decimal.Decimal'> = decimal.Decimal"}, "traceback": [{"path": "tests/test_numbers.py", "lineno": 670, "message": "AssertionError"}], "longrepr": "input_value = '0.010', expected_value = '1%'\n\n    @pytest.mark.parametrize('input_value, expected_value', [\n        ('100', '10,000%'),\n        ('0.01', '1%'),\n        ('0.010', '1%'),\n        ('0.011', '1.1%'),\n        ('0.0111', '1.11%'),\n        ('0.01110', '1.11%'),\n        ('0.01001', '1.001%'),\n        ('0.0100100', '1.001%'),\n        ('0.010100100', '1.01001%'),\n        ('0.000000', '0%'),\n        ('0', '0%'),\n        ('0.00', '0%'),\n        ('0.01', '1%'),\n        ('0.011', '1.1%'),\n        ('0.0110', '1.1%'),\n        ('0.0001', '0.01%'),\n        ('0.000100', '0.01%'),\n        ('0.0000100', '0.001%'),\n        ('0.00000100', '0.0001%'),\n    ])\n    def test_format_percent_precision(input_value, expected_value):\n        # Test precision conservation.\n>       assert numbers.format_percent(\n            decimal.Decimal(input_value), locale='en_US', decimal_quantization=False) == expected_value\nE       AssertionError: assert None == '1%'\nE        +  where None = <function format_percent at 0x7fda996089d0>(Decimal('0.010'), locale='en_US', decimal_quantization=False)\nE        +    where <function format_percent at 0x7fda996089d0> = numbers.format_percent\nE        +    and   Decimal('0.010') = <class 'decimal.Decimal'>('0.010')\nE        +      where <class 'decimal.Decimal'> = decimal.Decimal\n\ntests/test_numbers.py:670: AssertionError"}, "teardown": {"duration": 0.0003067059999999344, "outcome": "passed"}}, {"nodeid": "tests/test_numbers.py::test_format_percent_precision[0.011-1.1%0]", "lineno": 646, "outcome": "failed", "keywords": ["test_format_percent_precision[0.011-1.1%0]", "parametrize", "pytestmark", "0.011-1.1%0", "test_numbers.py", "tests", "testbed", ""], "setup": {"duration": 0.0002620260000001373, "outcome": "passed"}, "call": {"duration": 0.0003515769999999918, "outcome": "failed", "crash": {"path": "/testbed/tests/test_numbers.py", "lineno": 670, "message": "AssertionError: assert None == '1.1%'\n +  where None = <function format_percent at 0x7fda996089d0>(Decimal('0.011'), locale='en_US', decimal_quantization=False)\n +    where <function format_percent at 0x7fda996089d0> = numbers.format_percent\n +    and   Decimal('0.011') = <class 'decimal.Decimal'>('0.011')\n +      where <class 'decimal.Decimal'> = decimal.Decimal"}, "traceback": [{"path": "tests/test_numbers.py", "lineno": 670, "message": "AssertionError"}], "longrepr": "input_value = '0.011', expected_value = '1.1%'\n\n    @pytest.mark.parametrize('input_value, expected_value', [\n        ('100', '10,000%'),\n        ('0.01', '1%'),\n        ('0.010', '1%'),\n        ('0.011', '1.1%'),\n        ('0.0111', '1.11%'),\n        ('0.01110', '1.11%'),\n        ('0.01001', '1.001%'),\n        ('0.0100100', '1.001%'),\n        ('0.010100100', '1.01001%'),\n        ('0.000000', '0%'),\n        ('0', '0%'),\n        ('0.00', '0%'),\n        ('0.01', '1%'),\n        ('0.011', '1.1%'),\n        ('0.0110', '1.1%'),\n        ('0.0001', '0.01%'),\n        ('0.000100', '0.01%'),\n        ('0.0000100', '0.001%'),\n        ('0.00000100', '0.0001%'),\n    ])\n    def test_format_percent_precision(input_value, expected_value):\n        # Test precision conservation.\n>       assert numbers.format_percent(\n            decimal.Decimal(input_value), locale='en_US', decimal_quantization=False) == expected_value\nE       AssertionError: assert None == '1.1%'\nE        +  where None = <function format_percent at 0x7fda996089d0>(Decimal('0.011'), locale='en_US', decimal_quantization=False)\nE        +    where <function format_percent at 0x7fda996089d0> = numbers.format_percent\nE        +    and   Decimal('0.011') = <class 'decimal.Decimal'>('0.011')\nE        +      where <class 'decimal.Decimal'> = decimal.Decimal\n\ntests/test_numbers.py:670: AssertionError"}, "teardown": {"duration": 0.00031265500000010604, "outcome": "passed"}}, {"nodeid": "tests/test_numbers.py::test_format_percent_precision[0.0111-1.11%]", "lineno": 646, "outcome": "failed", "keywords": ["test_format_percent_precision[0.0111-1.11%]", "parametrize", "pytestmark", "0.0111-1.11%", "test_numbers.py", "tests", "testbed", ""], "setup": {"duration": 0.00027069800000001365, "outcome": "passed"}, "call": {"duration": 0.00034102399999991206, "outcome": "failed", "crash": {"path": "/testbed/tests/test_numbers.py", "lineno": 670, "message": "AssertionError: assert None == '1.11%'\n +  where None = <function format_percent at 0x7fda996089d0>(Decimal('0.0111'), locale='en_US', decimal_quantization=False)\n +    where <function format_percent at 0x7fda996089d0> = numbers.format_percent\n +    and   Decimal('0.0111') = <class 'decimal.Decimal'>('0.0111')\n +      where <class 'decimal.Decimal'> = decimal.Decimal"}, "traceback": [{"path": "tests/test_numbers.py", "lineno": 670, "message": "AssertionError"}], "longrepr": "input_value = '0.0111', expected_value = '1.11%'\n\n    @pytest.mark.parametrize('input_value, expected_value', [\n        ('100', '10,000%'),\n        ('0.01', '1%'),\n        ('0.010', '1%'),\n        ('0.011', '1.1%'),\n        ('0.0111', '1.11%'),\n        ('0.01110', '1.11%'),\n        ('0.01001', '1.001%'),\n        ('0.0100100', '1.001%'),\n        ('0.010100100', '1.01001%'),\n        ('0.000000', '0%'),\n        ('0', '0%'),\n        ('0.00', '0%'),\n        ('0.01', '1%'),\n        ('0.011', '1.1%'),\n        ('0.0110', '1.1%'),\n        ('0.0001', '0.01%'),\n        ('0.000100', '0.01%'),\n        ('0.0000100', '0.001%'),\n        ('0.00000100', '0.0001%'),\n    ])\n    def test_format_percent_precision(input_value, expected_value):\n        # Test precision conservation.\n>       assert numbers.format_percent(\n            decimal.Decimal(input_value), locale='en_US', decimal_quantization=False) == expected_value\nE       AssertionError: assert None == '1.11%'\nE        +  where None = <function format_percent at 0x7fda996089d0>(Decimal('0.0111'), locale='en_US', decimal_quantization=False)\nE        +    where <function format_percent at 0x7fda996089d0> = numbers.format_percent\nE        +    and   Decimal('0.0111') = <class 'decimal.Decimal'>('0.0111')\nE        +      where <class 'decimal.Decimal'> = decimal.Decimal\n\ntests/test_numbers.py:670: AssertionError"}, "teardown": {"duration": 0.00026250999999977154, "outcome": "passed"}}, {"nodeid": "tests/test_numbers.py::test_format_percent_precision[0.01110-1.11%]", "lineno": 646, "outcome": "failed", "keywords": ["test_format_percent_precision[0.01110-1.11%]", "parametrize", "pytestmark", "0.01110-1.11%", "test_numbers.py", "tests", "testbed", ""], "setup": {"duration": 0.00027463800000004923, "outcome": "passed"}, "call": {"duration": 0.00033710000000031215, "outcome": "failed", "crash": {"path": "/testbed/tests/test_numbers.py", "lineno": 670, "message": "AssertionError: assert None == '1.11%'\n +  where None = <function format_percent at 0x7fda996089d0>(Decimal('0.01110'), locale='en_US', decimal_quantization=False)\n +    where <function format_percent at 0x7fda996089d0> = numbers.format_percent\n +    and   Decimal('0.01110') = <class 'decimal.Decimal'>('0.01110')\n +      where <class 'decimal.Decimal'> = decimal.Decimal"}, "traceback": [{"path": "tests/test_numbers.py", "lineno": 670, "message": "AssertionError"}], "longrepr": "input_value = '0.01110', expected_value = '1.11%'\n\n    @pytest.mark.parametrize('input_value, expected_value', [\n        ('100', '10,000%'),\n        ('0.01', '1%'),\n        ('0.010', '1%'),\n        ('0.011', '1.1%'),\n        ('0.0111', '1.11%'),\n        ('0.01110', '1.11%'),\n        ('0.01001', '1.001%'),\n        ('0.0100100', '1.001%'),\n        ('0.010100100', '1.01001%'),\n        ('0.000000', '0%'),\n        ('0', '0%'),\n        ('0.00', '0%'),\n        ('0.01', '1%'),\n        ('0.011', '1.1%'),\n        ('0.0110', '1.1%'),\n        ('0.0001', '0.01%'),\n        ('0.000100', '0.01%'),\n        ('0.0000100', '0.001%'),\n        ('0.00000100', '0.0001%'),\n    ])\n    def test_format_percent_precision(input_value, expected_value):\n        # Test precision conservation.\n>       assert numbers.format_percent(\n            decimal.Decimal(input_value), locale='en_US', decimal_quantization=False) == expected_value\nE       AssertionError: assert None == '1.11%'\nE        +  where None = <function format_percent at 0x7fda996089d0>(Decimal('0.01110'), locale='en_US', decimal_quantization=False)\nE        +    where <function format_percent at 0x7fda996089d0> = numbers.format_percent\nE        +    and   Decimal('0.01110') = <class 'decimal.Decimal'>('0.01110')\nE        +      where <class 'decimal.Decimal'> = decimal.Decimal\n\ntests/test_numbers.py:670: AssertionError"}, "teardown": {"duration": 0.00025815500000003766, "outcome": "passed"}}, {"nodeid": "tests/test_numbers.py::test_format_percent_precision[0.01001-1.001%]", "lineno": 646, "outcome": "failed", "keywords": ["test_format_percent_precision[0.01001-1.001%]", "parametrize", "pytestmark", "0.01001-1.001%", "test_numbers.py", "tests", "testbed", ""], "setup": {"duration": 0.0002590719999999713, "outcome": "passed"}, "call": {"duration": 0.00031777799999987977, "outcome": "failed", "crash": {"path": "/testbed/tests/test_numbers.py", "lineno": 670, "message": "AssertionError: assert None == '1.001%'\n +  where None = <function format_percent at 0x7fda996089d0>(Decimal('0.01001'), locale='en_US', decimal_quantization=False)\n +    where <function format_percent at 0x7fda996089d0> = numbers.format_percent\n +    and   Decimal('0.01001') = <class 'decimal.Decimal'>('0.01001')\n +      where <class 'decimal.Decimal'> = decimal.Decimal"}, "traceback": [{"path": "tests/test_numbers.py", "lineno": 670, "message": "AssertionError"}], "longrepr": "input_value = '0.01001', expected_value = '1.001%'\n\n    @pytest.mark.parametrize('input_value, expected_value', [\n        ('100', '10,000%'),\n        ('0.01', '1%'),\n        ('0.010', '1%'),\n        ('0.011', '1.1%'),\n        ('0.0111', '1.11%'),\n        ('0.01110', '1.11%'),\n        ('0.01001', '1.001%'),\n        ('0.0100100', '1.001%'),\n        ('0.010100100', '1.01001%'),\n        ('0.000000', '0%'),\n        ('0', '0%'),\n        ('0.00', '0%'),\n        ('0.01', '1%'),\n        ('0.011', '1.1%'),\n        ('0.0110', '1.1%'),\n        ('0.0001', '0.01%'),\n        ('0.000100', '0.01%'),\n        ('0.0000100', '0.001%'),\n        ('0.00000100', '0.0001%'),\n    ])\n    def test_format_percent_precision(input_value, expected_value):\n        # Test precision conservation.\n>       assert numbers.format_percent(\n            decimal.Decimal(input_value), locale='en_US', decimal_quantization=False) == expected_value\nE       AssertionError: assert None == '1.001%'\nE        +  where None = <function format_percent at 0x7fda996089d0>(Decimal('0.01001'), locale='en_US', decimal_quantization=False)\nE        +    where <function format_percent at 0x7fda996089d0> = numbers.format_percent\nE        +    and   Decimal('0.01001') = <class 'decimal.Decimal'>('0.01001')\nE        +      where <class 'decimal.Decimal'> = decimal.Decimal\n\ntests/test_numbers.py:670: AssertionError"}, "teardown": {"duration": 0.00021334199999989423, "outcome": "passed"}}, {"nodeid": "tests/test_numbers.py::test_format_percent_precision[0.0100100-1.001%]", "lineno": 646, "outcome": "failed", "keywords": ["test_format_percent_precision[0.0100100-1.001%]", "parametrize", "pytestmark", "0.0100100-1.001%", "test_numbers.py", "tests", "testbed", ""], "setup": {"duration": 0.00027026399999963147, "outcome": "passed"}, "call": {"duration": 0.00030332499999996543, "outcome": "failed", "crash": {"path": "/testbed/tests/test_numbers.py", "lineno": 670, "message": "AssertionError: assert None == '1.001%'\n +  where None = <function format_percent at 0x7fda996089d0>(Decimal('0.0100100'), locale='en_US', decimal_quantization=False)\n +    where <function format_percent at 0x7fda996089d0> = numbers.format_percent\n +    and   Decimal('0.0100100') = <class 'decimal.Decimal'>('0.0100100')\n +      where <class 'decimal.Decimal'> = decimal.Decimal"}, "traceback": [{"path": "tests/test_numbers.py", "lineno": 670, "message": "AssertionError"}], "longrepr": "input_value = '0.0100100', expected_value = '1.001%'\n\n    @pytest.mark.parametrize('input_value, expected_value', [\n        ('100', '10,000%'),\n        ('0.01', '1%'),\n        ('0.010', '1%'),\n        ('0.011', '1.1%'),\n        ('0.0111', '1.11%'),\n        ('0.01110', '1.11%'),\n        ('0.01001', '1.001%'),\n        ('0.0100100', '1.001%'),\n        ('0.010100100', '1.01001%'),\n        ('0.000000', '0%'),\n        ('0', '0%'),\n        ('0.00', '0%'),\n        ('0.01', '1%'),\n        ('0.011', '1.1%'),\n        ('0.0110', '1.1%'),\n        ('0.0001', '0.01%'),\n        ('0.000100', '0.01%'),\n        ('0.0000100', '0.001%'),\n        ('0.00000100', '0.0001%'),\n    ])\n    def test_format_percent_precision(input_value, expected_value):\n        # Test precision conservation.\n>       assert numbers.format_percent(\n            decimal.Decimal(input_value), locale='en_US', decimal_quantization=False) == expected_value\nE       AssertionError: assert None == '1.001%'\nE        +  where None = <function format_percent at 0x7fda996089d0>(Decimal('0.0100100'), locale='en_US', decimal_quantization=False)\nE        +    where <function format_percent at 0x7fda996089d0> = numbers.format_percent\nE        +    and   Decimal('0.0100100') = <class 'decimal.Decimal'>('0.0100100')\nE        +      where <class 'decimal.Decimal'> = decimal.Decimal\n\ntests/test_numbers.py:670: AssertionError"}, "teardown": {"duration": 0.0002041629999998129, "outcome": "passed"}}, {"nodeid": "tests/test_numbers.py::test_format_percent_precision[0.010100100-1.01001%]", "lineno": 646, "outcome": "failed", "keywords": ["test_format_percent_precision[0.010100100-1.01001%]", "parametrize", "pytestmark", "0.010100100-1.01001%", "test_numbers.py", "tests", "testbed", ""], "setup": {"duration": 0.00024175099999990124, "outcome": "passed"}, "call": {"duration": 0.0002876569999998857, "outcome": "failed", "crash": {"path": "/testbed/tests/test_numbers.py", "lineno": 670, "message": "AssertionError: assert None == '1.01001%'\n +  where None = <function format_percent at 0x7fda996089d0>(Decimal('0.010100100'), locale='en_US', decimal_quantization=False)\n +    where <function format_percent at 0x7fda996089d0> = numbers.format_percent\n +    and   Decimal('0.010100100') = <class 'decimal.Decimal'>('0.010100100')\n +      where <class 'decimal.Decimal'> = decimal.Decimal"}, "traceback": [{"path": "tests/test_numbers.py", "lineno": 670, "message": "AssertionError"}], "longrepr": "input_value = '0.010100100', expected_value = '1.01001%'\n\n    @pytest.mark.parametrize('input_value, expected_value', [\n        ('100', '10,000%'),\n        ('0.01', '1%'),\n        ('0.010', '1%'),\n        ('0.011', '1.1%'),\n        ('0.0111', '1.11%'),\n        ('0.01110', '1.11%'),\n        ('0.01001', '1.001%'),\n        ('0.0100100', '1.001%'),\n        ('0.010100100', '1.01001%'),\n        ('0.000000', '0%'),\n        ('0', '0%'),\n        ('0.00', '0%'),\n        ('0.01', '1%'),\n        ('0.011', '1.1%'),\n        ('0.0110', '1.1%'),\n        ('0.0001', '0.01%'),\n        ('0.000100', '0.01%'),\n        ('0.0000100', '0.001%'),\n        ('0.00000100', '0.0001%'),\n    ])\n    def test_format_percent_precision(input_value, expected_value):\n        # Test precision conservation.\n>       assert numbers.format_percent(\n            decimal.Decimal(input_value), locale='en_US', decimal_quantization=False) == expected_value\nE       AssertionError: assert None == '1.01001%'\nE        +  where None = <function format_percent at 0x7fda996089d0>(Decimal('0.010100100'), locale='en_US', decimal_quantization=False)\nE        +    where <function format_percent at 0x7fda996089d0> = numbers.format_percent\nE        +    and   Decimal('0.010100100') = <class 'decimal.Decimal'>('0.010100100')\nE        +      where <class 'decimal.Decimal'> = decimal.Decimal\n\ntests/test_numbers.py:670: AssertionError"}, "teardown": {"duration": 0.0002055670000000731, "outcome": "passed"}}, {"nodeid": "tests/test_numbers.py::test_format_percent_precision[0.000000-0%]", "lineno": 646, "outcome": "failed", "keywords": ["test_format_percent_precision[0.000000-0%]", "parametrize", "pytestmark", "0.000000-0%", "test_numbers.py", "tests", "testbed", ""], "setup": {"duration": 0.00024185600000015128, "outcome": "passed"}, "call": {"duration": 0.00029040300000016117, "outcome": "failed", "crash": {"path": "/testbed/tests/test_numbers.py", "lineno": 670, "message": "AssertionError: assert None == '0%'\n +  where None = <function format_percent at 0x7fda996089d0>(Decimal('0.000000'), locale='en_US', decimal_quantization=False)\n +    where <function format_percent at 0x7fda996089d0> = numbers.format_percent\n +    and   Decimal('0.000000') = <class 'decimal.Decimal'>('0.000000')\n +      where <class 'decimal.Decimal'> = decimal.Decimal"}, "traceback": [{"path": "tests/test_numbers.py", "lineno": 670, "message": "AssertionError"}], "longrepr": "input_value = '0.000000', expected_value = '0%'\n\n    @pytest.mark.parametrize('input_value, expected_value', [\n        ('100', '10,000%'),\n        ('0.01', '1%'),\n        ('0.010', '1%'),\n        ('0.011', '1.1%'),\n        ('0.0111', '1.11%'),\n        ('0.01110', '1.11%'),\n        ('0.01001', '1.001%'),\n        ('0.0100100', '1.001%'),\n        ('0.010100100', '1.01001%'),\n        ('0.000000', '0%'),\n        ('0', '0%'),\n        ('0.00', '0%'),\n        ('0.01', '1%'),\n        ('0.011', '1.1%'),\n        ('0.0110', '1.1%'),\n        ('0.0001', '0.01%'),\n        ('0.000100', '0.01%'),\n        ('0.0000100', '0.001%'),\n        ('0.00000100', '0.0001%'),\n    ])\n    def test_format_percent_precision(input_value, expected_value):\n        # Test precision conservation.\n>       assert numbers.format_percent(\n            decimal.Decimal(input_value), locale='en_US', decimal_quantization=False) == expected_value\nE       AssertionError: assert None == '0%'\nE        +  where None = <function format_percent at 0x7fda996089d0>(Decimal('0.000000'), locale='en_US', decimal_quantization=False)\nE        +    where <function format_percent at 0x7fda996089d0> = numbers.format_percent\nE        +    and   Decimal('0.000000') = <class 'decimal.Decimal'>('0.000000')\nE        +      where <class 'decimal.Decimal'> = decimal.Decimal\n\ntests/test_numbers.py:670: AssertionError"}, "teardown": {"duration": 0.00020448699999997544, "outcome": "passed"}}, {"nodeid": "tests/test_numbers.py::test_format_percent_precision[0-0%]", "lineno": 646, "outcome": "failed", "keywords": ["test_format_percent_precision[0-0%]", "parametrize", "pytestmark", "0-0%", "test_numbers.py", "tests", "testbed", ""], "setup": {"duration": 0.0002466109999996746, "outcome": "passed"}, "call": {"duration": 0.0002905740000000989, "outcome": "failed", "crash": {"path": "/testbed/tests/test_numbers.py", "lineno": 670, "message": "AssertionError: assert None == '0%'\n +  where None = <function format_percent at 0x7fda996089d0>(Decimal('0'), locale='en_US', decimal_quantization=False)\n +    where <function format_percent at 0x7fda996089d0> = numbers.format_percent\n +    and   Decimal('0') = <class 'decimal.Decimal'>('0')\n +      where <class 'decimal.Decimal'> = decimal.Decimal"}, "traceback": [{"path": "tests/test_numbers.py", "lineno": 670, "message": "AssertionError"}], "longrepr": "input_value = '0', expected_value = '0%'\n\n    @pytest.mark.parametrize('input_value, expected_value', [\n        ('100', '10,000%'),\n        ('0.01', '1%'),\n        ('0.010', '1%'),\n        ('0.011', '1.1%'),\n        ('0.0111', '1.11%'),\n        ('0.01110', '1.11%'),\n        ('0.01001', '1.001%'),\n        ('0.0100100', '1.001%'),\n        ('0.010100100', '1.01001%'),\n        ('0.000000', '0%'),\n        ('0', '0%'),\n        ('0.00', '0%'),\n        ('0.01', '1%'),\n        ('0.011', '1.1%'),\n        ('0.0110', '1.1%'),\n        ('0.0001', '0.01%'),\n        ('0.000100', '0.01%'),\n        ('0.0000100', '0.001%'),\n        ('0.00000100', '0.0001%'),\n    ])\n    def test_format_percent_precision(input_value, expected_value):\n        # Test precision conservation.\n>       assert numbers.format_percent(\n            decimal.Decimal(input_value), locale='en_US', decimal_quantization=False) == expected_value\nE       AssertionError: assert None == '0%'\nE        +  where None = <function format_percent at 0x7fda996089d0>(Decimal('0'), locale='en_US', decimal_quantization=False)\nE        +    where <function format_percent at 0x7fda996089d0> = numbers.format_percent\nE        +    and   Decimal('0') = <class 'decimal.Decimal'>('0')\nE        +      where <class 'decimal.Decimal'> = decimal.Decimal\n\ntests/test_numbers.py:670: AssertionError"}, "teardown": {"duration": 0.0002042690000001457, "outcome": "passed"}}, {"nodeid": "tests/test_numbers.py::test_format_percent_precision[0.00-0%]", "lineno": 646, "outcome": "failed", "keywords": ["test_format_percent_precision[0.00-0%]", "parametrize", "pytestmark", "0.00-0%", "test_numbers.py", "tests", "testbed", ""], "setup": {"duration": 0.0002252170000001108, "outcome": "passed"}, "call": {"duration": 0.0002988129999996758, "outcome": "failed", "crash": {"path": "/testbed/tests/test_numbers.py", "lineno": 670, "message": "AssertionError: assert None == '0%'\n +  where None = <function format_percent at 0x7fda996089d0>(Decimal('0.00'), locale='en_US', decimal_quantization=False)\n +    where <function format_percent at 0x7fda996089d0> = numbers.format_percent\n +    and   Decimal('0.00') = <class 'decimal.Decimal'>('0.00')\n +      where <class 'decimal.Decimal'> = decimal.Decimal"}, "traceback": [{"path": "tests/test_numbers.py", "lineno": 670, "message": "AssertionError"}], "longrepr": "input_value = '0.00', expected_value = '0%'\n\n    @pytest.mark.parametrize('input_value, expected_value', [\n        ('100', '10,000%'),\n        ('0.01', '1%'),\n        ('0.010', '1%'),\n        ('0.011', '1.1%'),\n        ('0.0111', '1.11%'),\n        ('0.01110', '1.11%'),\n        ('0.01001', '1.001%'),\n        ('0.0100100', '1.001%'),\n        ('0.010100100', '1.01001%'),\n        ('0.000000', '0%'),\n        ('0', '0%'),\n        ('0.00', '0%'),\n        ('0.01', '1%'),\n        ('0.011', '1.1%'),\n        ('0.0110', '1.1%'),\n        ('0.0001', '0.01%'),\n        ('0.000100', '0.01%'),\n        ('0.0000100', '0.001%'),\n        ('0.00000100', '0.0001%'),\n    ])\n    def test_format_percent_precision(input_value, expected_value):\n        # Test precision conservation.\n>       assert numbers.format_percent(\n            decimal.Decimal(input_value), locale='en_US', decimal_quantization=False) == expected_value\nE       AssertionError: assert None == '0%'\nE        +  where None = <function format_percent at 0x7fda996089d0>(Decimal('0.00'), locale='en_US', decimal_quantization=False)\nE        +    where <function format_percent at 0x7fda996089d0> = numbers.format_percent\nE        +    and   Decimal('0.00') = <class 'decimal.Decimal'>('0.00')\nE        +      where <class 'decimal.Decimal'> = decimal.Decimal\n\ntests/test_numbers.py:670: AssertionError"}, "teardown": {"duration": 0.00020247399999995253, "outcome": "passed"}}, {"nodeid": "tests/test_numbers.py::test_format_percent_precision[0.01-1%1]", "lineno": 646, "outcome": "failed", "keywords": ["test_format_percent_precision[0.01-1%1]", "parametrize", "pytestmark", "0.01-1%1", "test_numbers.py", "tests", "testbed", ""], "setup": {"duration": 0.00022871999999996007, "outcome": "passed"}, "call": {"duration": 0.00030155600000014715, "outcome": "failed", "crash": {"path": "/testbed/tests/test_numbers.py", "lineno": 670, "message": "AssertionError: assert None == '1%'\n +  where None = <function format_percent at 0x7fda996089d0>(Decimal('0.01'), locale='en_US', decimal_quantization=False)\n +    where <function format_percent at 0x7fda996089d0> = numbers.format_percent\n +    and   Decimal('0.01') = <class 'decimal.Decimal'>('0.01')\n +      where <class 'decimal.Decimal'> = decimal.Decimal"}, "traceback": [{"path": "tests/test_numbers.py", "lineno": 670, "message": "AssertionError"}], "longrepr": "input_value = '0.01', expected_value = '1%'\n\n    @pytest.mark.parametrize('input_value, expected_value', [\n        ('100', '10,000%'),\n        ('0.01', '1%'),\n        ('0.010', '1%'),\n        ('0.011', '1.1%'),\n        ('0.0111', '1.11%'),\n        ('0.01110', '1.11%'),\n        ('0.01001', '1.001%'),\n        ('0.0100100', '1.001%'),\n        ('0.010100100', '1.01001%'),\n        ('0.000000', '0%'),\n        ('0', '0%'),\n        ('0.00', '0%'),\n        ('0.01', '1%'),\n        ('0.011', '1.1%'),\n        ('0.0110', '1.1%'),\n        ('0.0001', '0.01%'),\n        ('0.000100', '0.01%'),\n        ('0.0000100', '0.001%'),\n        ('0.00000100', '0.0001%'),\n    ])\n    def test_format_percent_precision(input_value, expected_value):\n        # Test precision conservation.\n>       assert numbers.format_percent(\n            decimal.Decimal(input_value), locale='en_US', decimal_quantization=False) == expected_value\nE       AssertionError: assert None == '1%'\nE        +  where None = <function format_percent at 0x7fda996089d0>(Decimal('0.01'), locale='en_US', decimal_quantization=False)\nE        +    where <function format_percent at 0x7fda996089d0> = numbers.format_percent\nE        +    and   Decimal('0.01') = <class 'decimal.Decimal'>('0.01')\nE        +      where <class 'decimal.Decimal'> = decimal.Decimal\n\ntests/test_numbers.py:670: AssertionError"}, "teardown": {"duration": 0.000211731999999909, "outcome": "passed"}}, {"nodeid": "tests/test_numbers.py::test_format_percent_precision[0.011-1.1%1]", "lineno": 646, "outcome": "failed", "keywords": ["test_format_percent_precision[0.011-1.1%1]", "parametrize", "pytestmark", "0.011-1.1%1", "test_numbers.py", "tests", "testbed", ""], "setup": {"duration": 0.00023181800000005026, "outcome": "passed"}, "call": {"duration": 0.0002898660000001385, "outcome": "failed", "crash": {"path": "/testbed/tests/test_numbers.py", "lineno": 670, "message": "AssertionError: assert None == '1.1%'\n +  where None = <function format_percent at 0x7fda996089d0>(Decimal('0.011'), locale='en_US', decimal_quantization=False)\n +    where <function format_percent at 0x7fda996089d0> = numbers.format_percent\n +    and   Decimal('0.011') = <class 'decimal.Decimal'>('0.011')\n +      where <class 'decimal.Decimal'> = decimal.Decimal"}, "traceback": [{"path": "tests/test_numbers.py", "lineno": 670, "message": "AssertionError"}], "longrepr": "input_value = '0.011', expected_value = '1.1%'\n\n    @pytest.mark.parametrize('input_value, expected_value', [\n        ('100', '10,000%'),\n        ('0.01', '1%'),\n        ('0.010', '1%'),\n        ('0.011', '1.1%'),\n        ('0.0111', '1.11%'),\n        ('0.01110', '1.11%'),\n        ('0.01001', '1.001%'),\n        ('0.0100100', '1.001%'),\n        ('0.010100100', '1.01001%'),\n        ('0.000000', '0%'),\n        ('0', '0%'),\n        ('0.00', '0%'),\n        ('0.01', '1%'),\n        ('0.011', '1.1%'),\n        ('0.0110', '1.1%'),\n        ('0.0001', '0.01%'),\n        ('0.000100', '0.01%'),\n        ('0.0000100', '0.001%'),\n        ('0.00000100', '0.0001%'),\n    ])\n    def test_format_percent_precision(input_value, expected_value):\n        # Test precision conservation.\n>       assert numbers.format_percent(\n            decimal.Decimal(input_value), locale='en_US', decimal_quantization=False) == expected_value\nE       AssertionError: assert None == '1.1%'\nE        +  where None = <function format_percent at 0x7fda996089d0>(Decimal('0.011'), locale='en_US', decimal_quantization=False)\nE        +    where <function format_percent at 0x7fda996089d0> = numbers.format_percent\nE        +    and   Decimal('0.011') = <class 'decimal.Decimal'>('0.011')\nE        +      where <class 'decimal.Decimal'> = decimal.Decimal\n\ntests/test_numbers.py:670: AssertionError"}, "teardown": {"duration": 0.0002830679999998864, "outcome": "passed"}}, {"nodeid": "tests/test_numbers.py::test_format_percent_precision[0.0110-1.1%]", "lineno": 646, "outcome": "failed", "keywords": ["test_format_percent_precision[0.0110-1.1%]", "parametrize", "pytestmark", "0.0110-1.1%", "test_numbers.py", "tests", "testbed", ""], "setup": {"duration": 0.00027132999999990304, "outcome": "passed"}, "call": {"duration": 0.00032914400000016997, "outcome": "failed", "crash": {"path": "/testbed/tests/test_numbers.py", "lineno": 670, "message": "AssertionError: assert None == '1.1%'\n +  where None = <function format_percent at 0x7fda996089d0>(Decimal('0.0110'), locale='en_US', decimal_quantization=False)\n +    where <function format_percent at 0x7fda996089d0> = numbers.format_percent\n +    and   Decimal('0.0110') = <class 'decimal.Decimal'>('0.0110')\n +      where <class 'decimal.Decimal'> = decimal.Decimal"}, "traceback": [{"path": "tests/test_numbers.py", "lineno": 670, "message": "AssertionError"}], "longrepr": "input_value = '0.0110', expected_value = '1.1%'\n\n    @pytest.mark.parametrize('input_value, expected_value', [\n        ('100', '10,000%'),\n        ('0.01', '1%'),\n        ('0.010', '1%'),\n        ('0.011', '1.1%'),\n        ('0.0111', '1.11%'),\n        ('0.01110', '1.11%'),\n        ('0.01001', '1.001%'),\n        ('0.0100100', '1.001%'),\n        ('0.010100100', '1.01001%'),\n        ('0.000000', '0%'),\n        ('0', '0%'),\n        ('0.00', '0%'),\n        ('0.01', '1%'),\n        ('0.011', '1.1%'),\n        ('0.0110', '1.1%'),\n        ('0.0001', '0.01%'),\n        ('0.000100', '0.01%'),\n        ('0.0000100', '0.001%'),\n        ('0.00000100', '0.0001%'),\n    ])\n    def test_format_percent_precision(input_value, expected_value):\n        # Test precision conservation.\n>       assert numbers.format_percent(\n            decimal.Decimal(input_value), locale='en_US', decimal_quantization=False) == expected_value\nE       AssertionError: assert None == '1.1%'\nE        +  where None = <function format_percent at 0x7fda996089d0>(Decimal('0.0110'), locale='en_US', decimal_quantization=False)\nE        +    where <function format_percent at 0x7fda996089d0> = numbers.format_percent\nE        +    and   Decimal('0.0110') = <class 'decimal.Decimal'>('0.0110')\nE        +      where <class 'decimal.Decimal'> = decimal.Decimal\n\ntests/test_numbers.py:670: AssertionError"}, "teardown": {"duration": 0.00023852099999999155, "outcome": "passed"}}, {"nodeid": "tests/test_numbers.py::test_format_percent_precision[0.0001-0.01%]", "lineno": 646, "outcome": "failed", "keywords": ["test_format_percent_precision[0.0001-0.01%]", "parametrize", "pytestmark", "0.0001-0.01%", "test_numbers.py", "tests", "testbed", ""], "setup": {"duration": 0.0002495080000000094, "outcome": "passed"}, "call": {"duration": 0.00031622000000020023, "outcome": "failed", "crash": {"path": "/testbed/tests/test_numbers.py", "lineno": 670, "message": "AssertionError: assert None == '0.01%'\n +  where None = <function format_percent at 0x7fda996089d0>(Decimal('0.0001'), locale='en_US', decimal_quantization=False)\n +    where <function format_percent at 0x7fda996089d0> = numbers.format_percent\n +    and   Decimal('0.0001') = <class 'decimal.Decimal'>('0.0001')\n +      where <class 'decimal.Decimal'> = decimal.Decimal"}, "traceback": [{"path": "tests/test_numbers.py", "lineno": 670, "message": "AssertionError"}], "longrepr": "input_value = '0.0001', expected_value = '0.01%'\n\n    @pytest.mark.parametrize('input_value, expected_value', [\n        ('100', '10,000%'),\n        ('0.01', '1%'),\n        ('0.010', '1%'),\n        ('0.011', '1.1%'),\n        ('0.0111', '1.11%'),\n        ('0.01110', '1.11%'),\n        ('0.01001', '1.001%'),\n        ('0.0100100', '1.001%'),\n        ('0.010100100', '1.01001%'),\n        ('0.000000', '0%'),\n        ('0', '0%'),\n        ('0.00', '0%'),\n        ('0.01', '1%'),\n        ('0.011', '1.1%'),\n        ('0.0110', '1.1%'),\n        ('0.0001', '0.01%'),\n        ('0.000100', '0.01%'),\n        ('0.0000100', '0.001%'),\n        ('0.00000100', '0.0001%'),\n    ])\n    def test_format_percent_precision(input_value, expected_value):\n        # Test precision conservation.\n>       assert numbers.format_percent(\n            decimal.Decimal(input_value), locale='en_US', decimal_quantization=False) == expected_value\nE       AssertionError: assert None == '0.01%'\nE        +  where None = <function format_percent at 0x7fda996089d0>(Decimal('0.0001'), locale='en_US', decimal_quantization=False)\nE        +    where <function format_percent at 0x7fda996089d0> = numbers.format_percent\nE        +    and   Decimal('0.0001') = <class 'decimal.Decimal'>('0.0001')\nE        +      where <class 'decimal.Decimal'> = decimal.Decimal\n\ntests/test_numbers.py:670: AssertionError"}, "teardown": {"duration": 0.00024837399999988463, "outcome": "passed"}}, {"nodeid": "tests/test_numbers.py::test_format_percent_precision[0.000100-0.01%]", "lineno": 646, "outcome": "failed", "keywords": ["test_format_percent_precision[0.000100-0.01%]", "parametrize", "pytestmark", "0.000100-0.01%", "test_numbers.py", "tests", "testbed", ""], "setup": {"duration": 0.00024164000000004293, "outcome": "passed"}, "call": {"duration": 0.00030894399999992217, "outcome": "failed", "crash": {"path": "/testbed/tests/test_numbers.py", "lineno": 670, "message": "AssertionError: assert None == '0.01%'\n +  where None = <function format_percent at 0x7fda996089d0>(Decimal('0.000100'), locale='en_US', decimal_quantization=False)\n +    where <function format_percent at 0x7fda996089d0> = numbers.format_percent\n +    and   Decimal('0.000100') = <class 'decimal.Decimal'>('0.000100')\n +      where <class 'decimal.Decimal'> = decimal.Decimal"}, "traceback": [{"path": "tests/test_numbers.py", "lineno": 670, "message": "AssertionError"}], "longrepr": "input_value = '0.000100', expected_value = '0.01%'\n\n    @pytest.mark.parametrize('input_value, expected_value', [\n        ('100', '10,000%'),\n        ('0.01', '1%'),\n        ('0.010', '1%'),\n        ('0.011', '1.1%'),\n        ('0.0111', '1.11%'),\n        ('0.01110', '1.11%'),\n        ('0.01001', '1.001%'),\n        ('0.0100100', '1.001%'),\n        ('0.010100100', '1.01001%'),\n        ('0.000000', '0%'),\n        ('0', '0%'),\n        ('0.00', '0%'),\n        ('0.01', '1%'),\n        ('0.011', '1.1%'),\n        ('0.0110', '1.1%'),\n        ('0.0001', '0.01%'),\n        ('0.000100', '0.01%'),\n        ('0.0000100', '0.001%'),\n        ('0.00000100', '0.0001%'),\n    ])\n    def test_format_percent_precision(input_value, expected_value):\n        # Test precision conservation.\n>       assert numbers.format_percent(\n            decimal.Decimal(input_value), locale='en_US', decimal_quantization=False) == expected_value\nE       AssertionError: assert None == '0.01%'\nE        +  where None = <function format_percent at 0x7fda996089d0>(Decimal('0.000100'), locale='en_US', decimal_quantization=False)\nE        +    where <function format_percent at 0x7fda996089d0> = numbers.format_percent\nE        +    and   Decimal('0.000100') = <class 'decimal.Decimal'>('0.000100')\nE        +      where <class 'decimal.Decimal'> = decimal.Decimal\n\ntests/test_numbers.py:670: AssertionError"}, "teardown": {"duration": 0.00022378900000008528, "outcome": "passed"}}, {"nodeid": "tests/test_numbers.py::test_format_percent_precision[0.0000100-0.001%]", "lineno": 646, "outcome": "failed", "keywords": ["test_format_percent_precision[0.0000100-0.001%]", "parametrize", "pytestmark", "0.0000100-0.001%", "test_numbers.py", "tests", "testbed", ""], "setup": {"duration": 0.00023948599999989995, "outcome": "passed"}, "call": {"duration": 0.00031309099999976553, "outcome": "failed", "crash": {"path": "/testbed/tests/test_numbers.py", "lineno": 670, "message": "AssertionError: assert None == '0.001%'\n +  where None = <function format_percent at 0x7fda996089d0>(Decimal('0.0000100'), locale='en_US', decimal_quantization=False)\n +    where <function format_percent at 0x7fda996089d0> = numbers.format_percent\n +    and   Decimal('0.0000100') = <class 'decimal.Decimal'>('0.0000100')\n +      where <class 'decimal.Decimal'> = decimal.Decimal"}, "traceback": [{"path": "tests/test_numbers.py", "lineno": 670, "message": "AssertionError"}], "longrepr": "input_value = '0.0000100', expected_value = '0.001%'\n\n    @pytest.mark.parametrize('input_value, expected_value', [\n        ('100', '10,000%'),\n        ('0.01', '1%'),\n        ('0.010', '1%'),\n        ('0.011', '1.1%'),\n        ('0.0111', '1.11%'),\n        ('0.01110', '1.11%'),\n        ('0.01001', '1.001%'),\n        ('0.0100100', '1.001%'),\n        ('0.010100100', '1.01001%'),\n        ('0.000000', '0%'),\n        ('0', '0%'),\n        ('0.00', '0%'),\n        ('0.01', '1%'),\n        ('0.011', '1.1%'),\n        ('0.0110', '1.1%'),\n        ('0.0001', '0.01%'),\n        ('0.000100', '0.01%'),\n        ('0.0000100', '0.001%'),\n        ('0.00000100', '0.0001%'),\n    ])\n    def test_format_percent_precision(input_value, expected_value):\n        # Test precision conservation.\n>       assert numbers.format_percent(\n            decimal.Decimal(input_value), locale='en_US', decimal_quantization=False) == expected_value\nE       AssertionError: assert None == '0.001%'\nE        +  where None = <function format_percent at 0x7fda996089d0>(Decimal('0.0000100'), locale='en_US', decimal_quantization=False)\nE        +    where <function format_percent at 0x7fda996089d0> = numbers.format_percent\nE        +    and   Decimal('0.0000100') = <class 'decimal.Decimal'>('0.0000100')\nE        +      where <class 'decimal.Decimal'> = decimal.Decimal\n\ntests/test_numbers.py:670: AssertionError"}, "teardown": {"duration": 0.00021883299999991834, "outcome": "passed"}}, {"nodeid": "tests/test_numbers.py::test_format_percent_precision[0.00000100-0.0001%]", "lineno": 646, "outcome": "failed", "keywords": ["test_format_percent_precision[0.00000100-0.0001%]", "parametrize", "pytestmark", "0.00000100-0.0001%", "test_numbers.py", "tests", "testbed", ""], "setup": {"duration": 0.00024246599999999674, "outcome": "passed"}, "call": {"duration": 0.00030980199999985913, "outcome": "failed", "crash": {"path": "/testbed/tests/test_numbers.py", "lineno": 670, "message": "AssertionError: assert None == '0.0001%'\n +  where None = <function format_percent at 0x7fda996089d0>(Decimal('0.00000100'), locale='en_US', decimal_quantization=False)\n +    where <function format_percent at 0x7fda996089d0> = numbers.format_percent\n +    and   Decimal('0.00000100') = <class 'decimal.Decimal'>('0.00000100')\n +      where <class 'decimal.Decimal'> = decimal.Decimal"}, "traceback": [{"path": "tests/test_numbers.py", "lineno": 670, "message": "AssertionError"}], "longrepr": "input_value = '0.00000100', expected_value = '0.0001%'\n\n    @pytest.mark.parametrize('input_value, expected_value', [\n        ('100', '10,000%'),\n        ('0.01', '1%'),\n        ('0.010', '1%'),\n        ('0.011', '1.1%'),\n        ('0.0111', '1.11%'),\n        ('0.01110', '1.11%'),\n        ('0.01001', '1.001%'),\n        ('0.0100100', '1.001%'),\n        ('0.010100100', '1.01001%'),\n        ('0.000000', '0%'),\n        ('0', '0%'),\n        ('0.00', '0%'),\n        ('0.01', '1%'),\n        ('0.011', '1.1%'),\n        ('0.0110', '1.1%'),\n        ('0.0001', '0.01%'),\n        ('0.000100', '0.01%'),\n        ('0.0000100', '0.001%'),\n        ('0.00000100', '0.0001%'),\n    ])\n    def test_format_percent_precision(input_value, expected_value):\n        # Test precision conservation.\n>       assert numbers.format_percent(\n            decimal.Decimal(input_value), locale='en_US', decimal_quantization=False) == expected_value\nE       AssertionError: assert None == '0.0001%'\nE        +  where None = <function format_percent at 0x7fda996089d0>(Decimal('0.00000100'), locale='en_US', decimal_quantization=False)\nE        +    where <function format_percent at 0x7fda996089d0> = numbers.format_percent\nE        +    and   Decimal('0.00000100') = <class 'decimal.Decimal'>('0.00000100')\nE        +      where <class 'decimal.Decimal'> = decimal.Decimal\n\ntests/test_numbers.py:670: AssertionError"}, "teardown": {"duration": 0.00022353600000002416, "outcome": "passed"}}, {"nodeid": "tests/test_numbers.py::test_format_percent_quantization", "lineno": 673, "outcome": "failed", "keywords": ["test_format_percent_quantization", "test_numbers.py", "tests", "testbed", ""], "setup": {"duration": 0.00015852900000012937, "outcome": "passed"}, "call": {"duration": 0.00016956100000031782, "outcome": "failed", "crash": {"path": "/testbed/tests/test_numbers.py", "lineno": 676, "message": "TypeError: 'NoneType' object is not iterable"}, "traceback": [{"path": "tests/test_numbers.py", "lineno": 676, "message": "TypeError"}], "longrepr": "def test_format_percent_quantization():\n        # Test all locales.\n>       for locale_code in localedata.locale_identifiers():\nE       TypeError: 'NoneType' object is not iterable\n\ntests/test_numbers.py:676: TypeError"}, "teardown": {"duration": 0.00018781699999959045, "outcome": "passed"}}, {"nodeid": "tests/test_numbers.py::test_format_scientific", "lineno": 680, "outcome": "failed", "keywords": ["test_format_scientific", "test_numbers.py", "tests", "testbed", ""], "setup": {"duration": 0.00015408999999966255, "outcome": "passed"}, "call": {"duration": 0.0002714489999999792, "outcome": "failed", "crash": {"path": "/testbed/tests/test_numbers.py", "lineno": 682, "message": "AssertionError: assert None == '1E4'\n +  where None = <function format_scientific at 0x7fda99608a60>(10000, locale='en_US')\n +    where <function format_scientific at 0x7fda99608a60> = numbers.format_scientific"}, "traceback": [{"path": "tests/test_numbers.py", "lineno": 682, "message": "AssertionError"}], "longrepr": "def test_format_scientific():\n>       assert numbers.format_scientific(10000, locale='en_US') == '1E4'\nE       AssertionError: assert None == '1E4'\nE        +  where None = <function format_scientific at 0x7fda99608a60>(10000, locale='en_US')\nE        +    where <function format_scientific at 0x7fda99608a60> = numbers.format_scientific\n\ntests/test_numbers.py:682: AssertionError"}, "teardown": {"duration": 0.00018756399999997342, "outcome": "passed"}}, {"nodeid": "tests/test_numbers.py::test_default_scientific_format", "lineno": 694, "outcome": "failed", "keywords": ["test_default_scientific_format", "test_numbers.py", "tests", "testbed", ""], "setup": {"duration": 0.00015636399999996442, "outcome": "passed"}, "call": {"duration": 0.0002843859999996923, "outcome": "failed", "crash": {"path": "/testbed/tests/test_numbers.py", "lineno": 699, "message": "AssertionError: assert None == '1.2345E4'\n +  where None = <function format_scientific at 0x7fda99608a60>(12345, locale='en_US')\n +    where <function format_scientific at 0x7fda99608a60> = numbers.format_scientific"}, "traceback": [{"path": "tests/test_numbers.py", "lineno": 699, "message": "AssertionError"}], "longrepr": "def test_default_scientific_format():\n        \"\"\" Check the scientific format method auto-correct the rendering pattern\n        in case of a missing fractional part.\n        \"\"\"\n>       assert numbers.format_scientific(12345, locale='en_US') == '1.2345E4'\nE       AssertionError: assert None == '1.2345E4'\nE        +  where None = <function format_scientific at 0x7fda99608a60>(12345, locale='en_US')\nE        +    where <function format_scientific at 0x7fda99608a60> = numbers.format_scientific\n\ntests/test_numbers.py:699: AssertionError"}, "teardown": {"duration": 0.00018488700000007796, "outcome": "passed"}}, {"nodeid": "tests/test_numbers.py::test_format_scientific_precision[10000-1E4]", "lineno": 704, "outcome": "failed", "keywords": ["test_format_scientific_precision[10000-1E4]", "parametrize", "pytestmark", "10000-1E4", "test_numbers.py", "tests", "testbed", ""], "setup": {"duration": 0.0002674329999998726, "outcome": "passed"}, "call": {"duration": 0.00030896200000007923, "outcome": "failed", "crash": {"path": "/testbed/tests/test_numbers.py", "lineno": 729, "message": "AssertionError: assert None == '1E4'\n +  where None = <function format_scientific at 0x7fda99608a60>(Decimal('10000'), locale='en_US', decimal_quantization=False)\n +    where <function format_scientific at 0x7fda99608a60> = numbers.format_scientific\n +    and   Decimal('10000') = <class 'decimal.Decimal'>('10000')\n +      where <class 'decimal.Decimal'> = decimal.Decimal"}, "traceback": [{"path": "tests/test_numbers.py", "lineno": 729, "message": "AssertionError"}], "longrepr": "input_value = '10000', expected_value = '1E4'\n\n    @pytest.mark.parametrize('input_value, expected_value', [\n        ('10000', '1E4'),\n        ('1', '1E0'),\n        ('1.0', '1E0'),\n        ('1.1', '1.1E0'),\n        ('1.11', '1.11E0'),\n        ('1.110', '1.11E0'),\n        ('1.001', '1.001E0'),\n        ('1.00100', '1.001E0'),\n        ('01.00100', '1.001E0'),\n        ('101.00100', '1.01001E2'),\n        ('00000', '0E0'),\n        ('0', '0E0'),\n        ('0.0', '0E0'),\n        ('0.1', '1E-1'),\n        ('0.11', '1.1E-1'),\n        ('0.110', '1.1E-1'),\n        ('0.001', '1E-3'),\n        ('0.00100', '1E-3'),\n        ('00.00100', '1E-3'),\n        ('000.00100', '1E-3'),\n    ])\n    def test_format_scientific_precision(input_value, expected_value):\n        # Test precision conservation.\n>       assert numbers.format_scientific(\n            decimal.Decimal(input_value), locale='en_US', decimal_quantization=False) == expected_value\nE       AssertionError: assert None == '1E4'\nE        +  where None = <function format_scientific at 0x7fda99608a60>(Decimal('10000'), locale='en_US', decimal_quantization=False)\nE        +    where <function format_scientific at 0x7fda99608a60> = numbers.format_scientific\nE        +    and   Decimal('10000') = <class 'decimal.Decimal'>('10000')\nE        +      where <class 'decimal.Decimal'> = decimal.Decimal\n\ntests/test_numbers.py:729: AssertionError"}, "teardown": {"duration": 0.00020683600000026559, "outcome": "passed"}}, {"nodeid": "tests/test_numbers.py::test_format_scientific_precision[1-1E0]", "lineno": 704, "outcome": "failed", "keywords": ["test_format_scientific_precision[1-1E0]", "parametrize", "pytestmark", "1-1E0", "test_numbers.py", "tests", "testbed", ""], "setup": {"duration": 0.0002469860000005042, "outcome": "passed"}, "call": {"duration": 0.0003072169999995822, "outcome": "failed", "crash": {"path": "/testbed/tests/test_numbers.py", "lineno": 729, "message": "AssertionError: assert None == '1E0'\n +  where None = <function format_scientific at 0x7fda99608a60>(Decimal('1'), locale='en_US', decimal_quantization=False)\n +    where <function format_scientific at 0x7fda99608a60> = numbers.format_scientific\n +    and   Decimal('1') = <class 'decimal.Decimal'>('1')\n +      where <class 'decimal.Decimal'> = decimal.Decimal"}, "traceback": [{"path": "tests/test_numbers.py", "lineno": 729, "message": "AssertionError"}], "longrepr": "input_value = '1', expected_value = '1E0'\n\n    @pytest.mark.parametrize('input_value, expected_value', [\n        ('10000', '1E4'),\n        ('1', '1E0'),\n        ('1.0', '1E0'),\n        ('1.1', '1.1E0'),\n        ('1.11', '1.11E0'),\n        ('1.110', '1.11E0'),\n        ('1.001', '1.001E0'),\n        ('1.00100', '1.001E0'),\n        ('01.00100', '1.001E0'),\n        ('101.00100', '1.01001E2'),\n        ('00000', '0E0'),\n        ('0', '0E0'),\n        ('0.0', '0E0'),\n        ('0.1', '1E-1'),\n        ('0.11', '1.1E-1'),\n        ('0.110', '1.1E-1'),\n        ('0.001', '1E-3'),\n        ('0.00100', '1E-3'),\n        ('00.00100', '1E-3'),\n        ('000.00100', '1E-3'),\n    ])\n    def test_format_scientific_precision(input_value, expected_value):\n        # Test precision conservation.\n>       assert numbers.format_scientific(\n            decimal.Decimal(input_value), locale='en_US', decimal_quantization=False) == expected_value\nE       AssertionError: assert None == '1E0'\nE        +  where None = <function format_scientific at 0x7fda99608a60>(Decimal('1'), locale='en_US', decimal_quantization=False)\nE        +    where <function format_scientific at 0x7fda99608a60> = numbers.format_scientific\nE        +    and   Decimal('1') = <class 'decimal.Decimal'>('1')\nE        +      where <class 'decimal.Decimal'> = decimal.Decimal\n\ntests/test_numbers.py:729: AssertionError"}, "teardown": {"duration": 0.00021885200000060223, "outcome": "passed"}}, {"nodeid": "tests/test_numbers.py::test_format_scientific_precision[1.0-1E0]", "lineno": 704, "outcome": "failed", "keywords": ["test_format_scientific_precision[1.0-1E0]", "parametrize", "pytestmark", "1.0-1E0", "test_numbers.py", "tests", "testbed", ""], "setup": {"duration": 0.0002485980000006549, "outcome": "passed"}, "call": {"duration": 0.0002989400000004139, "outcome": "failed", "crash": {"path": "/testbed/tests/test_numbers.py", "lineno": 729, "message": "AssertionError: assert None == '1E0'\n +  where None = <function format_scientific at 0x7fda99608a60>(Decimal('1.0'), locale='en_US', decimal_quantization=False)\n +    where <function format_scientific at 0x7fda99608a60> = numbers.format_scientific\n +    and   Decimal('1.0') = <class 'decimal.Decimal'>('1.0')\n +      where <class 'decimal.Decimal'> = decimal.Decimal"}, "traceback": [{"path": "tests/test_numbers.py", "lineno": 729, "message": "AssertionError"}], "longrepr": "input_value = '1.0', expected_value = '1E0'\n\n    @pytest.mark.parametrize('input_value, expected_value', [\n        ('10000', '1E4'),\n        ('1', '1E0'),\n        ('1.0', '1E0'),\n        ('1.1', '1.1E0'),\n        ('1.11', '1.11E0'),\n        ('1.110', '1.11E0'),\n        ('1.001', '1.001E0'),\n        ('1.00100', '1.001E0'),\n        ('01.00100', '1.001E0'),\n        ('101.00100', '1.01001E2'),\n        ('00000', '0E0'),\n        ('0', '0E0'),\n        ('0.0', '0E0'),\n        ('0.1', '1E-1'),\n        ('0.11', '1.1E-1'),\n        ('0.110', '1.1E-1'),\n        ('0.001', '1E-3'),\n        ('0.00100', '1E-3'),\n        ('00.00100', '1E-3'),\n        ('000.00100', '1E-3'),\n    ])\n    def test_format_scientific_precision(input_value, expected_value):\n        # Test precision conservation.\n>       assert numbers.format_scientific(\n            decimal.Decimal(input_value), locale='en_US', decimal_quantization=False) == expected_value\nE       AssertionError: assert None == '1E0'\nE        +  where None = <function format_scientific at 0x7fda99608a60>(Decimal('1.0'), locale='en_US', decimal_quantization=False)\nE        +    where <function format_scientific at 0x7fda99608a60> = numbers.format_scientific\nE        +    and   Decimal('1.0') = <class 'decimal.Decimal'>('1.0')\nE        +      where <class 'decimal.Decimal'> = decimal.Decimal\n\ntests/test_numbers.py:729: AssertionError"}, "teardown": {"duration": 0.00021854899999951272, "outcome": "passed"}}, {"nodeid": "tests/test_numbers.py::test_format_scientific_precision[1.1-1.1E0]", "lineno": 704, "outcome": "failed", "keywords": ["test_format_scientific_precision[1.1-1.1E0]", "parametrize", "pytestmark", "1.1-1.1E0", "test_numbers.py", "tests", "testbed", ""], "setup": {"duration": 0.0002632030000002672, "outcome": "passed"}, "call": {"duration": 0.0003006389999997694, "outcome": "failed", "crash": {"path": "/testbed/tests/test_numbers.py", "lineno": 729, "message": "AssertionError: assert None == '1.1E0'\n +  where None = <function format_scientific at 0x7fda99608a60>(Decimal('1.1'), locale='en_US', decimal_quantization=False)\n +    where <function format_scientific at 0x7fda99608a60> = numbers.format_scientific\n +    and   Decimal('1.1') = <class 'decimal.Decimal'>('1.1')\n +      where <class 'decimal.Decimal'> = decimal.Decimal"}, "traceback": [{"path": "tests/test_numbers.py", "lineno": 729, "message": "AssertionError"}], "longrepr": "input_value = '1.1', expected_value = '1.1E0'\n\n    @pytest.mark.parametrize('input_value, expected_value', [\n        ('10000', '1E4'),\n        ('1', '1E0'),\n        ('1.0', '1E0'),\n        ('1.1', '1.1E0'),\n        ('1.11', '1.11E0'),\n        ('1.110', '1.11E0'),\n        ('1.001', '1.001E0'),\n        ('1.00100', '1.001E0'),\n        ('01.00100', '1.001E0'),\n        ('101.00100', '1.01001E2'),\n        ('00000', '0E0'),\n        ('0', '0E0'),\n        ('0.0', '0E0'),\n        ('0.1', '1E-1'),\n        ('0.11', '1.1E-1'),\n        ('0.110', '1.1E-1'),\n        ('0.001', '1E-3'),\n        ('0.00100', '1E-3'),\n        ('00.00100', '1E-3'),\n        ('000.00100', '1E-3'),\n    ])\n    def test_format_scientific_precision(input_value, expected_value):\n        # Test precision conservation.\n>       assert numbers.format_scientific(\n            decimal.Decimal(input_value), locale='en_US', decimal_quantization=False) == expected_value\nE       AssertionError: assert None == '1.1E0'\nE        +  where None = <function format_scientific at 0x7fda99608a60>(Decimal('1.1'), locale='en_US', decimal_quantization=False)\nE        +    where <function format_scientific at 0x7fda99608a60> = numbers.format_scientific\nE        +    and   Decimal('1.1') = <class 'decimal.Decimal'>('1.1')\nE        +      where <class 'decimal.Decimal'> = decimal.Decimal\n\ntests/test_numbers.py:729: AssertionError"}, "teardown": {"duration": 0.00020427500000064214, "outcome": "passed"}}, {"nodeid": "tests/test_numbers.py::test_format_scientific_precision[1.11-1.11E0]", "lineno": 704, "outcome": "failed", "keywords": ["test_format_scientific_precision[1.11-1.11E0]", "parametrize", "pytestmark", "1.11-1.11E0", "test_numbers.py", "tests", "testbed", ""], "setup": {"duration": 0.00022876400000004793, "outcome": "passed"}, "call": {"duration": 0.0003040979999999749, "outcome": "failed", "crash": {"path": "/testbed/tests/test_numbers.py", "lineno": 729, "message": "AssertionError: assert None == '1.11E0'\n +  where None = <function format_scientific at 0x7fda99608a60>(Decimal('1.11'), locale='en_US', decimal_quantization=False)\n +    where <function format_scientific at 0x7fda99608a60> = numbers.format_scientific\n +    and   Decimal('1.11') = <class 'decimal.Decimal'>('1.11')\n +      where <class 'decimal.Decimal'> = decimal.Decimal"}, "traceback": [{"path": "tests/test_numbers.py", "lineno": 729, "message": "AssertionError"}], "longrepr": "input_value = '1.11', expected_value = '1.11E0'\n\n    @pytest.mark.parametrize('input_value, expected_value', [\n        ('10000', '1E4'),\n        ('1', '1E0'),\n        ('1.0', '1E0'),\n        ('1.1', '1.1E0'),\n        ('1.11', '1.11E0'),\n        ('1.110', '1.11E0'),\n        ('1.001', '1.001E0'),\n        ('1.00100', '1.001E0'),\n        ('01.00100', '1.001E0'),\n        ('101.00100', '1.01001E2'),\n        ('00000', '0E0'),\n        ('0', '0E0'),\n        ('0.0', '0E0'),\n        ('0.1', '1E-1'),\n        ('0.11', '1.1E-1'),\n        ('0.110', '1.1E-1'),\n        ('0.001', '1E-3'),\n        ('0.00100', '1E-3'),\n        ('00.00100', '1E-3'),\n        ('000.00100', '1E-3'),\n    ])\n    def test_format_scientific_precision(input_value, expected_value):\n        # Test precision conservation.\n>       assert numbers.format_scientific(\n            decimal.Decimal(input_value), locale='en_US', decimal_quantization=False) == expected_value\nE       AssertionError: assert None == '1.11E0'\nE        +  where None = <function format_scientific at 0x7fda99608a60>(Decimal('1.11'), locale='en_US', decimal_quantization=False)\nE        +    where <function format_scientific at 0x7fda99608a60> = numbers.format_scientific\nE        +    and   Decimal('1.11') = <class 'decimal.Decimal'>('1.11')\nE        +      where <class 'decimal.Decimal'> = decimal.Decimal\n\ntests/test_numbers.py:729: AssertionError"}, "teardown": {"duration": 0.00021348399999965295, "outcome": "passed"}}, {"nodeid": "tests/test_numbers.py::test_format_scientific_precision[1.110-1.11E0]", "lineno": 704, "outcome": "failed", "keywords": ["test_format_scientific_precision[1.110-1.11E0]", "parametrize", "pytestmark", "1.110-1.11E0", "test_numbers.py", "tests", "testbed", ""], "setup": {"duration": 0.00022724799999984668, "outcome": "passed"}, "call": {"duration": 0.00029520400000038194, "outcome": "failed", "crash": {"path": "/testbed/tests/test_numbers.py", "lineno": 729, "message": "AssertionError: assert None == '1.11E0'\n +  where None = <function format_scientific at 0x7fda99608a60>(Decimal('1.110'), locale='en_US', decimal_quantization=False)\n +    where <function format_scientific at 0x7fda99608a60> = numbers.format_scientific\n +    and   Decimal('1.110') = <class 'decimal.Decimal'>('1.110')\n +      where <class 'decimal.Decimal'> = decimal.Decimal"}, "traceback": [{"path": "tests/test_numbers.py", "lineno": 729, "message": "AssertionError"}], "longrepr": "input_value = '1.110', expected_value = '1.11E0'\n\n    @pytest.mark.parametrize('input_value, expected_value', [\n        ('10000', '1E4'),\n        ('1', '1E0'),\n        ('1.0', '1E0'),\n        ('1.1', '1.1E0'),\n        ('1.11', '1.11E0'),\n        ('1.110', '1.11E0'),\n        ('1.001', '1.001E0'),\n        ('1.00100', '1.001E0'),\n        ('01.00100', '1.001E0'),\n        ('101.00100', '1.01001E2'),\n        ('00000', '0E0'),\n        ('0', '0E0'),\n        ('0.0', '0E0'),\n        ('0.1', '1E-1'),\n        ('0.11', '1.1E-1'),\n        ('0.110', '1.1E-1'),\n        ('0.001', '1E-3'),\n        ('0.00100', '1E-3'),\n        ('00.00100', '1E-3'),\n        ('000.00100', '1E-3'),\n    ])\n    def test_format_scientific_precision(input_value, expected_value):\n        # Test precision conservation.\n>       assert numbers.format_scientific(\n            decimal.Decimal(input_value), locale='en_US', decimal_quantization=False) == expected_value\nE       AssertionError: assert None == '1.11E0'\nE        +  where None = <function format_scientific at 0x7fda99608a60>(Decimal('1.110'), locale='en_US', decimal_quantization=False)\nE        +    where <function format_scientific at 0x7fda99608a60> = numbers.format_scientific\nE        +    and   Decimal('1.110') = <class 'decimal.Decimal'>('1.110')\nE        +      where <class 'decimal.Decimal'> = decimal.Decimal\n\ntests/test_numbers.py:729: AssertionError"}, "teardown": {"duration": 0.00020527100000045095, "outcome": "passed"}}, {"nodeid": "tests/test_numbers.py::test_format_scientific_precision[1.001-1.001E0]", "lineno": 704, "outcome": "failed", "keywords": ["test_format_scientific_precision[1.001-1.001E0]", "parametrize", "pytestmark", "1.001-1.001E0", "test_numbers.py", "tests", "testbed", ""], "setup": {"duration": 0.00024204199999999787, "outcome": "passed"}, "call": {"duration": 0.00029027999999975407, "outcome": "failed", "crash": {"path": "/testbed/tests/test_numbers.py", "lineno": 729, "message": "AssertionError: assert None == '1.001E0'\n +  where None = <function format_scientific at 0x7fda99608a60>(Decimal('1.001'), locale='en_US', decimal_quantization=False)\n +    where <function format_scientific at 0x7fda99608a60> = numbers.format_scientific\n +    and   Decimal('1.001') = <class 'decimal.Decimal'>('1.001')\n +      where <class 'decimal.Decimal'> = decimal.Decimal"}, "traceback": [{"path": "tests/test_numbers.py", "lineno": 729, "message": "AssertionError"}], "longrepr": "input_value = '1.001', expected_value = '1.001E0'\n\n    @pytest.mark.parametrize('input_value, expected_value', [\n        ('10000', '1E4'),\n        ('1', '1E0'),\n        ('1.0', '1E0'),\n        ('1.1', '1.1E0'),\n        ('1.11', '1.11E0'),\n        ('1.110', '1.11E0'),\n        ('1.001', '1.001E0'),\n        ('1.00100', '1.001E0'),\n        ('01.00100', '1.001E0'),\n        ('101.00100', '1.01001E2'),\n        ('00000', '0E0'),\n        ('0', '0E0'),\n        ('0.0', '0E0'),\n        ('0.1', '1E-1'),\n        ('0.11', '1.1E-1'),\n        ('0.110', '1.1E-1'),\n        ('0.001', '1E-3'),\n        ('0.00100', '1E-3'),\n        ('00.00100', '1E-3'),\n        ('000.00100', '1E-3'),\n    ])\n    def test_format_scientific_precision(input_value, expected_value):\n        # Test precision conservation.\n>       assert numbers.format_scientific(\n            decimal.Decimal(input_value), locale='en_US', decimal_quantization=False) == expected_value\nE       AssertionError: assert None == '1.001E0'\nE        +  where None = <function format_scientific at 0x7fda99608a60>(Decimal('1.001'), locale='en_US', decimal_quantization=False)\nE        +    where <function format_scientific at 0x7fda99608a60> = numbers.format_scientific\nE        +    and   Decimal('1.001') = <class 'decimal.Decimal'>('1.001')\nE        +      where <class 'decimal.Decimal'> = decimal.Decimal\n\ntests/test_numbers.py:729: AssertionError"}, "teardown": {"duration": 0.00020076999999929512, "outcome": "passed"}}, {"nodeid": "tests/test_numbers.py::test_format_scientific_precision[1.00100-1.001E0]", "lineno": 704, "outcome": "failed", "keywords": ["test_format_scientific_precision[1.00100-1.001E0]", "parametrize", "pytestmark", "1.00100-1.001E0", "test_numbers.py", "tests", "testbed", ""], "setup": {"duration": 0.00023615000000010156, "outcome": "passed"}, "call": {"duration": 0.0003421790000004421, "outcome": "failed", "crash": {"path": "/testbed/tests/test_numbers.py", "lineno": 729, "message": "AssertionError: assert None == '1.001E0'\n +  where None = <function format_scientific at 0x7fda99608a60>(Decimal('1.00100'), locale='en_US', decimal_quantization=False)\n +    where <function format_scientific at 0x7fda99608a60> = numbers.format_scientific\n +    and   Decimal('1.00100') = <class 'decimal.Decimal'>('1.00100')\n +      where <class 'decimal.Decimal'> = decimal.Decimal"}, "traceback": [{"path": "tests/test_numbers.py", "lineno": 729, "message": "AssertionError"}], "longrepr": "input_value = '1.00100', expected_value = '1.001E0'\n\n    @pytest.mark.parametrize('input_value, expected_value', [\n        ('10000', '1E4'),\n        ('1', '1E0'),\n        ('1.0', '1E0'),\n        ('1.1', '1.1E0'),\n        ('1.11', '1.11E0'),\n        ('1.110', '1.11E0'),\n        ('1.001', '1.001E0'),\n        ('1.00100', '1.001E0'),\n        ('01.00100', '1.001E0'),\n        ('101.00100', '1.01001E2'),\n        ('00000', '0E0'),\n        ('0', '0E0'),\n        ('0.0', '0E0'),\n        ('0.1', '1E-1'),\n        ('0.11', '1.1E-1'),\n        ('0.110', '1.1E-1'),\n        ('0.001', '1E-3'),\n        ('0.00100', '1E-3'),\n        ('00.00100', '1E-3'),\n        ('000.00100', '1E-3'),\n    ])\n    def test_format_scientific_precision(input_value, expected_value):\n        # Test precision conservation.\n>       assert numbers.format_scientific(\n            decimal.Decimal(input_value), locale='en_US', decimal_quantization=False) == expected_value\nE       AssertionError: assert None == '1.001E0'\nE        +  where None = <function format_scientific at 0x7fda99608a60>(Decimal('1.00100'), locale='en_US', decimal_quantization=False)\nE        +    where <function format_scientific at 0x7fda99608a60> = numbers.format_scientific\nE        +    and   Decimal('1.00100') = <class 'decimal.Decimal'>('1.00100')\nE        +      where <class 'decimal.Decimal'> = decimal.Decimal\n\ntests/test_numbers.py:729: AssertionError"}, "teardown": {"duration": 0.00020074300000061385, "outcome": "passed"}}, {"nodeid": "tests/test_numbers.py::test_format_scientific_precision[01.00100-1.001E0]", "lineno": 704, "outcome": "failed", "keywords": ["test_format_scientific_precision[01.00100-1.001E0]", "parametrize", "pytestmark", "01.00100-1.001E0", "test_numbers.py", "tests", "testbed", ""], "setup": {"duration": 0.00022638300000021871, "outcome": "passed"}, "call": {"duration": 0.0003008869999998609, "outcome": "failed", "crash": {"path": "/testbed/tests/test_numbers.py", "lineno": 729, "message": "AssertionError: assert None == '1.001E0'\n +  where None = <function format_scientific at 0x7fda99608a60>(Decimal('1.00100'), locale='en_US', decimal_quantization=False)\n +    where <function format_scientific at 0x7fda99608a60> = numbers.format_scientific\n +    and   Decimal('1.00100') = <class 'decimal.Decimal'>('01.00100')\n +      where <class 'decimal.Decimal'> = decimal.Decimal"}, "traceback": [{"path": "tests/test_numbers.py", "lineno": 729, "message": "AssertionError"}], "longrepr": "input_value = '01.00100', expected_value = '1.001E0'\n\n    @pytest.mark.parametrize('input_value, expected_value', [\n        ('10000', '1E4'),\n        ('1', '1E0'),\n        ('1.0', '1E0'),\n        ('1.1', '1.1E0'),\n        ('1.11', '1.11E0'),\n        ('1.110', '1.11E0'),\n        ('1.001', '1.001E0'),\n        ('1.00100', '1.001E0'),\n        ('01.00100', '1.001E0'),\n        ('101.00100', '1.01001E2'),\n        ('00000', '0E0'),\n        ('0', '0E0'),\n        ('0.0', '0E0'),\n        ('0.1', '1E-1'),\n        ('0.11', '1.1E-1'),\n        ('0.110', '1.1E-1'),\n        ('0.001', '1E-3'),\n        ('0.00100', '1E-3'),\n        ('00.00100', '1E-3'),\n        ('000.00100', '1E-3'),\n    ])\n    def test_format_scientific_precision(input_value, expected_value):\n        # Test precision conservation.\n>       assert numbers.format_scientific(\n            decimal.Decimal(input_value), locale='en_US', decimal_quantization=False) == expected_value\nE       AssertionError: assert None == '1.001E0'\nE        +  where None = <function format_scientific at 0x7fda99608a60>(Decimal('1.00100'), locale='en_US', decimal_quantization=False)\nE        +    where <function format_scientific at 0x7fda99608a60> = numbers.format_scientific\nE        +    and   Decimal('1.00100') = <class 'decimal.Decimal'>('01.00100')\nE        +      where <class 'decimal.Decimal'> = decimal.Decimal\n\ntests/test_numbers.py:729: AssertionError"}, "teardown": {"duration": 0.00020589799999992664, "outcome": "passed"}}, {"nodeid": "tests/test_numbers.py::test_format_scientific_precision[101.00100-1.01001E2]", "lineno": 704, "outcome": "failed", "keywords": ["test_format_scientific_precision[101.00100-1.01001E2]", "parametrize", "pytestmark", "101.00100-1.01001E2", "test_numbers.py", "tests", "testbed", ""], "setup": {"duration": 0.00022467299999995305, "outcome": "passed"}, "call": {"duration": 0.00030043800000001397, "outcome": "failed", "crash": {"path": "/testbed/tests/test_numbers.py", "lineno": 729, "message": "AssertionError: assert None == '1.01001E2'\n +  where None = <function format_scientific at 0x7fda99608a60>(Decimal('101.00100'), locale='en_US', decimal_quantization=False)\n +    where <function format_scientific at 0x7fda99608a60> = numbers.format_scientific\n +    and   Decimal('101.00100') = <class 'decimal.Decimal'>('101.00100')\n +      where <class 'decimal.Decimal'> = decimal.Decimal"}, "traceback": [{"path": "tests/test_numbers.py", "lineno": 729, "message": "AssertionError"}], "longrepr": "input_value = '101.00100', expected_value = '1.01001E2'\n\n    @pytest.mark.parametrize('input_value, expected_value', [\n        ('10000', '1E4'),\n        ('1', '1E0'),\n        ('1.0', '1E0'),\n        ('1.1', '1.1E0'),\n        ('1.11', '1.11E0'),\n        ('1.110', '1.11E0'),\n        ('1.001', '1.001E0'),\n        ('1.00100', '1.001E0'),\n        ('01.00100', '1.001E0'),\n        ('101.00100', '1.01001E2'),\n        ('00000', '0E0'),\n        ('0', '0E0'),\n        ('0.0', '0E0'),\n        ('0.1', '1E-1'),\n        ('0.11', '1.1E-1'),\n        ('0.110', '1.1E-1'),\n        ('0.001', '1E-3'),\n        ('0.00100', '1E-3'),\n        ('00.00100', '1E-3'),\n        ('000.00100', '1E-3'),\n    ])\n    def test_format_scientific_precision(input_value, expected_value):\n        # Test precision conservation.\n>       assert numbers.format_scientific(\n            decimal.Decimal(input_value), locale='en_US', decimal_quantization=False) == expected_value\nE       AssertionError: assert None == '1.01001E2'\nE        +  where None = <function format_scientific at 0x7fda99608a60>(Decimal('101.00100'), locale='en_US', decimal_quantization=False)\nE        +    where <function format_scientific at 0x7fda99608a60> = numbers.format_scientific\nE        +    and   Decimal('101.00100') = <class 'decimal.Decimal'>('101.00100')\nE        +      where <class 'decimal.Decimal'> = decimal.Decimal\n\ntests/test_numbers.py:729: AssertionError"}, "teardown": {"duration": 0.00020727899999961608, "outcome": "passed"}}, {"nodeid": "tests/test_numbers.py::test_format_scientific_precision[00000-0E0]", "lineno": 704, "outcome": "failed", "keywords": ["test_format_scientific_precision[00000-0E0]", "parametrize", "pytestmark", "00000-0E0", "test_numbers.py", "tests", "testbed", ""], "setup": {"duration": 0.00024573199999977646, "outcome": "passed"}, "call": {"duration": 0.00031613099999994176, "outcome": "failed", "crash": {"path": "/testbed/tests/test_numbers.py", "lineno": 729, "message": "AssertionError: assert None == '0E0'\n +  where None = <function format_scientific at 0x7fda99608a60>(Decimal('0'), locale='en_US', decimal_quantization=False)\n +    where <function format_scientific at 0x7fda99608a60> = numbers.format_scientific\n +    and   Decimal('0') = <class 'decimal.Decimal'>('00000')\n +      where <class 'decimal.Decimal'> = decimal.Decimal"}, "traceback": [{"path": "tests/test_numbers.py", "lineno": 729, "message": "AssertionError"}], "longrepr": "input_value = '00000', expected_value = '0E0'\n\n    @pytest.mark.parametrize('input_value, expected_value', [\n        ('10000', '1E4'),\n        ('1', '1E0'),\n        ('1.0', '1E0'),\n        ('1.1', '1.1E0'),\n        ('1.11', '1.11E0'),\n        ('1.110', '1.11E0'),\n        ('1.001', '1.001E0'),\n        ('1.00100', '1.001E0'),\n        ('01.00100', '1.001E0'),\n        ('101.00100', '1.01001E2'),\n        ('00000', '0E0'),\n        ('0', '0E0'),\n        ('0.0', '0E0'),\n        ('0.1', '1E-1'),\n        ('0.11', '1.1E-1'),\n        ('0.110', '1.1E-1'),\n        ('0.001', '1E-3'),\n        ('0.00100', '1E-3'),\n        ('00.00100', '1E-3'),\n        ('000.00100', '1E-3'),\n    ])\n    def test_format_scientific_precision(input_value, expected_value):\n        # Test precision conservation.\n>       assert numbers.format_scientific(\n            decimal.Decimal(input_value), locale='en_US', decimal_quantization=False) == expected_value\nE       AssertionError: assert None == '0E0'\nE        +  where None = <function format_scientific at 0x7fda99608a60>(Decimal('0'), locale='en_US', decimal_quantization=False)\nE        +    where <function format_scientific at 0x7fda99608a60> = numbers.format_scientific\nE        +    and   Decimal('0') = <class 'decimal.Decimal'>('00000')\nE        +      where <class 'decimal.Decimal'> = decimal.Decimal\n\ntests/test_numbers.py:729: AssertionError"}, "teardown": {"duration": 0.000232286000000137, "outcome": "passed"}}, {"nodeid": "tests/test_numbers.py::test_format_scientific_precision[0-0E0]", "lineno": 704, "outcome": "failed", "keywords": ["test_format_scientific_precision[0-0E0]", "parametrize", "pytestmark", "0-0E0", "test_numbers.py", "tests", "testbed", ""], "setup": {"duration": 0.0002394590000003305, "outcome": "passed"}, "call": {"duration": 0.0003054339999994937, "outcome": "failed", "crash": {"path": "/testbed/tests/test_numbers.py", "lineno": 729, "message": "AssertionError: assert None == '0E0'\n +  where None = <function format_scientific at 0x7fda99608a60>(Decimal('0'), locale='en_US', decimal_quantization=False)\n +    where <function format_scientific at 0x7fda99608a60> = numbers.format_scientific\n +    and   Decimal('0') = <class 'decimal.Decimal'>('0')\n +      where <class 'decimal.Decimal'> = decimal.Decimal"}, "traceback": [{"path": "tests/test_numbers.py", "lineno": 729, "message": "AssertionError"}], "longrepr": "input_value = '0', expected_value = '0E0'\n\n    @pytest.mark.parametrize('input_value, expected_value', [\n        ('10000', '1E4'),\n        ('1', '1E0'),\n        ('1.0', '1E0'),\n        ('1.1', '1.1E0'),\n        ('1.11', '1.11E0'),\n        ('1.110', '1.11E0'),\n        ('1.001', '1.001E0'),\n        ('1.00100', '1.001E0'),\n        ('01.00100', '1.001E0'),\n        ('101.00100', '1.01001E2'),\n        ('00000', '0E0'),\n        ('0', '0E0'),\n        ('0.0', '0E0'),\n        ('0.1', '1E-1'),\n        ('0.11', '1.1E-1'),\n        ('0.110', '1.1E-1'),\n        ('0.001', '1E-3'),\n        ('0.00100', '1E-3'),\n        ('00.00100', '1E-3'),\n        ('000.00100', '1E-3'),\n    ])\n    def test_format_scientific_precision(input_value, expected_value):\n        # Test precision conservation.\n>       assert numbers.format_scientific(\n            decimal.Decimal(input_value), locale='en_US', decimal_quantization=False) == expected_value\nE       AssertionError: assert None == '0E0'\nE        +  where None = <function format_scientific at 0x7fda99608a60>(Decimal('0'), locale='en_US', decimal_quantization=False)\nE        +    where <function format_scientific at 0x7fda99608a60> = numbers.format_scientific\nE        +    and   Decimal('0') = <class 'decimal.Decimal'>('0')\nE        +      where <class 'decimal.Decimal'> = decimal.Decimal\n\ntests/test_numbers.py:729: AssertionError"}, "teardown": {"duration": 0.00021156900000018908, "outcome": "passed"}}, {"nodeid": "tests/test_numbers.py::test_format_scientific_precision[0.0-0E0]", "lineno": 704, "outcome": "failed", "keywords": ["test_format_scientific_precision[0.0-0E0]", "parametrize", "pytestmark", "0.0-0E0", "test_numbers.py", "tests", "testbed", ""], "setup": {"duration": 0.000260572000000181, "outcome": "passed"}, "call": {"duration": 0.00031869300000053613, "outcome": "failed", "crash": {"path": "/testbed/tests/test_numbers.py", "lineno": 729, "message": "AssertionError: assert None == '0E0'\n +  where None = <function format_scientific at 0x7fda99608a60>(Decimal('0.0'), locale='en_US', decimal_quantization=False)\n +    where <function format_scientific at 0x7fda99608a60> = numbers.format_scientific\n +    and   Decimal('0.0') = <class 'decimal.Decimal'>('0.0')\n +      where <class 'decimal.Decimal'> = decimal.Decimal"}, "traceback": [{"path": "tests/test_numbers.py", "lineno": 729, "message": "AssertionError"}], "longrepr": "input_value = '0.0', expected_value = '0E0'\n\n    @pytest.mark.parametrize('input_value, expected_value', [\n        ('10000', '1E4'),\n        ('1', '1E0'),\n        ('1.0', '1E0'),\n        ('1.1', '1.1E0'),\n        ('1.11', '1.11E0'),\n        ('1.110', '1.11E0'),\n        ('1.001', '1.001E0'),\n        ('1.00100', '1.001E0'),\n        ('01.00100', '1.001E0'),\n        ('101.00100', '1.01001E2'),\n        ('00000', '0E0'),\n        ('0', '0E0'),\n        ('0.0', '0E0'),\n        ('0.1', '1E-1'),\n        ('0.11', '1.1E-1'),\n        ('0.110', '1.1E-1'),\n        ('0.001', '1E-3'),\n        ('0.00100', '1E-3'),\n        ('00.00100', '1E-3'),\n        ('000.00100', '1E-3'),\n    ])\n    def test_format_scientific_precision(input_value, expected_value):\n        # Test precision conservation.\n>       assert numbers.format_scientific(\n            decimal.Decimal(input_value), locale='en_US', decimal_quantization=False) == expected_value\nE       AssertionError: assert None == '0E0'\nE        +  where None = <function format_scientific at 0x7fda99608a60>(Decimal('0.0'), locale='en_US', decimal_quantization=False)\nE        +    where <function format_scientific at 0x7fda99608a60> = numbers.format_scientific\nE        +    and   Decimal('0.0') = <class 'decimal.Decimal'>('0.0')\nE        +      where <class 'decimal.Decimal'> = decimal.Decimal\n\ntests/test_numbers.py:729: AssertionError"}, "teardown": {"duration": 0.00021968500000024704, "outcome": "passed"}}, {"nodeid": "tests/test_numbers.py::test_format_scientific_precision[0.1-1E-1]", "lineno": 704, "outcome": "failed", "keywords": ["test_format_scientific_precision[0.1-1E-1]", "parametrize", "pytestmark", "0.1-1E-1", "test_numbers.py", "tests", "testbed", ""], "setup": {"duration": 0.0002518040000003552, "outcome": "passed"}, "call": {"duration": 0.00030143599999998827, "outcome": "failed", "crash": {"path": "/testbed/tests/test_numbers.py", "lineno": 729, "message": "AssertionError: assert None == '1E-1'\n +  where None = <function format_scientific at 0x7fda99608a60>(Decimal('0.1'), locale='en_US', decimal_quantization=False)\n +    where <function format_scientific at 0x7fda99608a60> = numbers.format_scientific\n +    and   Decimal('0.1') = <class 'decimal.Decimal'>('0.1')\n +      where <class 'decimal.Decimal'> = decimal.Decimal"}, "traceback": [{"path": "tests/test_numbers.py", "lineno": 729, "message": "AssertionError"}], "longrepr": "input_value = '0.1', expected_value = '1E-1'\n\n    @pytest.mark.parametrize('input_value, expected_value', [\n        ('10000', '1E4'),\n        ('1', '1E0'),\n        ('1.0', '1E0'),\n        ('1.1', '1.1E0'),\n        ('1.11', '1.11E0'),\n        ('1.110', '1.11E0'),\n        ('1.001', '1.001E0'),\n        ('1.00100', '1.001E0'),\n        ('01.00100', '1.001E0'),\n        ('101.00100', '1.01001E2'),\n        ('00000', '0E0'),\n        ('0', '0E0'),\n        ('0.0', '0E0'),\n        ('0.1', '1E-1'),\n        ('0.11', '1.1E-1'),\n        ('0.110', '1.1E-1'),\n        ('0.001', '1E-3'),\n        ('0.00100', '1E-3'),\n        ('00.00100', '1E-3'),\n        ('000.00100', '1E-3'),\n    ])\n    def test_format_scientific_precision(input_value, expected_value):\n        # Test precision conservation.\n>       assert numbers.format_scientific(\n            decimal.Decimal(input_value), locale='en_US', decimal_quantization=False) == expected_value\nE       AssertionError: assert None == '1E-1'\nE        +  where None = <function format_scientific at 0x7fda99608a60>(Decimal('0.1'), locale='en_US', decimal_quantization=False)\nE        +    where <function format_scientific at 0x7fda99608a60> = numbers.format_scientific\nE        +    and   Decimal('0.1') = <class 'decimal.Decimal'>('0.1')\nE        +      where <class 'decimal.Decimal'> = decimal.Decimal\n\ntests/test_numbers.py:729: AssertionError"}, "teardown": {"duration": 0.00021125600000004852, "outcome": "passed"}}, {"nodeid": "tests/test_numbers.py::test_format_scientific_precision[0.11-1.1E-1]", "lineno": 704, "outcome": "failed", "keywords": ["test_format_scientific_precision[0.11-1.1E-1]", "parametrize", "pytestmark", "0.11-1.1E-1", "test_numbers.py", "tests", "testbed", ""], "setup": {"duration": 0.0002441950000005022, "outcome": "passed"}, "call": {"duration": 0.00029730700000030197, "outcome": "failed", "crash": {"path": "/testbed/tests/test_numbers.py", "lineno": 729, "message": "AssertionError: assert None == '1.1E-1'\n +  where None = <function format_scientific at 0x7fda99608a60>(Decimal('0.11'), locale='en_US', decimal_quantization=False)\n +    where <function format_scientific at 0x7fda99608a60> = numbers.format_scientific\n +    and   Decimal('0.11') = <class 'decimal.Decimal'>('0.11')\n +      where <class 'decimal.Decimal'> = decimal.Decimal"}, "traceback": [{"path": "tests/test_numbers.py", "lineno": 729, "message": "AssertionError"}], "longrepr": "input_value = '0.11', expected_value = '1.1E-1'\n\n    @pytest.mark.parametrize('input_value, expected_value', [\n        ('10000', '1E4'),\n        ('1', '1E0'),\n        ('1.0', '1E0'),\n        ('1.1', '1.1E0'),\n        ('1.11', '1.11E0'),\n        ('1.110', '1.11E0'),\n        ('1.001', '1.001E0'),\n        ('1.00100', '1.001E0'),\n        ('01.00100', '1.001E0'),\n        ('101.00100', '1.01001E2'),\n        ('00000', '0E0'),\n        ('0', '0E0'),\n        ('0.0', '0E0'),\n        ('0.1', '1E-1'),\n        ('0.11', '1.1E-1'),\n        ('0.110', '1.1E-1'),\n        ('0.001', '1E-3'),\n        ('0.00100', '1E-3'),\n        ('00.00100', '1E-3'),\n        ('000.00100', '1E-3'),\n    ])\n    def test_format_scientific_precision(input_value, expected_value):\n        # Test precision conservation.\n>       assert numbers.format_scientific(\n            decimal.Decimal(input_value), locale='en_US', decimal_quantization=False) == expected_value\nE       AssertionError: assert None == '1.1E-1'\nE        +  where None = <function format_scientific at 0x7fda99608a60>(Decimal('0.11'), locale='en_US', decimal_quantization=False)\nE        +    where <function format_scientific at 0x7fda99608a60> = numbers.format_scientific\nE        +    and   Decimal('0.11') = <class 'decimal.Decimal'>('0.11')\nE        +      where <class 'decimal.Decimal'> = decimal.Decimal\n\ntests/test_numbers.py:729: AssertionError"}, "teardown": {"duration": 0.00024320399999933073, "outcome": "passed"}}, {"nodeid": "tests/test_numbers.py::test_format_scientific_precision[0.110-1.1E-1]", "lineno": 704, "outcome": "failed", "keywords": ["test_format_scientific_precision[0.110-1.1E-1]", "parametrize", "pytestmark", "0.110-1.1E-1", "test_numbers.py", "tests", "testbed", ""], "setup": {"duration": 0.0002708360000003296, "outcome": "passed"}, "call": {"duration": 0.00031857699999982003, "outcome": "failed", "crash": {"path": "/testbed/tests/test_numbers.py", "lineno": 729, "message": "AssertionError: assert None == '1.1E-1'\n +  where None = <function format_scientific at 0x7fda99608a60>(Decimal('0.110'), locale='en_US', decimal_quantization=False)\n +    where <function format_scientific at 0x7fda99608a60> = numbers.format_scientific\n +    and   Decimal('0.110') = <class 'decimal.Decimal'>('0.110')\n +      where <class 'decimal.Decimal'> = decimal.Decimal"}, "traceback": [{"path": "tests/test_numbers.py", "lineno": 729, "message": "AssertionError"}], "longrepr": "input_value = '0.110', expected_value = '1.1E-1'\n\n    @pytest.mark.parametrize('input_value, expected_value', [\n        ('10000', '1E4'),\n        ('1', '1E0'),\n        ('1.0', '1E0'),\n        ('1.1', '1.1E0'),\n        ('1.11', '1.11E0'),\n        ('1.110', '1.11E0'),\n        ('1.001', '1.001E0'),\n        ('1.00100', '1.001E0'),\n        ('01.00100', '1.001E0'),\n        ('101.00100', '1.01001E2'),\n        ('00000', '0E0'),\n        ('0', '0E0'),\n        ('0.0', '0E0'),\n        ('0.1', '1E-1'),\n        ('0.11', '1.1E-1'),\n        ('0.110', '1.1E-1'),\n        ('0.001', '1E-3'),\n        ('0.00100', '1E-3'),\n        ('00.00100', '1E-3'),\n        ('000.00100', '1E-3'),\n    ])\n    def test_format_scientific_precision(input_value, expected_value):\n        # Test precision conservation.\n>       assert numbers.format_scientific(\n            decimal.Decimal(input_value), locale='en_US', decimal_quantization=False) == expected_value\nE       AssertionError: assert None == '1.1E-1'\nE        +  where None = <function format_scientific at 0x7fda99608a60>(Decimal('0.110'), locale='en_US', decimal_quantization=False)\nE        +    where <function format_scientific at 0x7fda99608a60> = numbers.format_scientific\nE        +    and   Decimal('0.110') = <class 'decimal.Decimal'>('0.110')\nE        +      where <class 'decimal.Decimal'> = decimal.Decimal\n\ntests/test_numbers.py:729: AssertionError"}, "teardown": {"duration": 0.0002118759999998332, "outcome": "passed"}}, {"nodeid": "tests/test_numbers.py::test_format_scientific_precision[0.001-1E-3]", "lineno": 704, "outcome": "failed", "keywords": ["test_format_scientific_precision[0.001-1E-3]", "parametrize", "pytestmark", "0.001-1E-3", "test_numbers.py", "tests", "testbed", ""], "setup": {"duration": 0.00023950499999969566, "outcome": "passed"}, "call": {"duration": 0.0003127769999995422, "outcome": "failed", "crash": {"path": "/testbed/tests/test_numbers.py", "lineno": 729, "message": "AssertionError: assert None == '1E-3'\n +  where None = <function format_scientific at 0x7fda99608a60>(Decimal('0.001'), locale='en_US', decimal_quantization=False)\n +    where <function format_scientific at 0x7fda99608a60> = numbers.format_scientific\n +    and   Decimal('0.001') = <class 'decimal.Decimal'>('0.001')\n +      where <class 'decimal.Decimal'> = decimal.Decimal"}, "traceback": [{"path": "tests/test_numbers.py", "lineno": 729, "message": "AssertionError"}], "longrepr": "input_value = '0.001', expected_value = '1E-3'\n\n    @pytest.mark.parametrize('input_value, expected_value', [\n        ('10000', '1E4'),\n        ('1', '1E0'),\n        ('1.0', '1E0'),\n        ('1.1', '1.1E0'),\n        ('1.11', '1.11E0'),\n        ('1.110', '1.11E0'),\n        ('1.001', '1.001E0'),\n        ('1.00100', '1.001E0'),\n        ('01.00100', '1.001E0'),\n        ('101.00100', '1.01001E2'),\n        ('00000', '0E0'),\n        ('0', '0E0'),\n        ('0.0', '0E0'),\n        ('0.1', '1E-1'),\n        ('0.11', '1.1E-1'),\n        ('0.110', '1.1E-1'),\n        ('0.001', '1E-3'),\n        ('0.00100', '1E-3'),\n        ('00.00100', '1E-3'),\n        ('000.00100', '1E-3'),\n    ])\n    def test_format_scientific_precision(input_value, expected_value):\n        # Test precision conservation.\n>       assert numbers.format_scientific(\n            decimal.Decimal(input_value), locale='en_US', decimal_quantization=False) == expected_value\nE       AssertionError: assert None == '1E-3'\nE        +  where None = <function format_scientific at 0x7fda99608a60>(Decimal('0.001'), locale='en_US', decimal_quantization=False)\nE        +    where <function format_scientific at 0x7fda99608a60> = numbers.format_scientific\nE        +    and   Decimal('0.001') = <class 'decimal.Decimal'>('0.001')\nE        +      where <class 'decimal.Decimal'> = decimal.Decimal\n\ntests/test_numbers.py:729: AssertionError"}, "teardown": {"duration": 0.00021335200000027754, "outcome": "passed"}}, {"nodeid": "tests/test_numbers.py::test_format_scientific_precision[0.00100-1E-3]", "lineno": 704, "outcome": "failed", "keywords": ["test_format_scientific_precision[0.00100-1E-3]", "parametrize", "pytestmark", "0.00100-1E-3", "test_numbers.py", "tests", "testbed", ""], "setup": {"duration": 0.00023529799999977286, "outcome": "passed"}, "call": {"duration": 0.0002924019999994698, "outcome": "failed", "crash": {"path": "/testbed/tests/test_numbers.py", "lineno": 729, "message": "AssertionError: assert None == '1E-3'\n +  where None = <function format_scientific at 0x7fda99608a60>(Decimal('0.00100'), locale='en_US', decimal_quantization=False)\n +    where <function format_scientific at 0x7fda99608a60> = numbers.format_scientific\n +    and   Decimal('0.00100') = <class 'decimal.Decimal'>('0.00100')\n +      where <class 'decimal.Decimal'> = decimal.Decimal"}, "traceback": [{"path": "tests/test_numbers.py", "lineno": 729, "message": "AssertionError"}], "longrepr": "input_value = '0.00100', expected_value = '1E-3'\n\n    @pytest.mark.parametrize('input_value, expected_value', [\n        ('10000', '1E4'),\n        ('1', '1E0'),\n        ('1.0', '1E0'),\n        ('1.1', '1.1E0'),\n        ('1.11', '1.11E0'),\n        ('1.110', '1.11E0'),\n        ('1.001', '1.001E0'),\n        ('1.00100', '1.001E0'),\n        ('01.00100', '1.001E0'),\n        ('101.00100', '1.01001E2'),\n        ('00000', '0E0'),\n        ('0', '0E0'),\n        ('0.0', '0E0'),\n        ('0.1', '1E-1'),\n        ('0.11', '1.1E-1'),\n        ('0.110', '1.1E-1'),\n        ('0.001', '1E-3'),\n        ('0.00100', '1E-3'),\n        ('00.00100', '1E-3'),\n        ('000.00100', '1E-3'),\n    ])\n    def test_format_scientific_precision(input_value, expected_value):\n        # Test precision conservation.\n>       assert numbers.format_scientific(\n            decimal.Decimal(input_value), locale='en_US', decimal_quantization=False) == expected_value\nE       AssertionError: assert None == '1E-3'\nE        +  where None = <function format_scientific at 0x7fda99608a60>(Decimal('0.00100'), locale='en_US', decimal_quantization=False)\nE        +    where <function format_scientific at 0x7fda99608a60> = numbers.format_scientific\nE        +    and   Decimal('0.00100') = <class 'decimal.Decimal'>('0.00100')\nE        +      where <class 'decimal.Decimal'> = decimal.Decimal\n\ntests/test_numbers.py:729: AssertionError"}, "teardown": {"duration": 0.00020517000000008778, "outcome": "passed"}}, {"nodeid": "tests/test_numbers.py::test_format_scientific_precision[00.00100-1E-3]", "lineno": 704, "outcome": "failed", "keywords": ["test_format_scientific_precision[00.00100-1E-3]", "parametrize", "pytestmark", "00.00100-1E-3", "test_numbers.py", "tests", "testbed", ""], "setup": {"duration": 0.00024159600000039916, "outcome": "passed"}, "call": {"duration": 0.00030815099999959017, "outcome": "failed", "crash": {"path": "/testbed/tests/test_numbers.py", "lineno": 729, "message": "AssertionError: assert None == '1E-3'\n +  where None = <function format_scientific at 0x7fda99608a60>(Decimal('0.00100'), locale='en_US', decimal_quantization=False)\n +    where <function format_scientific at 0x7fda99608a60> = numbers.format_scientific\n +    and   Decimal('0.00100') = <class 'decimal.Decimal'>('00.00100')\n +      where <class 'decimal.Decimal'> = decimal.Decimal"}, "traceback": [{"path": "tests/test_numbers.py", "lineno": 729, "message": "AssertionError"}], "longrepr": "input_value = '00.00100', expected_value = '1E-3'\n\n    @pytest.mark.parametrize('input_value, expected_value', [\n        ('10000', '1E4'),\n        ('1', '1E0'),\n        ('1.0', '1E0'),\n        ('1.1', '1.1E0'),\n        ('1.11', '1.11E0'),\n        ('1.110', '1.11E0'),\n        ('1.001', '1.001E0'),\n        ('1.00100', '1.001E0'),\n        ('01.00100', '1.001E0'),\n        ('101.00100', '1.01001E2'),\n        ('00000', '0E0'),\n        ('0', '0E0'),\n        ('0.0', '0E0'),\n        ('0.1', '1E-1'),\n        ('0.11', '1.1E-1'),\n        ('0.110', '1.1E-1'),\n        ('0.001', '1E-3'),\n        ('0.00100', '1E-3'),\n        ('00.00100', '1E-3'),\n        ('000.00100', '1E-3'),\n    ])\n    def test_format_scientific_precision(input_value, expected_value):\n        # Test precision conservation.\n>       assert numbers.format_scientific(\n            decimal.Decimal(input_value), locale='en_US', decimal_quantization=False) == expected_value\nE       AssertionError: assert None == '1E-3'\nE        +  where None = <function format_scientific at 0x7fda99608a60>(Decimal('0.00100'), locale='en_US', decimal_quantization=False)\nE        +    where <function format_scientific at 0x7fda99608a60> = numbers.format_scientific\nE        +    and   Decimal('0.00100') = <class 'decimal.Decimal'>('00.00100')\nE        +      where <class 'decimal.Decimal'> = decimal.Decimal\n\ntests/test_numbers.py:729: AssertionError"}, "teardown": {"duration": 0.00021594000000035862, "outcome": "passed"}}, {"nodeid": "tests/test_numbers.py::test_format_scientific_precision[000.00100-1E-3]", "lineno": 704, "outcome": "failed", "keywords": ["test_format_scientific_precision[000.00100-1E-3]", "parametrize", "pytestmark", "000.00100-1E-3", "test_numbers.py", "tests", "testbed", ""], "setup": {"duration": 0.0002507380000000836, "outcome": "passed"}, "call": {"duration": 0.00030205399999960747, "outcome": "failed", "crash": {"path": "/testbed/tests/test_numbers.py", "lineno": 729, "message": "AssertionError: assert None == '1E-3'\n +  where None = <function format_scientific at 0x7fda99608a60>(Decimal('0.00100'), locale='en_US', decimal_quantization=False)\n +    where <function format_scientific at 0x7fda99608a60> = numbers.format_scientific\n +    and   Decimal('0.00100') = <class 'decimal.Decimal'>('000.00100')\n +      where <class 'decimal.Decimal'> = decimal.Decimal"}, "traceback": [{"path": "tests/test_numbers.py", "lineno": 729, "message": "AssertionError"}], "longrepr": "input_value = '000.00100', expected_value = '1E-3'\n\n    @pytest.mark.parametrize('input_value, expected_value', [\n        ('10000', '1E4'),\n        ('1', '1E0'),\n        ('1.0', '1E0'),\n        ('1.1', '1.1E0'),\n        ('1.11', '1.11E0'),\n        ('1.110', '1.11E0'),\n        ('1.001', '1.001E0'),\n        ('1.00100', '1.001E0'),\n        ('01.00100', '1.001E0'),\n        ('101.00100', '1.01001E2'),\n        ('00000', '0E0'),\n        ('0', '0E0'),\n        ('0.0', '0E0'),\n        ('0.1', '1E-1'),\n        ('0.11', '1.1E-1'),\n        ('0.110', '1.1E-1'),\n        ('0.001', '1E-3'),\n        ('0.00100', '1E-3'),\n        ('00.00100', '1E-3'),\n        ('000.00100', '1E-3'),\n    ])\n    def test_format_scientific_precision(input_value, expected_value):\n        # Test precision conservation.\n>       assert numbers.format_scientific(\n            decimal.Decimal(input_value), locale='en_US', decimal_quantization=False) == expected_value\nE       AssertionError: assert None == '1E-3'\nE        +  where None = <function format_scientific at 0x7fda99608a60>(Decimal('0.00100'), locale='en_US', decimal_quantization=False)\nE        +    where <function format_scientific at 0x7fda99608a60> = numbers.format_scientific\nE        +    and   Decimal('0.00100') = <class 'decimal.Decimal'>('000.00100')\nE        +      where <class 'decimal.Decimal'> = decimal.Decimal\n\ntests/test_numbers.py:729: AssertionError"}, "teardown": {"duration": 0.00021917100000035106, "outcome": "passed"}}, {"nodeid": "tests/test_numbers.py::test_format_scientific_quantization", "lineno": 732, "outcome": "failed", "keywords": ["test_format_scientific_quantization", "test_numbers.py", "tests", "testbed", ""], "setup": {"duration": 0.00015630599999916228, "outcome": "passed"}, "call": {"duration": 0.00016393599999986463, "outcome": "failed", "crash": {"path": "/testbed/tests/test_numbers.py", "lineno": 735, "message": "TypeError: 'NoneType' object is not iterable"}, "traceback": [{"path": "tests/test_numbers.py", "lineno": 735, "message": "TypeError"}], "longrepr": "def test_format_scientific_quantization():\n        # Test all locales.\n>       for locale_code in localedata.locale_identifiers():\nE       TypeError: 'NoneType' object is not iterable\n\ntests/test_numbers.py:735: TypeError"}, "teardown": {"duration": 0.00018048600000053483, "outcome": "passed"}}, {"nodeid": "tests/test_numbers.py::test_parse_number", "lineno": 739, "outcome": "failed", "keywords": ["test_parse_number", "test_numbers.py", "tests", "testbed", ""], "setup": {"duration": 0.0001523030000001313, "outcome": "passed"}, "call": {"duration": 0.00028126399999983676, "outcome": "failed", "crash": {"path": "/testbed/tests/test_numbers.py", "lineno": 741, "message": "AssertionError: assert None == 1099\n +  where None = <function parse_number at 0x7fda99608af0>('1,099', locale='en_US')\n +    where <function parse_number at 0x7fda99608af0> = numbers.parse_number"}, "traceback": [{"path": "tests/test_numbers.py", "lineno": 741, "message": "AssertionError"}], "longrepr": "def test_parse_number():\n>       assert numbers.parse_number('1,099', locale='en_US') == 1099\nE       AssertionError: assert None == 1099\nE        +  where None = <function parse_number at 0x7fda99608af0>('1,099', locale='en_US')\nE        +    where <function parse_number at 0x7fda99608af0> = numbers.parse_number\n\ntests/test_numbers.py:741: AssertionError"}, "teardown": {"duration": 0.0002405279999999621, "outcome": "passed"}}, {"nodeid": "tests/test_numbers.py::test_parse_decimal", "lineno": 751, "outcome": "failed", "keywords": ["test_parse_decimal", "test_numbers.py", "tests", "testbed", ""], "setup": {"duration": 0.00015970900000006338, "outcome": "passed"}, "call": {"duration": 0.00033056599999969905, "outcome": "failed", "crash": {"path": "/testbed/tests/test_numbers.py", "lineno": 753, "message": "AssertionError: assert None == Decimal('1099.98')\n +  where None = <function parse_decimal at 0x7fda99608c10>('1,099.98', locale='en_US')\n +    where <function parse_decimal at 0x7fda99608c10> = numbers.parse_decimal\n +  and   Decimal('1099.98') = <class 'decimal.Decimal'>('1099.98')\n +    where <class 'decimal.Decimal'> = decimal.Decimal"}, "traceback": [{"path": "tests/test_numbers.py", "lineno": 753, "message": "AssertionError"}], "longrepr": "def test_parse_decimal():\n>       assert (numbers.parse_decimal('1,099.98', locale='en_US')\n                == decimal.Decimal('1099.98'))\nE       AssertionError: assert None == Decimal('1099.98')\nE        +  where None = <function parse_decimal at 0x7fda99608c10>('1,099.98', locale='en_US')\nE        +    where <function parse_decimal at 0x7fda99608c10> = numbers.parse_decimal\nE        +  and   Decimal('1099.98') = <class 'decimal.Decimal'>('1099.98')\nE        +    where <class 'decimal.Decimal'> = decimal.Decimal\n\ntests/test_numbers.py:753: AssertionError"}, "teardown": {"duration": 0.0002478090000002098, "outcome": "passed"}}, {"nodeid": "tests/test_numbers.py::test_parse_grouping", "lineno": 761, "outcome": "failed", "keywords": ["test_parse_grouping", "test_numbers.py", "tests", "testbed", ""], "setup": {"duration": 0.00016433899999945822, "outcome": "passed"}, "call": {"duration": 0.00029687500000008527, "outcome": "failed", "crash": {"path": "/testbed/tests/test_numbers.py", "lineno": 763, "message": "AssertionError: assert None == (1000, 1000)\n +  where None = <function parse_grouping at 0x7fda99608d30>('##')\n +    where <function parse_grouping at 0x7fda99608d30> = numbers.parse_grouping"}, "traceback": [{"path": "tests/test_numbers.py", "lineno": 763, "message": "AssertionError"}], "longrepr": "def test_parse_grouping():\n>       assert numbers.parse_grouping('##') == (1000, 1000)\nE       AssertionError: assert None == (1000, 1000)\nE        +  where None = <function parse_grouping at 0x7fda99608d30>('##')\nE        +    where <function parse_grouping at 0x7fda99608d30> = numbers.parse_grouping\n\ntests/test_numbers.py:763: AssertionError"}, "teardown": {"duration": 0.00020863299999973606, "outcome": "passed"}}, {"nodeid": "tests/test_numbers.py::test_parse_pattern", "lineno": 767, "outcome": "failed", "keywords": ["test_parse_pattern", "test_numbers.py", "tests", "testbed", ""], "setup": {"duration": 0.0001733030000004021, "outcome": "passed"}, "call": {"duration": 0.0001730880000003765, "outcome": "failed", "crash": {"path": "/testbed/tests/test_numbers.py", "lineno": 772, "message": "AttributeError: 'NoneType' object has no attribute 'pattern'"}, "traceback": [{"path": "tests/test_numbers.py", "lineno": 772, "message": "AttributeError"}], "longrepr": "def test_parse_pattern():\n    \n        # Original pattern is preserved\n        np = numbers.parse_pattern('\u00a4#,##0.00')\n>       assert np.pattern == '\u00a4#,##0.00'\nE       AttributeError: 'NoneType' object has no attribute 'pattern'\n\ntests/test_numbers.py:772: AttributeError"}, "teardown": {"duration": 0.00019221099999988667, "outcome": "passed"}}, {"nodeid": "tests/test_numbers.py::test_parse_pattern_negative", "lineno": 786, "outcome": "failed", "keywords": ["test_parse_pattern_negative", "test_numbers.py", "tests", "testbed", ""], "setup": {"duration": 0.00016527200000027165, "outcome": "passed"}, "call": {"duration": 0.0001709189999994365, "outcome": "failed", "crash": {"path": "/testbed/tests/test_numbers.py", "lineno": 791, "message": "AttributeError: 'NoneType' object has no attribute 'prefix'"}, "traceback": [{"path": "tests/test_numbers.py", "lineno": 791, "message": "AttributeError"}], "longrepr": "def test_parse_pattern_negative():\n    \n        # No negative format specified\n        np = numbers.parse_pattern('\u00a4#,##0.00')\n>       assert np.prefix == ('\u00a4', '-\u00a4')\nE       AttributeError: 'NoneType' object has no attribute 'prefix'\n\ntests/test_numbers.py:791: AttributeError"}, "teardown": {"duration": 0.00023827500000006552, "outcome": "passed"}}, {"nodeid": "tests/test_numbers.py::test_numberpattern_repr", "lineno": 804, "outcome": "failed", "keywords": ["test_numberpattern_repr", "test_numbers.py", "tests", "testbed", ""], "setup": {"duration": 0.00016019200000005895, "outcome": "passed"}, "call": {"duration": 0.0002736060000003704, "outcome": "failed", "crash": {"path": "/testbed/tests/test_numbers.py", "lineno": 812, "message": "assert \"'\u00a4#,##0.00;(\u00a4#,##0.00)'\" in 'None'\n +  where \"'\u00a4#,##0.00;(\u00a4#,##0.00)'\" = repr('\u00a4#,##0.00;(\u00a4#,##0.00)')\n +  and   'None' = repr(None)"}, "traceback": [{"path": "tests/test_numbers.py", "lineno": 812, "message": "AssertionError"}], "longrepr": "def test_numberpattern_repr():\n        \"\"\"repr() outputs the pattern string\"\"\"\n    \n        # This implementation looks a bit funny, but that's cause strings are\n        # repr'd differently in Python 2 vs 3 and this test runs under both.\n        format = '\u00a4#,##0.00;(\u00a4#,##0.00)'\n        np = numbers.parse_pattern(format)\n>       assert repr(format) in repr(np)\nE       assert \"'\u00a4#,##0.00;(\u00a4#,##0.00)'\" in 'None'\nE        +  where \"'\u00a4#,##0.00;(\u00a4#,##0.00)'\" = repr('\u00a4#,##0.00;(\u00a4#,##0.00)')\nE        +  and   'None' = repr(None)\n\ntests/test_numbers.py:812: AssertionError"}, "teardown": {"duration": 0.0002115790000001283, "outcome": "passed"}}, {"nodeid": "tests/test_numbers.py::test_parse_static_pattern", "lineno": 814, "outcome": "failed", "keywords": ["test_parse_static_pattern", "test_numbers.py", "tests", "testbed", ""], "setup": {"duration": 0.00016565899999942957, "outcome": "passed"}, "call": {"duration": 0.0002334140000002094, "outcome": "failed", "crash": {"path": "/testbed/tests/test_numbers.py", "lineno": 816, "message": "AssertionError: assert None\n +  where None = <function parse_pattern at 0x7fda99608dc0>('Kun')\n +    where <function parse_pattern at 0x7fda99608dc0> = numbers.parse_pattern"}, "traceback": [{"path": "tests/test_numbers.py", "lineno": 816, "message": "AssertionError"}], "longrepr": "def test_parse_static_pattern():\n>       assert numbers.parse_pattern('Kun')  # in the So locale in CLDR 30\nE       AssertionError: assert None\nE        +  where None = <function parse_pattern at 0x7fda99608dc0>('Kun')\nE        +    where <function parse_pattern at 0x7fda99608dc0> = numbers.parse_pattern\n\ntests/test_numbers.py:816: AssertionError"}, "teardown": {"duration": 0.0002520489999993103, "outcome": "passed"}}, {"nodeid": "tests/test_numbers.py::test_parse_decimal_nbsp_heuristics", "lineno": 819, "outcome": "failed", "keywords": ["test_parse_decimal_nbsp_heuristics", "test_numbers.py", "tests", "testbed", ""], "setup": {"duration": 0.00016032900000073624, "outcome": "passed"}, "call": {"duration": 0.00031703500000013207, "outcome": "failed", "crash": {"path": "/testbed/tests/test_numbers.py", "lineno": 827, "message": "AssertionError: assert None == Decimal('12345.123')\n +  where None = <function parse_decimal at 0x7fda99608c10>('12 345.123', locale='fi')\n +    where <function parse_decimal at 0x7fda99608c10> = numbers.parse_decimal"}, "traceback": [{"path": "tests/test_numbers.py", "lineno": 827, "message": "AssertionError"}], "longrepr": "def test_parse_decimal_nbsp_heuristics():\n        # Re https://github.com/python-babel/babel/issues/637 \u2013\n        #    for locales (of which there are many) that use U+00A0 as the group\n        #    separator in numbers, it's reasonable to assume that input strings\n        #    with plain spaces actually should have U+00A0s instead.\n        #    This heuristic is only applied when strict=False.\n        n = decimal.Decimal(\"12345.123\")\n>       assert numbers.parse_decimal(\"12 345.123\", locale=\"fi\") == n\nE       AssertionError: assert None == Decimal('12345.123')\nE        +  where None = <function parse_decimal at 0x7fda99608c10>('12 345.123', locale='fi')\nE        +    where <function parse_decimal at 0x7fda99608c10> = numbers.parse_decimal\n\ntests/test_numbers.py:827: AssertionError"}, "teardown": {"duration": 0.00021823800000042581, "outcome": "passed"}}, {"nodeid": "tests/test_numbers.py::test_very_small_decimal_no_quantization", "lineno": 830, "outcome": "failed", "keywords": ["test_very_small_decimal_no_quantization", "test_numbers.py", "tests", "testbed", ""], "setup": {"duration": 0.000178480000000647, "outcome": "passed"}, "call": {"duration": 0.0003326040000004582, "outcome": "failed", "crash": {"path": "/testbed/tests/test_numbers.py", "lineno": 832, "message": "AssertionError: assert None == '0.0000001'\n +  where None = <function format_decimal at 0x7fda99608700>(Decimal('1E-7'), locale='en', decimal_quantization=False)\n +    where <function format_decimal at 0x7fda99608700> = numbers.format_decimal\n +    and   Decimal('1E-7') = <class 'decimal.Decimal'>('1E-7')\n +      where <class 'decimal.Decimal'> = decimal.Decimal"}, "traceback": [{"path": "tests/test_numbers.py", "lineno": 832, "message": "AssertionError"}], "longrepr": "def test_very_small_decimal_no_quantization():\n>       assert numbers.format_decimal(decimal.Decimal('1E-7'), locale='en', decimal_quantization=False) == '0.0000001'\nE       AssertionError: assert None == '0.0000001'\nE        +  where None = <function format_decimal at 0x7fda99608700>(Decimal('1E-7'), locale='en', decimal_quantization=False)\nE        +    where <function format_decimal at 0x7fda99608700> = numbers.format_decimal\nE        +    and   Decimal('1E-7') = <class 'decimal.Decimal'>('1E-7')\nE        +      where <class 'decimal.Decimal'> = decimal.Decimal\n\ntests/test_numbers.py:832: AssertionError"}, "teardown": {"duration": 0.00020738699999967025, "outcome": "passed"}}, {"nodeid": "tests/test_numbers.py::test_single_quotes_in_pattern", "lineno": 834, "outcome": "failed", "keywords": ["test_single_quotes_in_pattern", "test_numbers.py", "tests", "testbed", ""], "setup": {"duration": 0.00015821199999965785, "outcome": "passed"}, "call": {"duration": 0.0003057929999998876, "outcome": "failed", "crash": {"path": "/testbed/tests/test_numbers.py", "lineno": 836, "message": "assert None == '@0.#120@01'\n +  where None = <function format_decimal at 0x7fda99608700>(123, \"'@0.#'00'@01'\", locale='en')\n +    where <function format_decimal at 0x7fda99608700> = numbers.format_decimal"}, "traceback": [{"path": "tests/test_numbers.py", "lineno": 836, "message": "AssertionError"}], "longrepr": "def test_single_quotes_in_pattern():\n>       assert numbers.format_decimal(123, \"'@0.#'00'@01'\", locale='en') == '@0.#120@01'\nE       assert None == '@0.#120@01'\nE        +  where None = <function format_decimal at 0x7fda99608700>(123, \"'@0.#'00'@01'\", locale='en')\nE        +    where <function format_decimal at 0x7fda99608700> = numbers.format_decimal\n\ntests/test_numbers.py:836: AssertionError"}, "teardown": {"duration": 0.00020414500000054403, "outcome": "passed"}}, {"nodeid": "tests/test_plural.py::test_plural_rule", "lineno": 21, "outcome": "failed", "keywords": ["test_plural_rule", "test_plural.py", "tests", "testbed", ""], "setup": {"duration": 0.00017102199999996515, "outcome": "passed"}, "call": {"duration": 0.0001867469999998761, "outcome": "failed", "crash": {"path": "/testbed/babel/plural.py", "lineno": 301, "message": "NameError: name 'tokenize_rule' is not defined"}, "traceback": [{"path": "tests/test_plural.py", "lineno": 23, "message": ""}, {"path": "babel/plural.py", "lineno": 91, "message": "in __init__"}, {"path": "babel/plural.py", "lineno": 301, "message": "NameError"}], "longrepr": "def test_plural_rule():\n>       rule = plural.PluralRule({'one': 'n is 1'})\n\ntests/test_plural.py:23: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nbabel/plural.py:91: in __init__\n    ast = _Parser(expr).ast\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <babel.plural._Parser object at 0x7fda9b991e40>, string = 'n is 1'\n\n    def __init__(self, string):\n>       self.tokens = tokenize_rule(string)\nE       NameError: name 'tokenize_rule' is not defined\n\nbabel/plural.py:301: NameError"}, "teardown": {"duration": 0.0002813029999995109, "outcome": "passed"}}, {"nodeid": "tests/test_plural.py::test_plural_rule_operands_i", "lineno": 30, "outcome": "failed", "keywords": ["test_plural_rule_operands_i", "test_plural.py", "tests", "testbed", ""], "setup": {"duration": 0.00017309399999998476, "outcome": "passed"}, "call": {"duration": 0.0001951089999998601, "outcome": "failed", "crash": {"path": "/testbed/babel/plural.py", "lineno": 301, "message": "NameError: name 'tokenize_rule' is not defined"}, "traceback": [{"path": "tests/test_plural.py", "lineno": 32, "message": ""}, {"path": "babel/plural.py", "lineno": 91, "message": "in __init__"}, {"path": "babel/plural.py", "lineno": 301, "message": "NameError"}], "longrepr": "def test_plural_rule_operands_i():\n>       rule = plural.PluralRule({'one': 'i is 1'})\n\ntests/test_plural.py:32: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nbabel/plural.py:91: in __init__\n    ast = _Parser(expr).ast\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <babel.plural._Parser object at 0x7fda995dfc40>, string = 'i is 1'\n\n    def __init__(self, string):\n>       self.tokens = tokenize_rule(string)\nE       NameError: name 'tokenize_rule' is not defined\n\nbabel/plural.py:301: NameError"}, "teardown": {"duration": 0.0001926460000003516, "outcome": "passed"}}, {"nodeid": "tests/test_plural.py::test_plural_rule_operands_v", "lineno": 36, "outcome": "failed", "keywords": ["test_plural_rule_operands_v", "test_plural.py", "tests", "testbed", ""], "setup": {"duration": 0.00015687899999949906, "outcome": "passed"}, "call": {"duration": 0.00017337400000005943, "outcome": "failed", "crash": {"path": "/testbed/babel/plural.py", "lineno": 301, "message": "NameError: name 'tokenize_rule' is not defined"}, "traceback": [{"path": "tests/test_plural.py", "lineno": 38, "message": ""}, {"path": "babel/plural.py", "lineno": 91, "message": "in __init__"}, {"path": "babel/plural.py", "lineno": 301, "message": "NameError"}], "longrepr": "def test_plural_rule_operands_v():\n>       rule = plural.PluralRule({'one': 'v is 2'})\n\ntests/test_plural.py:38: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nbabel/plural.py:91: in __init__\n    ast = _Parser(expr).ast\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <babel.plural._Parser object at 0x7fda9b5b1b70>, string = 'v is 2'\n\n    def __init__(self, string):\n>       self.tokens = tokenize_rule(string)\nE       NameError: name 'tokenize_rule' is not defined\n\nbabel/plural.py:301: NameError"}, "teardown": {"duration": 0.0001812399999998604, "outcome": "passed"}}, {"nodeid": "tests/test_plural.py::test_plural_rule_operands_w", "lineno": 43, "outcome": "failed", "keywords": ["test_plural_rule_operands_w", "test_plural.py", "tests", "testbed", ""], "setup": {"duration": 0.0001654049999997298, "outcome": "passed"}, "call": {"duration": 0.0001700439999998693, "outcome": "failed", "crash": {"path": "/testbed/babel/plural.py", "lineno": 301, "message": "NameError: name 'tokenize_rule' is not defined"}, "traceback": [{"path": "tests/test_plural.py", "lineno": 45, "message": ""}, {"path": "babel/plural.py", "lineno": 91, "message": "in __init__"}, {"path": "babel/plural.py", "lineno": 301, "message": "NameError"}], "longrepr": "def test_plural_rule_operands_w():\n>       rule = plural.PluralRule({'one': 'w is 2'})\n\ntests/test_plural.py:45: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nbabel/plural.py:91: in __init__\n    ast = _Parser(expr).ast\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <babel.plural._Parser object at 0x7fda9a67b640>, string = 'w is 2'\n\n    def __init__(self, string):\n>       self.tokens = tokenize_rule(string)\nE       NameError: name 'tokenize_rule' is not defined\n\nbabel/plural.py:301: NameError"}, "teardown": {"duration": 0.00018601400000051171, "outcome": "passed"}}, {"nodeid": "tests/test_plural.py::test_plural_rule_operands_f", "lineno": 50, "outcome": "failed", "keywords": ["test_plural_rule_operands_f", "test_plural.py", "tests", "testbed", ""], "setup": {"duration": 0.00015635499999966385, "outcome": "passed"}, "call": {"duration": 0.00016714000000028761, "outcome": "failed", "crash": {"path": "/testbed/babel/plural.py", "lineno": 301, "message": "NameError: name 'tokenize_rule' is not defined"}, "traceback": [{"path": "tests/test_plural.py", "lineno": 52, "message": ""}, {"path": "babel/plural.py", "lineno": 91, "message": "in __init__"}, {"path": "babel/plural.py", "lineno": 301, "message": "NameError"}], "longrepr": "def test_plural_rule_operands_f():\n>       rule = plural.PluralRule({'one': 'f is 20'})\n\ntests/test_plural.py:52: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nbabel/plural.py:91: in __init__\n    ast = _Parser(expr).ast\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <babel.plural._Parser object at 0x7fda9a2da1d0>, string = 'f is 20'\n\n    def __init__(self, string):\n>       self.tokens = tokenize_rule(string)\nE       NameError: name 'tokenize_rule' is not defined\n\nbabel/plural.py:301: NameError"}, "teardown": {"duration": 0.00018252899999993133, "outcome": "passed"}}, {"nodeid": "tests/test_plural.py::test_plural_rule_operands_t", "lineno": 57, "outcome": "failed", "keywords": ["test_plural_rule_operands_t", "test_plural.py", "tests", "testbed", ""], "setup": {"duration": 0.00016554099999943617, "outcome": "passed"}, "call": {"duration": 0.00017063199999967082, "outcome": "failed", "crash": {"path": "/testbed/babel/plural.py", "lineno": 301, "message": "NameError: name 'tokenize_rule' is not defined"}, "traceback": [{"path": "tests/test_plural.py", "lineno": 59, "message": ""}, {"path": "babel/plural.py", "lineno": 91, "message": "in __init__"}, {"path": "babel/plural.py", "lineno": 301, "message": "NameError"}], "longrepr": "def test_plural_rule_operands_t():\n>       rule = plural.PluralRule({'one': 't = 5'})\n\ntests/test_plural.py:59: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nbabel/plural.py:91: in __init__\n    ast = _Parser(expr).ast\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <babel.plural._Parser object at 0x7fda9af0fd00>, string = 't = 5'\n\n    def __init__(self, string):\n>       self.tokens = tokenize_rule(string)\nE       NameError: name 'tokenize_rule' is not defined\n\nbabel/plural.py:301: NameError"}, "teardown": {"duration": 0.00018313600000041674, "outcome": "passed"}}, {"nodeid": "tests/test_plural.py::test_plural_other_is_ignored", "lineno": 64, "outcome": "failed", "keywords": ["test_plural_other_is_ignored", "test_plural.py", "tests", "testbed", ""], "setup": {"duration": 0.00015633399999970266, "outcome": "passed"}, "call": {"duration": 0.0001671280000001829, "outcome": "failed", "crash": {"path": "/testbed/babel/plural.py", "lineno": 301, "message": "NameError: name 'tokenize_rule' is not defined"}, "traceback": [{"path": "tests/test_plural.py", "lineno": 66, "message": ""}, {"path": "babel/plural.py", "lineno": 91, "message": "in __init__"}, {"path": "babel/plural.py", "lineno": 301, "message": "NameError"}], "longrepr": "def test_plural_other_is_ignored():\n>       rule = plural.PluralRule({'one': 'n is 1', 'other': '@integer 2'})\n\ntests/test_plural.py:66: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nbabel/plural.py:91: in __init__\n    ast = _Parser(expr).ast\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <babel.plural._Parser object at 0x7fda99eb3430>, string = 'n is 1'\n\n    def __init__(self, string):\n>       self.tokens = tokenize_rule(string)\nE       NameError: name 'tokenize_rule' is not defined\n\nbabel/plural.py:301: NameError"}, "teardown": {"duration": 0.0001827240000000785, "outcome": "passed"}}, {"nodeid": "tests/test_plural.py::test_to_javascript", "lineno": 69, "outcome": "failed", "keywords": ["test_to_javascript", "test_plural.py", "tests", "testbed", ""], "setup": {"duration": 0.00015317399999936754, "outcome": "passed"}, "call": {"duration": 0.0003139890000003476, "outcome": "failed", "crash": {"path": "/testbed/tests/test_plural.py", "lineno": 71, "message": "assert None == \"(function(n) { return (n == 1) ? 'one' : 'other'; })\"\n +  where None = <function to_javascript at 0x7fda9a6e79a0>({'one': 'n is 1'})\n +    where <function to_javascript at 0x7fda9a6e79a0> = plural.to_javascript"}, "traceback": [{"path": "tests/test_plural.py", "lineno": 71, "message": "AssertionError"}], "longrepr": "def test_to_javascript():\n>       assert (plural.to_javascript({'one': 'n is 1'})\n                == \"(function(n) { return (n == 1) ? 'one' : 'other'; })\")\nE       assert None == \"(function(n) { return (n == 1) ? 'one' : 'other'; })\"\nE        +  where None = <function to_javascript at 0x7fda9a6e79a0>({'one': 'n is 1'})\nE        +    where <function to_javascript at 0x7fda9a6e79a0> = plural.to_javascript\n\ntests/test_plural.py:71: AssertionError"}, "teardown": {"duration": 0.00017896600000000262, "outcome": "passed"}}, {"nodeid": "tests/test_plural.py::test_to_python", "lineno": 74, "outcome": "failed", "keywords": ["test_to_python", "test_plural.py", "tests", "testbed", ""], "setup": {"duration": 0.00016350900000006163, "outcome": "passed"}, "call": {"duration": 0.00016242200000071705, "outcome": "failed", "crash": {"path": "/testbed/tests/test_plural.py", "lineno": 77, "message": "TypeError: 'NoneType' object is not callable"}, "traceback": [{"path": "tests/test_plural.py", "lineno": 77, "message": "TypeError"}], "longrepr": "def test_to_python():\n        func = plural.to_python({'one': 'n is 1', 'few': 'n in 2..4'})\n>       assert func(1) == 'one'\nE       TypeError: 'NoneType' object is not callable\n\ntests/test_plural.py:77: TypeError"}, "teardown": {"duration": 0.00017941100000040677, "outcome": "passed"}}, {"nodeid": "tests/test_plural.py::test_to_gettext", "lineno": 84, "outcome": "failed", "keywords": ["test_to_gettext", "test_plural.py", "tests", "testbed", ""], "setup": {"duration": 0.0001506890000007033, "outcome": "passed"}, "call": {"duration": 0.0002989800000001708, "outcome": "failed", "crash": {"path": "/testbed/tests/test_plural.py", "lineno": 86, "message": "AssertionError: assert None == 'nplurals=3; plural=((n == 1) ? 0 : (n == 2) ? 1 : 2);'\n +  where None = <function to_gettext at 0x7fda9a6e7f40>({'one': 'n is 1', 'two': 'n is 2'})\n +    where <function to_gettext at 0x7fda9a6e7f40> = plural.to_gettext"}, "traceback": [{"path": "tests/test_plural.py", "lineno": 86, "message": "AssertionError"}], "longrepr": "def test_to_gettext():\n>       assert (plural.to_gettext({'one': 'n is 1', 'two': 'n is 2'})\n                == 'nplurals=3; plural=((n == 1) ? 0 : (n == 2) ? 1 : 2);')\nE       AssertionError: assert None == 'nplurals=3; plural=((n == 1) ? 0 : (n == 2) ? 1 : 2);'\nE        +  where None = <function to_gettext at 0x7fda9a6e7f40>({'one': 'n is 1', 'two': 'n is 2'})\nE        +    where <function to_gettext at 0x7fda9a6e7f40> = plural.to_gettext\n\ntests/test_plural.py:86: AssertionError"}, "teardown": {"duration": 0.00017976899999982976, "outcome": "passed"}}, {"nodeid": "tests/test_plural.py::test_in_range_list", "lineno": 89, "outcome": "failed", "keywords": ["test_in_range_list", "test_plural.py", "tests", "testbed", ""], "setup": {"duration": 0.0001536030000002242, "outcome": "passed"}, "call": {"duration": 0.0002368590000001447, "outcome": "failed", "crash": {"path": "/testbed/tests/test_plural.py", "lineno": 91, "message": "assert None\n +  where None = <function in_range_list at 0x7fda9a798040>(1, [(1, 3)])\n +    where <function in_range_list at 0x7fda9a798040> = plural.in_range_list"}, "traceback": [{"path": "tests/test_plural.py", "lineno": 91, "message": "AssertionError"}], "longrepr": "def test_in_range_list():\n>       assert plural.in_range_list(1, [(1, 3)])\nE       assert None\nE        +  where None = <function in_range_list at 0x7fda9a798040>(1, [(1, 3)])\nE        +    where <function in_range_list at 0x7fda9a798040> = plural.in_range_list\n\ntests/test_plural.py:91: AssertionError"}, "teardown": {"duration": 0.00017859400000030945, "outcome": "passed"}}, {"nodeid": "tests/test_plural.py::test_within_range_list", "lineno": 98, "outcome": "failed", "keywords": ["test_within_range_list", "test_plural.py", "tests", "testbed", ""], "setup": {"duration": 0.00015246400000012983, "outcome": "passed"}, "call": {"duration": 0.00024932300000024554, "outcome": "failed", "crash": {"path": "/testbed/tests/test_plural.py", "lineno": 100, "message": "assert None\n +  where None = <function within_range_list at 0x7fda9a7980d0>(1, [(1, 3)])\n +    where <function within_range_list at 0x7fda9a7980d0> = plural.within_range_list"}, "traceback": [{"path": "tests/test_plural.py", "lineno": 100, "message": "AssertionError"}], "longrepr": "def test_within_range_list():\n>       assert plural.within_range_list(1, [(1, 3)])\nE       assert None\nE        +  where None = <function within_range_list at 0x7fda9a7980d0>(1, [(1, 3)])\nE        +    where <function within_range_list at 0x7fda9a7980d0> = plural.within_range_list\n\ntests/test_plural.py:100: AssertionError"}, "teardown": {"duration": 0.00017650800000001965, "outcome": "passed"}}, {"nodeid": "tests/test_plural.py::test_cldr_modulo", "lineno": 107, "outcome": "failed", "keywords": ["test_cldr_modulo", "test_plural.py", "tests", "testbed", ""], "setup": {"duration": 0.00014873900000011986, "outcome": "passed"}, "call": {"duration": 0.0002689670000002309, "outcome": "failed", "crash": {"path": "/testbed/tests/test_plural.py", "lineno": 109, "message": "assert None == -3\n +  where None = <function cldr_modulo at 0x7fda9a798160>(-3, 5)\n +    where <function cldr_modulo at 0x7fda9a798160> = plural.cldr_modulo"}, "traceback": [{"path": "tests/test_plural.py", "lineno": 109, "message": "AssertionError"}], "longrepr": "def test_cldr_modulo():\n>       assert plural.cldr_modulo(-3, 5) == -3\nE       assert None == -3\nE        +  where None = <function cldr_modulo at 0x7fda9a798160>(-3, 5)\nE        +    where <function cldr_modulo at 0x7fda9a798160> = plural.cldr_modulo\n\ntests/test_plural.py:109: AssertionError"}, "teardown": {"duration": 0.00017678599999992883, "outcome": "passed"}}, {"nodeid": "tests/test_plural.py::test_plural_within_rules", "lineno": 113, "outcome": "failed", "keywords": ["test_plural_within_rules", "test_plural.py", "tests", "testbed", ""], "setup": {"duration": 0.0001491079999995648, "outcome": "passed"}, "call": {"duration": 0.00016348499999985222, "outcome": "failed", "crash": {"path": "/testbed/babel/plural.py", "lineno": 301, "message": "NameError: name 'tokenize_rule' is not defined"}, "traceback": [{"path": "tests/test_plural.py", "lineno": 115, "message": ""}, {"path": "babel/plural.py", "lineno": 91, "message": "in __init__"}, {"path": "babel/plural.py", "lineno": 301, "message": "NameError"}], "longrepr": "def test_plural_within_rules():\n>       p = plural.PluralRule({'one': 'n is 1', 'few': 'n within 2,4,7..9'})\n\ntests/test_plural.py:115: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nbabel/plural.py:91: in __init__\n    ast = _Parser(expr).ast\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <babel.plural._Parser object at 0x7fda9b5b1510>\nstring = 'n within 2,4,7..9'\n\n    def __init__(self, string):\n>       self.tokens = tokenize_rule(string)\nE       NameError: name 'tokenize_rule' is not defined\n\nbabel/plural.py:301: NameError"}, "teardown": {"duration": 0.00019174999999993503, "outcome": "passed"}}, {"nodeid": "tests/test_plural.py::test_locales_with_no_plural_rules_have_default", "lineno": 135, "outcome": "failed", "keywords": ["test_locales_with_no_plural_rules_have_default", "test_plural.py", "tests", "testbed", ""], "setup": {"duration": 0.00016153500000015697, "outcome": "passed"}, "call": {"duration": 0.00017442899999942085, "outcome": "failed", "crash": {"path": "/testbed/tests/test_plural.py", "lineno": 138, "message": "AttributeError: 'NoneType' object has no attribute 'plural_form'"}, "traceback": [{"path": "tests/test_plural.py", "lineno": 138, "message": "AttributeError"}], "longrepr": "def test_locales_with_no_plural_rules_have_default():\n        from babel import Locale\n>       pf = Locale.parse('ii').plural_form\nE       AttributeError: 'NoneType' object has no attribute 'plural_form'\n\ntests/test_plural.py:138: AttributeError"}, "teardown": {"duration": 0.0002036079999996332, "outcome": "passed"}}, {"nodeid": "tests/test_plural.py::test_tokenize_well_formed[-tokens0]", "lineno": 184, "outcome": "failed", "keywords": ["test_tokenize_well_formed[-tokens0]", "parametrize", "pytestmark", "-tokens0", "test_plural.py", "tests", "testbed", ""], "setup": {"duration": 0.00026317599999980956, "outcome": "passed"}, "call": {"duration": 0.00018423100000042325, "outcome": "failed", "crash": {"path": "/testbed/tests/test_plural.py", "lineno": 187, "message": "AttributeError: module 'babel.plural' has no attribute 'tokenize_rule'"}, "traceback": [{"path": "tests/test_plural.py", "lineno": 187, "message": "AttributeError"}], "longrepr": "rule_text = '', tokens = []\n\n    @pytest.mark.parametrize('rule_text,tokens', WELL_FORMED_TOKEN_TESTS)\n    def test_tokenize_well_formed(rule_text, tokens):\n>       assert plural.tokenize_rule(rule_text) == tokens\nE       AttributeError: module 'babel.plural' has no attribute 'tokenize_rule'\n\ntests/test_plural.py:187: AttributeError"}, "teardown": {"duration": 0.00032703599999983624, "outcome": "passed"}}, {"nodeid": "tests/test_plural.py::test_tokenize_well_formed[n = 1-tokens1]", "lineno": 184, "outcome": "failed", "keywords": ["test_tokenize_well_formed[n = 1-tokens1]", "parametrize", "pytestmark", "n = 1-tokens1", "test_plural.py", "tests", "testbed", ""], "setup": {"duration": 0.00029423400000005984, "outcome": "passed"}, "call": {"duration": 0.00019226499999991375, "outcome": "failed", "crash": {"path": "/testbed/tests/test_plural.py", "lineno": 187, "message": "AttributeError: module 'babel.plural' has no attribute 'tokenize_rule'"}, "traceback": [{"path": "tests/test_plural.py", "lineno": 187, "message": "AttributeError"}], "longrepr": "rule_text = 'n = 1', tokens = [('value', '1'), ('symbol', '='), ('word', 'n')]\n\n    @pytest.mark.parametrize('rule_text,tokens', WELL_FORMED_TOKEN_TESTS)\n    def test_tokenize_well_formed(rule_text, tokens):\n>       assert plural.tokenize_rule(rule_text) == tokens\nE       AttributeError: module 'babel.plural' has no attribute 'tokenize_rule'\n\ntests/test_plural.py:187: AttributeError"}, "teardown": {"duration": 0.000313180000000024, "outcome": "passed"}}, {"nodeid": "tests/test_plural.py::test_tokenize_well_formed[n = 1 @integer 1-tokens2]", "lineno": 184, "outcome": "failed", "keywords": ["test_tokenize_well_formed[n = 1 @integer 1-tokens2]", "parametrize", "pytestmark", "n = 1 @integer 1-tokens2", "test_plural.py", "tests", "testbed", ""], "setup": {"duration": 0.0002713359999999554, "outcome": "passed"}, "call": {"duration": 0.00018086299999975353, "outcome": "failed", "crash": {"path": "/testbed/tests/test_plural.py", "lineno": 187, "message": "AttributeError: module 'babel.plural' has no attribute 'tokenize_rule'"}, "traceback": [{"path": "tests/test_plural.py", "lineno": 187, "message": "AttributeError"}], "longrepr": "rule_text = 'n = 1 @integer 1'\ntokens = [('value', '1'), ('symbol', '='), ('word', 'n')]\n\n    @pytest.mark.parametrize('rule_text,tokens', WELL_FORMED_TOKEN_TESTS)\n    def test_tokenize_well_formed(rule_text, tokens):\n>       assert plural.tokenize_rule(rule_text) == tokens\nE       AttributeError: module 'babel.plural' has no attribute 'tokenize_rule'\n\ntests/test_plural.py:187: AttributeError"}, "teardown": {"duration": 0.00026324199999994136, "outcome": "passed"}}, {"nodeid": "tests/test_plural.py::test_tokenize_well_formed[n is 1-tokens3]", "lineno": 184, "outcome": "failed", "keywords": ["test_tokenize_well_formed[n is 1-tokens3]", "parametrize", "pytestmark", "n is 1-tokens3", "test_plural.py", "tests", "testbed", ""], "setup": {"duration": 0.0002715410000000418, "outcome": "passed"}, "call": {"duration": 0.0001791989999997412, "outcome": "failed", "crash": {"path": "/testbed/tests/test_plural.py", "lineno": 187, "message": "AttributeError: module 'babel.plural' has no attribute 'tokenize_rule'"}, "traceback": [{"path": "tests/test_plural.py", "lineno": 187, "message": "AttributeError"}], "longrepr": "rule_text = 'n is 1', tokens = [('value', '1'), ('word', 'is'), ('word', 'n')]\n\n    @pytest.mark.parametrize('rule_text,tokens', WELL_FORMED_TOKEN_TESTS)\n    def test_tokenize_well_formed(rule_text, tokens):\n>       assert plural.tokenize_rule(rule_text) == tokens\nE       AttributeError: module 'babel.plural' has no attribute 'tokenize_rule'\n\ntests/test_plural.py:187: AttributeError"}, "teardown": {"duration": 0.0002413509999996677, "outcome": "passed"}}, {"nodeid": "tests/test_plural.py::test_tokenize_well_formed[n % 100 = 3..10-tokens4]", "lineno": 184, "outcome": "failed", "keywords": ["test_tokenize_well_formed[n % 100 = 3..10-tokens4]", "parametrize", "pytestmark", "n % 100 = 3..10-tokens4", "test_plural.py", "tests", "testbed", ""], "setup": {"duration": 0.00025583100000048375, "outcome": "passed"}, "call": {"duration": 0.00017430900000015015, "outcome": "failed", "crash": {"path": "/testbed/tests/test_plural.py", "lineno": 187, "message": "AttributeError: module 'babel.plural' has no attribute 'tokenize_rule'"}, "traceback": [{"path": "tests/test_plural.py", "lineno": 187, "message": "AttributeError"}], "longrepr": "rule_text = 'n % 100 = 3..10'\ntokens = [('value', '10'), ('ellipsis', '..'), ('value', '3'), ('symbol', '='), ('value', '100'), ('symbol', '%'), ...]\n\n    @pytest.mark.parametrize('rule_text,tokens', WELL_FORMED_TOKEN_TESTS)\n    def test_tokenize_well_formed(rule_text, tokens):\n>       assert plural.tokenize_rule(rule_text) == tokens\nE       AttributeError: module 'babel.plural' has no attribute 'tokenize_rule'\n\ntests/test_plural.py:187: AttributeError"}, "teardown": {"duration": 0.00023089000000009463, "outcome": "passed"}}, {"nodeid": "tests/test_plural.py::test_tokenize_malformed[a = 1]", "lineno": 194, "outcome": "failed", "keywords": ["test_tokenize_malformed[a = 1]", "parametrize", "pytestmark", "a = 1", "test_plural.py", "tests", "testbed", ""], "setup": {"duration": 0.00022376200000007174, "outcome": "passed"}, "call": {"duration": 0.00020002799999918608, "outcome": "failed", "crash": {"path": "/testbed/tests/test_plural.py", "lineno": 198, "message": "AttributeError: module 'babel.plural' has no attribute 'tokenize_rule'"}, "traceback": [{"path": "tests/test_plural.py", "lineno": 198, "message": "AttributeError"}], "longrepr": "rule_text = 'a = 1'\n\n    @pytest.mark.parametrize('rule_text', MALFORMED_TOKEN_TESTS)\n    def test_tokenize_malformed(rule_text):\n        with pytest.raises(plural.RuleError):\n>           plural.tokenize_rule(rule_text)\nE           AttributeError: module 'babel.plural' has no attribute 'tokenize_rule'\n\ntests/test_plural.py:198: AttributeError"}, "teardown": {"duration": 0.0002274020000001542, "outcome": "passed"}}, {"nodeid": "tests/test_plural.py::test_tokenize_malformed[n ! 2]", "lineno": 194, "outcome": "failed", "keywords": ["test_tokenize_malformed[n ! 2]", "parametrize", "pytestmark", "n ! 2", "test_plural.py", "tests", "testbed", ""], "setup": {"duration": 0.00023163800000070012, "outcome": "passed"}, "call": {"duration": 0.00021011499999978867, "outcome": "failed", "crash": {"path": "/testbed/tests/test_plural.py", "lineno": 198, "message": "AttributeError: module 'babel.plural' has no attribute 'tokenize_rule'"}, "traceback": [{"path": "tests/test_plural.py", "lineno": 198, "message": "AttributeError"}], "longrepr": "rule_text = 'n ! 2'\n\n    @pytest.mark.parametrize('rule_text', MALFORMED_TOKEN_TESTS)\n    def test_tokenize_malformed(rule_text):\n        with pytest.raises(plural.RuleError):\n>           plural.tokenize_rule(rule_text)\nE           AttributeError: module 'babel.plural' has no attribute 'tokenize_rule'\n\ntests/test_plural.py:198: AttributeError"}, "teardown": {"duration": 0.0002123029999996362, "outcome": "passed"}}, {"nodeid": "tests/test_plural.py::TestNextTokenTestCase::test_empty", "lineno": 202, "outcome": "failed", "keywords": ["test_empty", "TestNextTokenTestCase", "test_plural.py", "tests", "testbed", ""], "setup": {"duration": 0.0002724030000003097, "outcome": "passed"}, "call": {"duration": 0.00022447100000011488, "outcome": "failed", "crash": {"path": "/testbed/tests/test_plural.py", "lineno": 204, "message": "AttributeError: module 'babel.plural' has no attribute 'test_next_token'"}, "traceback": [{"path": "tests/test_plural.py", "lineno": 204, "message": "AttributeError"}], "longrepr": "self = <tests.test_plural.TestNextTokenTestCase testMethod=test_empty>\n\n    def test_empty(self):\n>       assert not plural.test_next_token([], '')\nE       AttributeError: module 'babel.plural' has no attribute 'test_next_token'\n\ntests/test_plural.py:204: AttributeError"}, "teardown": {"duration": 0.0002114820000000961, "outcome": "passed"}}, {"nodeid": "tests/test_plural.py::TestNextTokenTestCase::test_type_not_ok_and_value_ok", "lineno": 214, "outcome": "failed", "keywords": ["test_type_not_ok_and_value_ok", "TestNextTokenTestCase", "test_plural.py", "tests", "testbed", ""], "setup": {"duration": 0.0001982620000005042, "outcome": "passed"}, "call": {"duration": 0.0002302380000003268, "outcome": "failed", "crash": {"path": "/testbed/tests/test_plural.py", "lineno": 216, "message": "AttributeError: module 'babel.plural' has no attribute 'test_next_token'"}, "traceback": [{"path": "tests/test_plural.py", "lineno": 216, "message": "AttributeError"}], "longrepr": "self = <tests.test_plural.TestNextTokenTestCase testMethod=test_type_not_ok_and_value_ok>\n\n    def test_type_not_ok_and_value_ok(self):\n>       assert not plural.test_next_token([('abc', 'and')], 'word', 'and')\nE       AttributeError: module 'babel.plural' has no attribute 'test_next_token'\n\ntests/test_plural.py:216: AttributeError"}, "teardown": {"duration": 0.00019560099999971214, "outcome": "passed"}}, {"nodeid": "tests/test_plural.py::TestNextTokenTestCase::test_type_ok_and_no_value", "lineno": 205, "outcome": "failed", "keywords": ["test_type_ok_and_no_value", "TestNextTokenTestCase", "test_plural.py", "tests", "testbed", ""], "setup": {"duration": 0.00018633799999978606, "outcome": "passed"}, "call": {"duration": 0.00022490199999936067, "outcome": "failed", "crash": {"path": "/testbed/tests/test_plural.py", "lineno": 207, "message": "AttributeError: module 'babel.plural' has no attribute 'test_next_token'"}, "traceback": [{"path": "tests/test_plural.py", "lineno": 207, "message": "AttributeError"}], "longrepr": "self = <tests.test_plural.TestNextTokenTestCase testMethod=test_type_ok_and_no_value>\n\n    def test_type_ok_and_no_value(self):\n>       assert plural.test_next_token([('word', 'and')], 'word')\nE       AttributeError: module 'babel.plural' has no attribute 'test_next_token'\n\ntests/test_plural.py:207: AttributeError"}, "teardown": {"duration": 0.00019232100000010632, "outcome": "passed"}}, {"nodeid": "tests/test_plural.py::TestNextTokenTestCase::test_type_ok_and_not_value", "lineno": 208, "outcome": "failed", "keywords": ["test_type_ok_and_not_value", "TestNextTokenTestCase", "test_plural.py", "tests", "testbed", ""], "setup": {"duration": 0.00018279900000006677, "outcome": "passed"}, "call": {"duration": 0.0002242100000007241, "outcome": "failed", "crash": {"path": "/testbed/tests/test_plural.py", "lineno": 210, "message": "AttributeError: module 'babel.plural' has no attribute 'test_next_token'"}, "traceback": [{"path": "tests/test_plural.py", "lineno": 210, "message": "AttributeError"}], "longrepr": "self = <tests.test_plural.TestNextTokenTestCase testMethod=test_type_ok_and_not_value>\n\n    def test_type_ok_and_not_value(self):\n>       assert not plural.test_next_token([('word', 'and')], 'word', 'or')\nE       AttributeError: module 'babel.plural' has no attribute 'test_next_token'\n\ntests/test_plural.py:210: AttributeError"}, "teardown": {"duration": 0.00019915100000034158, "outcome": "passed"}}, {"nodeid": "tests/test_plural.py::TestNextTokenTestCase::test_type_ok_and_value_ok", "lineno": 211, "outcome": "failed", "keywords": ["test_type_ok_and_value_ok", "TestNextTokenTestCase", "test_plural.py", "tests", "testbed", ""], "setup": {"duration": 0.00019073800000057872, "outcome": "passed"}, "call": {"duration": 0.00021361299999966832, "outcome": "failed", "crash": {"path": "/testbed/tests/test_plural.py", "lineno": 213, "message": "AttributeError: module 'babel.plural' has no attribute 'test_next_token'"}, "traceback": [{"path": "tests/test_plural.py", "lineno": 213, "message": "AttributeError"}], "longrepr": "self = <tests.test_plural.TestNextTokenTestCase testMethod=test_type_ok_and_value_ok>\n\n    def test_type_ok_and_value_ok(self):\n>       assert plural.test_next_token([('word', 'and')], 'word', 'and')\nE       AttributeError: module 'babel.plural' has no attribute 'test_next_token'\n\ntests/test_plural.py:213: AttributeError"}, "teardown": {"duration": 0.00023721899999973317, "outcome": "passed"}}, {"nodeid": "tests/test_plural.py::PluralRuleParserTestCase::test_and", "lineno": 257, "outcome": "failed", "keywords": ["test_and", "PluralRuleParserTestCase", "test_plural.py", "tests", "testbed", ""], "setup": {"duration": 0.0002620489999998199, "outcome": "passed"}, "call": {"duration": 0.0006780019999998999, "outcome": "failed", "crash": {"path": "/testbed/tests/test_plural.py", "lineno": 235, "message": "AttributeError: module 'babel.plural' has no attribute 'ident_node'"}, "traceback": [{"path": "tests/test_plural.py", "lineno": 235, "message": "AttributeError"}], "longrepr": "self = <tests.test_plural.PluralRuleParserTestCase testMethod=test_and>\n\n    def setUp(self):\n>       self.n = plural.ident_node('n')\nE       AttributeError: module 'babel.plural' has no attribute 'ident_node'\n\ntests/test_plural.py:235: AttributeError"}, "teardown": {"duration": 0.00019600999999980218, "outcome": "passed"}}, {"nodeid": "tests/test_plural.py::PluralRuleParserTestCase::test_eq_relation", "lineno": 243, "outcome": "failed", "keywords": ["test_eq_relation", "PluralRuleParserTestCase", "test_plural.py", "tests", "testbed", ""], "setup": {"duration": 0.00018480399999987185, "outcome": "passed"}, "call": {"duration": 0.00021586999999989587, "outcome": "failed", "crash": {"path": "/testbed/tests/test_plural.py", "lineno": 235, "message": "AttributeError: module 'babel.plural' has no attribute 'ident_node'"}, "traceback": [{"path": "tests/test_plural.py", "lineno": 235, "message": "AttributeError"}], "longrepr": "self = <tests.test_plural.PluralRuleParserTestCase testMethod=test_eq_relation>\n\n    def setUp(self):\n>       self.n = plural.ident_node('n')\nE       AttributeError: module 'babel.plural' has no attribute 'ident_node'\n\ntests/test_plural.py:235: AttributeError"}, "teardown": {"duration": 0.00018773499999991117, "outcome": "passed"}}, {"nodeid": "tests/test_plural.py::PluralRuleParserTestCase::test_error_when_unexpected_end", "lineno": 239, "outcome": "failed", "keywords": ["test_error_when_unexpected_end", "PluralRuleParserTestCase", "test_plural.py", "tests", "testbed", ""], "setup": {"duration": 0.00018230799999940928, "outcome": "passed"}, "call": {"duration": 0.00021215099999949416, "outcome": "failed", "crash": {"path": "/testbed/tests/test_plural.py", "lineno": 235, "message": "AttributeError: module 'babel.plural' has no attribute 'ident_node'"}, "traceback": [{"path": "tests/test_plural.py", "lineno": 235, "message": "AttributeError"}], "longrepr": "self = <tests.test_plural.PluralRuleParserTestCase testMethod=test_error_when_unexpected_end>\n\n    def setUp(self):\n>       self.n = plural.ident_node('n')\nE       AttributeError: module 'babel.plural' has no attribute 'ident_node'\n\ntests/test_plural.py:235: AttributeError"}, "teardown": {"duration": 0.00018613399999978242, "outcome": "passed"}}, {"nodeid": "tests/test_plural.py::PluralRuleParserTestCase::test_in_range_relation", "lineno": 246, "outcome": "failed", "keywords": ["test_in_range_relation", "PluralRuleParserTestCase", "test_plural.py", "tests", "testbed", ""], "setup": {"duration": 0.00017773099999995878, "outcome": "passed"}, "call": {"duration": 0.00020996599999989485, "outcome": "failed", "crash": {"path": "/testbed/tests/test_plural.py", "lineno": 235, "message": "AttributeError: module 'babel.plural' has no attribute 'ident_node'"}, "traceback": [{"path": "tests/test_plural.py", "lineno": 235, "message": "AttributeError"}], "longrepr": "self = <tests.test_plural.PluralRuleParserTestCase testMethod=test_in_range_relation>\n\n    def setUp(self):\n>       self.n = plural.ident_node('n')\nE       AttributeError: module 'babel.plural' has no attribute 'ident_node'\n\ntests/test_plural.py:235: AttributeError"}, "teardown": {"duration": 0.0001849190000005052, "outcome": "passed"}}, {"nodeid": "tests/test_plural.py::PluralRuleParserTestCase::test_negate", "lineno": 250, "outcome": "failed", "keywords": ["test_negate", "PluralRuleParserTestCase", "test_plural.py", "tests", "testbed", ""], "setup": {"duration": 0.00017919800000054664, "outcome": "passed"}, "call": {"duration": 0.00020269000000006088, "outcome": "failed", "crash": {"path": "/testbed/tests/test_plural.py", "lineno": 235, "message": "AttributeError: module 'babel.plural' has no attribute 'ident_node'"}, "traceback": [{"path": "tests/test_plural.py", "lineno": 235, "message": "AttributeError"}], "longrepr": "self = <tests.test_plural.PluralRuleParserTestCase testMethod=test_negate>\n\n    def setUp(self):\n>       self.n = plural.ident_node('n')\nE       AttributeError: module 'babel.plural' has no attribute 'ident_node'\n\ntests/test_plural.py:235: AttributeError"}, "teardown": {"duration": 0.00017914400000051955, "outcome": "passed"}}, {"nodeid": "tests/test_plural.py::PluralRuleParserTestCase::test_or", "lineno": 253, "outcome": "failed", "keywords": ["test_or", "PluralRuleParserTestCase", "test_plural.py", "tests", "testbed", ""], "setup": {"duration": 0.00017595600000053224, "outcome": "passed"}, "call": {"duration": 0.00019878299999920301, "outcome": "failed", "crash": {"path": "/testbed/tests/test_plural.py", "lineno": 235, "message": "AttributeError: module 'babel.plural' has no attribute 'ident_node'"}, "traceback": [{"path": "tests/test_plural.py", "lineno": 235, "message": "AttributeError"}], "longrepr": "self = <tests.test_plural.PluralRuleParserTestCase testMethod=test_or>\n\n    def setUp(self):\n>       self.n = plural.ident_node('n')\nE       AttributeError: module 'babel.plural' has no attribute 'ident_node'\n\ntests/test_plural.py:235: AttributeError"}, "teardown": {"duration": 0.00018336399999974162, "outcome": "passed"}}, {"nodeid": "tests/test_plural.py::PluralRuleParserTestCase::test_or_and", "lineno": 261, "outcome": "failed", "keywords": ["test_or_and", "PluralRuleParserTestCase", "test_plural.py", "tests", "testbed", ""], "setup": {"duration": 0.00018073299999965542, "outcome": "passed"}, "call": {"duration": 0.00018659000000020853, "outcome": "failed", "crash": {"path": "/testbed/tests/test_plural.py", "lineno": 235, "message": "AttributeError: module 'babel.plural' has no attribute 'ident_node'"}, "traceback": [{"path": "tests/test_plural.py", "lineno": 235, "message": "AttributeError"}], "longrepr": "self = <tests.test_plural.PluralRuleParserTestCase testMethod=test_or_and>\n\n    def setUp(self):\n>       self.n = plural.ident_node('n')\nE       AttributeError: module 'babel.plural' has no attribute 'ident_node'\n\ntests/test_plural.py:235: AttributeError"}, "teardown": {"duration": 0.0002195069999997301, "outcome": "passed"}}, {"nodeid": "tests/test_plural.py::test_extract_operands[1-1-1-0-0-0-0]", "lineno": 285, "outcome": "failed", "keywords": ["test_extract_operands[1-1-1-0-0-0-0]", "parametrize", "pytestmark", "1-1-1-0-0-0-0", "test_plural.py", "tests", "testbed", ""], "setup": {"duration": 0.00034074300000064284, "outcome": "passed"}, "call": {"duration": 0.0001811619999996239, "outcome": "failed", "crash": {"path": "/testbed/tests/test_plural.py", "lineno": 288, "message": "TypeError: cannot unpack non-iterable NoneType object"}, "traceback": [{"path": "tests/test_plural.py", "lineno": 288, "message": "TypeError"}], "longrepr": "source = 1, n = 1, i = 1, v = 0, w = 0, f = 0, t = 0\n\n    @pytest.mark.parametrize('source,n,i,v,w,f,t', EXTRACT_OPERANDS_TESTS)\n    def test_extract_operands(source, n, i, v, w, f, t):\n>       e_n, e_i, e_v, e_w, e_f, e_t, e_c, e_e = plural.extract_operands(source)\nE       TypeError: cannot unpack non-iterable NoneType object\n\ntests/test_plural.py:288: TypeError"}, "teardown": {"duration": 0.00022552699999955905, "outcome": "passed"}}, {"nodeid": "tests/test_plural.py::test_extract_operands[source1-1.0-1-1-0-0-0]", "lineno": 285, "outcome": "failed", "keywords": ["test_extract_operands[source1-1.0-1-1-0-0-0]", "parametrize", "pytestmark", "source1-1.0-1-1-0-0-0", "test_plural.py", "tests", "testbed", ""], "setup": {"duration": 0.0003452959999998839, "outcome": "passed"}, "call": {"duration": 0.00016829199999968125, "outcome": "failed", "crash": {"path": "/testbed/tests/test_plural.py", "lineno": 288, "message": "TypeError: cannot unpack non-iterable NoneType object"}, "traceback": [{"path": "tests/test_plural.py", "lineno": 288, "message": "TypeError"}], "longrepr": "source = Decimal('1.0'), n = '1.0', i = 1, v = 1, w = 0, f = 0, t = 0\n\n    @pytest.mark.parametrize('source,n,i,v,w,f,t', EXTRACT_OPERANDS_TESTS)\n    def test_extract_operands(source, n, i, v, w, f, t):\n>       e_n, e_i, e_v, e_w, e_f, e_t, e_c, e_e = plural.extract_operands(source)\nE       TypeError: cannot unpack non-iterable NoneType object\n\ntests/test_plural.py:288: TypeError"}, "teardown": {"duration": 0.00022377500000025918, "outcome": "passed"}}, {"nodeid": "tests/test_plural.py::test_extract_operands[source2-1.00-1-2-0-0-0]", "lineno": 285, "outcome": "failed", "keywords": ["test_extract_operands[source2-1.00-1-2-0-0-0]", "parametrize", "pytestmark", "source2-1.00-1-2-0-0-0", "test_plural.py", "tests", "testbed", ""], "setup": {"duration": 0.0003418269999997392, "outcome": "passed"}, "call": {"duration": 0.00016594399999991793, "outcome": "failed", "crash": {"path": "/testbed/tests/test_plural.py", "lineno": 288, "message": "TypeError: cannot unpack non-iterable NoneType object"}, "traceback": [{"path": "tests/test_plural.py", "lineno": 288, "message": "TypeError"}], "longrepr": "source = Decimal('1.00'), n = '1.00', i = 1, v = 2, w = 0, f = 0, t = 0\n\n    @pytest.mark.parametrize('source,n,i,v,w,f,t', EXTRACT_OPERANDS_TESTS)\n    def test_extract_operands(source, n, i, v, w, f, t):\n>       e_n, e_i, e_v, e_w, e_f, e_t, e_c, e_e = plural.extract_operands(source)\nE       TypeError: cannot unpack non-iterable NoneType object\n\ntests/test_plural.py:288: TypeError"}, "teardown": {"duration": 0.0003238479999998489, "outcome": "passed"}}, {"nodeid": "tests/test_plural.py::test_extract_operands[source3-1.3-1-1-1-3-3]", "lineno": 285, "outcome": "failed", "keywords": ["test_extract_operands[source3-1.3-1-1-1-3-3]", "parametrize", "pytestmark", "source3-1.3-1-1-1-3-3", "test_plural.py", "tests", "testbed", ""], "setup": {"duration": 0.00036048499999985495, "outcome": "passed"}, "call": {"duration": 0.00019340299999992538, "outcome": "failed", "crash": {"path": "/testbed/tests/test_plural.py", "lineno": 288, "message": "TypeError: cannot unpack non-iterable NoneType object"}, "traceback": [{"path": "tests/test_plural.py", "lineno": 288, "message": "TypeError"}], "longrepr": "source = Decimal('1.3'), n = '1.3', i = 1, v = 1, w = 1, f = 3, t = 3\n\n    @pytest.mark.parametrize('source,n,i,v,w,f,t', EXTRACT_OPERANDS_TESTS)\n    def test_extract_operands(source, n, i, v, w, f, t):\n>       e_n, e_i, e_v, e_w, e_f, e_t, e_c, e_e = plural.extract_operands(source)\nE       TypeError: cannot unpack non-iterable NoneType object\n\ntests/test_plural.py:288: TypeError"}, "teardown": {"duration": 0.0002333359999999729, "outcome": "passed"}}, {"nodeid": "tests/test_plural.py::test_extract_operands[source4-1.30-1-2-1-30-3]", "lineno": 285, "outcome": "failed", "keywords": ["test_extract_operands[source4-1.30-1-2-1-30-3]", "parametrize", "pytestmark", "source4-1.30-1-2-1-30-3", "test_plural.py", "tests", "testbed", ""], "setup": {"duration": 0.0003514070000001368, "outcome": "passed"}, "call": {"duration": 0.00016588500000036532, "outcome": "failed", "crash": {"path": "/testbed/tests/test_plural.py", "lineno": 288, "message": "TypeError: cannot unpack non-iterable NoneType object"}, "traceback": [{"path": "tests/test_plural.py", "lineno": 288, "message": "TypeError"}], "longrepr": "source = Decimal('1.30'), n = '1.30', i = 1, v = 2, w = 1, f = 30, t = 3\n\n    @pytest.mark.parametrize('source,n,i,v,w,f,t', EXTRACT_OPERANDS_TESTS)\n    def test_extract_operands(source, n, i, v, w, f, t):\n>       e_n, e_i, e_v, e_w, e_f, e_t, e_c, e_e = plural.extract_operands(source)\nE       TypeError: cannot unpack non-iterable NoneType object\n\ntests/test_plural.py:288: TypeError"}, "teardown": {"duration": 0.00023857999999954416, "outcome": "passed"}}, {"nodeid": "tests/test_plural.py::test_extract_operands[source5-1.03-1-2-2-3-3]", "lineno": 285, "outcome": "failed", "keywords": ["test_extract_operands[source5-1.03-1-2-2-3-3]", "parametrize", "pytestmark", "source5-1.03-1-2-2-3-3", "test_plural.py", "tests", "testbed", ""], "setup": {"duration": 0.00032806899999915373, "outcome": "passed"}, "call": {"duration": 0.00016524800000006223, "outcome": "failed", "crash": {"path": "/testbed/tests/test_plural.py", "lineno": 288, "message": "TypeError: cannot unpack non-iterable NoneType object"}, "traceback": [{"path": "tests/test_plural.py", "lineno": 288, "message": "TypeError"}], "longrepr": "source = Decimal('1.03'), n = '1.03', i = 1, v = 2, w = 2, f = 3, t = 3\n\n    @pytest.mark.parametrize('source,n,i,v,w,f,t', EXTRACT_OPERANDS_TESTS)\n    def test_extract_operands(source, n, i, v, w, f, t):\n>       e_n, e_i, e_v, e_w, e_f, e_t, e_c, e_e = plural.extract_operands(source)\nE       TypeError: cannot unpack non-iterable NoneType object\n\ntests/test_plural.py:288: TypeError"}, "teardown": {"duration": 0.00022354800000012887, "outcome": "passed"}}, {"nodeid": "tests/test_plural.py::test_extract_operands[source6-1.230-1-3-2-230-23]", "lineno": 285, "outcome": "failed", "keywords": ["test_extract_operands[source6-1.230-1-3-2-230-23]", "parametrize", "pytestmark", "source6-1.230-1-3-2-230-23", "test_plural.py", "tests", "testbed", ""], "setup": {"duration": 0.00032801099999968386, "outcome": "passed"}, "call": {"duration": 0.00017689199999981753, "outcome": "failed", "crash": {"path": "/testbed/tests/test_plural.py", "lineno": 288, "message": "TypeError: cannot unpack non-iterable NoneType object"}, "traceback": [{"path": "tests/test_plural.py", "lineno": 288, "message": "TypeError"}], "longrepr": "source = Decimal('1.230'), n = '1.230', i = 1, v = 3, w = 2, f = 230, t = 23\n\n    @pytest.mark.parametrize('source,n,i,v,w,f,t', EXTRACT_OPERANDS_TESTS)\n    def test_extract_operands(source, n, i, v, w, f, t):\n>       e_n, e_i, e_v, e_w, e_f, e_t, e_c, e_e = plural.extract_operands(source)\nE       TypeError: cannot unpack non-iterable NoneType object\n\ntests/test_plural.py:288: TypeError"}, "teardown": {"duration": 0.00022138200000032526, "outcome": "passed"}}, {"nodeid": "tests/test_plural.py::test_extract_operands[-1-1-1-0-0-0-0]", "lineno": 285, "outcome": "failed", "keywords": ["test_extract_operands[-1-1-1-0-0-0-0]", "parametrize", "pytestmark", "-1-1-1-0-0-0-0", "test_plural.py", "tests", "testbed", ""], "setup": {"duration": 0.00033333200000029706, "outcome": "passed"}, "call": {"duration": 0.0001644729999998873, "outcome": "failed", "crash": {"path": "/testbed/tests/test_plural.py", "lineno": 288, "message": "TypeError: cannot unpack non-iterable NoneType object"}, "traceback": [{"path": "tests/test_plural.py", "lineno": 288, "message": "TypeError"}], "longrepr": "source = -1, n = 1, i = 1, v = 0, w = 0, f = 0, t = 0\n\n    @pytest.mark.parametrize('source,n,i,v,w,f,t', EXTRACT_OPERANDS_TESTS)\n    def test_extract_operands(source, n, i, v, w, f, t):\n>       e_n, e_i, e_v, e_w, e_f, e_t, e_c, e_e = plural.extract_operands(source)\nE       TypeError: cannot unpack non-iterable NoneType object\n\ntests/test_plural.py:288: TypeError"}, "teardown": {"duration": 0.0002233700000005001, "outcome": "passed"}}, {"nodeid": "tests/test_plural.py::test_extract_operands[1.3-1.3-1-1-1-3-3]", "lineno": 285, "outcome": "failed", "keywords": ["test_extract_operands[1.3-1.3-1-1-1-3-3]", "parametrize", "pytestmark", "1.3-1.3-1-1-1-3-3", "test_plural.py", "tests", "testbed", ""], "setup": {"duration": 0.00034272800000056947, "outcome": "passed"}, "call": {"duration": 0.00016386400000012458, "outcome": "failed", "crash": {"path": "/testbed/tests/test_plural.py", "lineno": 288, "message": "TypeError: cannot unpack non-iterable NoneType object"}, "traceback": [{"path": "tests/test_plural.py", "lineno": 288, "message": "TypeError"}], "longrepr": "source = 1.3, n = '1.3', i = 1, v = 1, w = 1, f = 3, t = 3\n\n    @pytest.mark.parametrize('source,n,i,v,w,f,t', EXTRACT_OPERANDS_TESTS)\n    def test_extract_operands(source, n, i, v, w, f, t):\n>       e_n, e_i, e_v, e_w, e_f, e_t, e_c, e_e = plural.extract_operands(source)\nE       TypeError: cannot unpack non-iterable NoneType object\n\ntests/test_plural.py:288: TypeError"}, "teardown": {"duration": 0.0002225110000004804, "outcome": "passed"}}, {"nodeid": "tests/test_plural.py::test_gettext_compilation[ru]", "lineno": 298, "outcome": "failed", "keywords": ["test_gettext_compilation[ru]", "parametrize", "pytestmark", "ru", "test_plural.py", "tests", "testbed", ""], "setup": {"duration": 0.00020314200000015603, "outcome": "passed"}, "call": {"duration": 0.00016264200000026818, "outcome": "failed", "crash": {"path": "/testbed/tests/test_plural.py", "lineno": 303, "message": "TypeError: 'NoneType' object is not subscriptable"}, "traceback": [{"path": "tests/test_plural.py", "lineno": 303, "message": "TypeError"}], "longrepr": "locale = 'ru'\n\n    @pytest.mark.parametrize('locale', ('ru', 'pl'))\n    def test_gettext_compilation(locale):\n        # Test that new plural form elements introduced in recent CLDR versions\n        # are compiled \"down\" to `n` when emitting Gettext rules.\n>       ru_rules = localedata.load(locale)['plural_form'].rules\nE       TypeError: 'NoneType' object is not subscriptable\n\ntests/test_plural.py:303: TypeError"}, "teardown": {"duration": 0.00018810600000040978, "outcome": "passed"}}, {"nodeid": "tests/test_plural.py::test_gettext_compilation[pl]", "lineno": 298, "outcome": "failed", "keywords": ["test_gettext_compilation[pl]", "parametrize", "pytestmark", "pl", "test_plural.py", "tests", "testbed", ""], "setup": {"duration": 0.00019976799999987804, "outcome": "passed"}, "call": {"duration": 0.00015823999999931004, "outcome": "failed", "crash": {"path": "/testbed/tests/test_plural.py", "lineno": 303, "message": "TypeError: 'NoneType' object is not subscriptable"}, "traceback": [{"path": "tests/test_plural.py", "lineno": 303, "message": "TypeError"}], "longrepr": "locale = 'pl'\n\n    @pytest.mark.parametrize('locale', ('ru', 'pl'))\n    def test_gettext_compilation(locale):\n        # Test that new plural form elements introduced in recent CLDR versions\n        # are compiled \"down\" to `n` when emitting Gettext rules.\n>       ru_rules = localedata.load(locale)['plural_form'].rules\nE       TypeError: 'NoneType' object is not subscriptable\n\ntests/test_plural.py:303: TypeError"}, "teardown": {"duration": 0.00019310199999988953, "outcome": "passed"}}]}