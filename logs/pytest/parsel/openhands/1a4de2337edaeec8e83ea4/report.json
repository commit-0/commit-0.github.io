{"created": 1732308236.963112, "duration": 0.2837259769439697, "exitcode": 1, "root": "/testbed", "environment": {}, "summary": {"failed": 15, "total": 15, "collected": 15}, "collectors": [{"nodeid": "", "outcome": "passed", "result": [{"nodeid": "tests", "type": "Dir"}]}, {"nodeid": "tests/test_selector.py", "outcome": "failed", "result": [], "longrepr": "tests/test_selector.py:13: in <module>\n    from parsel import Selector, SelectorList\nparsel/__init__.py:20: in <module>\n    xpathfuncs.setup()\nE   AttributeError: module 'parsel.xpathfuncs' has no attribute 'setup'"}, {"nodeid": "tests/test_selector.py", "outcome": "failed", "result": [], "longrepr": "tests/test_selector.py:13: in <module>\n    from parsel import Selector, SelectorList\nparsel/__init__.py:20: in <module>\n    xpathfuncs.setup()\nE   AttributeError: module 'parsel.xpathfuncs' has no attribute 'setup'"}, {"nodeid": "tests/test_selector_csstranslator.py", "outcome": "failed", "result": [], "longrepr": "tests/test_selector_csstranslator.py:14: in <module>\n    from parsel import Selector\nparsel/__init__.py:20: in <module>\n    xpathfuncs.setup()\nE   AttributeError: module 'parsel.xpathfuncs' has no attribute 'setup'"}, {"nodeid": "tests/test_selector_csstranslator.py", "outcome": "failed", "result": [], "longrepr": "tests/test_selector_csstranslator.py:14: in <module>\n    from parsel import Selector\nparsel/__init__.py:20: in <module>\n    xpathfuncs.setup()\nE   AttributeError: module 'parsel.xpathfuncs' has no attribute 'setup'"}, {"nodeid": "tests/test_selector_jmespath.py", "outcome": "failed", "result": [], "longrepr": "tests/test_selector_jmespath.py:5: in <module>\n    from parsel import Selector\nparsel/__init__.py:20: in <module>\n    xpathfuncs.setup()\nE   AttributeError: module 'parsel.xpathfuncs' has no attribute 'setup'"}, {"nodeid": "tests/test_selector_jmespath.py", "outcome": "failed", "result": [], "longrepr": "tests/test_selector_jmespath.py:5: in <module>\n    from parsel import Selector\nparsel/__init__.py:20: in <module>\n    xpathfuncs.setup()\nE   AttributeError: module 'parsel.xpathfuncs' has no attribute 'setup'"}, {"nodeid": "tests/test_utils.py", "outcome": "passed", "result": []}, {"nodeid": "tests/test_utils.py", "outcome": "passed", "result": [{"nodeid": "tests/test_utils.py::test_shorten[-1-ValueError]", "type": "Function", "lineno": 7}, {"nodeid": "tests/test_utils.py::test_shorten[0-]", "type": "Function", "lineno": 7}, {"nodeid": "tests/test_utils.py::test_shorten[1-.]", "type": "Function", "lineno": 7}, {"nodeid": "tests/test_utils.py::test_shorten[2-..]", "type": "Function", "lineno": 7}, {"nodeid": "tests/test_utils.py::test_shorten[3-...]", "type": "Function", "lineno": 7}, {"nodeid": "tests/test_utils.py::test_shorten[4-f...]", "type": "Function", "lineno": 7}, {"nodeid": "tests/test_utils.py::test_shorten[5-fo...]", "type": "Function", "lineno": 7}, {"nodeid": "tests/test_utils.py::test_shorten[6-foobar]", "type": "Function", "lineno": 7}, {"nodeid": "tests/test_utils.py::test_shorten[7-foobar]", "type": "Function", "lineno": 7}, {"nodeid": "tests/test_utils.py::test_extract_regex[(?P<month>\\\\w+)\\\\s*(?P<day>\\\\d+)\\\\s*\\\\,?\\\\s*(?P<year>\\\\d+)-October  25, 2019-True-expected0]", "type": "Function", "lineno": 29}, {"nodeid": "tests/test_utils.py::test_extract_regex[(?P<month>\\\\w+)\\\\s*(?P<day>\\\\d+)\\\\s*\\\\,?\\\\s*(?P<year>\\\\d+)-October  25 2019-True-expected1]", "type": "Function", "lineno": 29}, {"nodeid": "tests/test_utils.py::test_extract_regex[(?P<extract>\\\\w+)\\\\s*(?P<day>\\\\d+)\\\\s*\\\\,?\\\\s*(?P<year>\\\\d+)-October  25 2019-True-expected2]", "type": "Function", "lineno": 29}, {"nodeid": "tests/test_utils.py::test_extract_regex[\\\\w+\\\\s*\\\\d+\\\\s*\\\\,?\\\\s*\\\\d+-October  25 2019-True-expected3]", "type": "Function", "lineno": 29}, {"nodeid": "tests/test_utils.py::test_extract_regex[^.*$-&quot;sometext&quot; &amp; &quot;moretext&quot;-True-expected4]", "type": "Function", "lineno": 29}, {"nodeid": "tests/test_utils.py::test_extract_regex[^.*$-&quot;sometext&quot; &amp; &quot;moretext&quot;-False-expected5]", "type": "Function", "lineno": 29}]}, {"nodeid": "tests/test_xml_attacks.py", "outcome": "failed", "result": [], "longrepr": "tests/test_xml_attacks.py:8: in <module>\n    from parsel import Selector\nparsel/__init__.py:20: in <module>\n    xpathfuncs.setup()\nE   AttributeError: module 'parsel.xpathfuncs' has no attribute 'setup'"}, {"nodeid": "tests/test_xml_attacks.py", "outcome": "failed", "result": [], "longrepr": "tests/test_xml_attacks.py:8: in <module>\n    from parsel import Selector\nparsel/__init__.py:20: in <module>\n    xpathfuncs.setup()\nE   AttributeError: module 'parsel.xpathfuncs' has no attribute 'setup'"}, {"nodeid": "tests/test_xpathfuncs.py", "outcome": "failed", "result": [], "longrepr": "tests/test_xpathfuncs.py:4: in <module>\n    from parsel import Selector\nparsel/__init__.py:20: in <module>\n    xpathfuncs.setup()\nE   AttributeError: module 'parsel.xpathfuncs' has no attribute 'setup'"}, {"nodeid": "tests/test_xpathfuncs.py", "outcome": "failed", "result": [], "longrepr": "tests/test_xpathfuncs.py:4: in <module>\n    from parsel import Selector\nparsel/__init__.py:20: in <module>\n    xpathfuncs.setup()\nE   AttributeError: module 'parsel.xpathfuncs' has no attribute 'setup'"}, {"nodeid": "tests/typing/selector.py", "outcome": "failed", "result": [], "longrepr": "tests/typing/selector.py:5: in <module>\n    from parsel import Selector\nparsel/__init__.py:20: in <module>\n    xpathfuncs.setup()\nE   AttributeError: module 'parsel.xpathfuncs' has no attribute 'setup'"}, {"nodeid": "tests/typing", "outcome": "passed", "result": [{"nodeid": "tests/typing/selector.py", "type": "DoctestModule"}]}, {"nodeid": "tests/xml_attacks", "outcome": "passed", "result": []}, {"nodeid": "tests", "outcome": "passed", "result": [{"nodeid": "tests/test_selector.py", "type": "DoctestModule"}, {"nodeid": "tests/test_selector.py", "type": "Module"}, {"nodeid": "tests/test_selector_csstranslator.py", "type": "DoctestModule"}, {"nodeid": "tests/test_selector_csstranslator.py", "type": "Module"}, {"nodeid": "tests/test_selector_jmespath.py", "type": "DoctestModule"}, {"nodeid": "tests/test_selector_jmespath.py", "type": "Module"}, {"nodeid": "tests/test_utils.py", "type": "DoctestModule"}, {"nodeid": "tests/test_utils.py", "type": "Module"}, {"nodeid": "tests/test_xml_attacks.py", "type": "DoctestModule"}, {"nodeid": "tests/test_xml_attacks.py", "type": "Module"}, {"nodeid": "tests/test_xpathfuncs.py", "type": "DoctestModule"}, {"nodeid": "tests/test_xpathfuncs.py", "type": "Module"}, {"nodeid": "tests/typing", "type": "Dir"}, {"nodeid": "tests/xml_attacks", "type": "Dir"}]}], "tests": [{"nodeid": "tests/test_utils.py::test_shorten[-1-ValueError]", "lineno": 7, "outcome": "failed", "keywords": ["test_shorten[-1-ValueError]", "parametrize", "pytestmark", "-1-ValueError", "test_utils.py", "tests", "testbed", ""], "setup": {"duration": 0.00033835800000048266, "outcome": "passed"}, "call": {"duration": 0.00021564900000115017, "outcome": "failed", "crash": {"path": "/testbed/tests/test_utils.py", "lineno": 26, "message": "Failed: DID NOT RAISE <class 'ValueError'>"}, "traceback": [{"path": "tests/test_utils.py", "lineno": 26, "message": "Failed"}], "longrepr": "width = -1, expected = <class 'ValueError'>\n\n    @mark.parametrize(\n        \"width,expected\",\n        (\n            (-1, ValueError),\n            (0, \"\"),\n            (1, \".\"),\n            (2, \"..\"),\n            (3, \"...\"),\n            (4, \"f...\"),\n            (5, \"fo...\"),\n            (6, \"foobar\"),\n            (7, \"foobar\"),\n        ),\n    )\n    def test_shorten(width: int, expected: Union[str, Type[Exception]]) -> None:\n        if isinstance(expected, str):\n            assert shorten(\"foobar\", width) == expected\n        else:\n>           with raises(expected):\nE           Failed: DID NOT RAISE <class 'ValueError'>\n\ntests/test_utils.py:26: Failed"}, "teardown": {"duration": 0.0001946059999990979, "outcome": "passed"}}, {"nodeid": "tests/test_utils.py::test_shorten[0-]", "lineno": 7, "outcome": "failed", "keywords": ["test_shorten[0-]", "parametrize", "pytestmark", "0-", "test_utils.py", "tests", "testbed", ""], "setup": {"duration": 0.00019825599999911958, "outcome": "passed"}, "call": {"duration": 0.00018711700000118014, "outcome": "failed", "crash": {"path": "/testbed/tests/test_utils.py", "lineno": 24, "message": "AssertionError"}, "traceback": [{"path": "tests/test_utils.py", "lineno": 24, "message": "AssertionError"}], "longrepr": "width = 0, expected = ''\n\n    @mark.parametrize(\n        \"width,expected\",\n        (\n            (-1, ValueError),\n            (0, \"\"),\n            (1, \".\"),\n            (2, \"..\"),\n            (3, \"...\"),\n            (4, \"f...\"),\n            (5, \"fo...\"),\n            (6, \"foobar\"),\n            (7, \"foobar\"),\n        ),\n    )\n    def test_shorten(width: int, expected: Union[str, Type[Exception]]) -> None:\n        if isinstance(expected, str):\n>           assert shorten(\"foobar\", width) == expected\nE           AssertionError\n\ntests/test_utils.py:24: AssertionError"}, "teardown": {"duration": 0.00018331300000085093, "outcome": "passed"}}, {"nodeid": "tests/test_utils.py::test_shorten[1-.]", "lineno": 7, "outcome": "failed", "keywords": ["test_shorten[1-.]", "parametrize", "pytestmark", "1-.", "test_utils.py", "tests", "testbed", ""], "setup": {"duration": 0.00018965499999978874, "outcome": "passed"}, "call": {"duration": 0.00015378800000043213, "outcome": "failed", "crash": {"path": "/testbed/tests/test_utils.py", "lineno": 24, "message": "AssertionError"}, "traceback": [{"path": "tests/test_utils.py", "lineno": 24, "message": "AssertionError"}], "longrepr": "width = 1, expected = '.'\n\n    @mark.parametrize(\n        \"width,expected\",\n        (\n            (-1, ValueError),\n            (0, \"\"),\n            (1, \".\"),\n            (2, \"..\"),\n            (3, \"...\"),\n            (4, \"f...\"),\n            (5, \"fo...\"),\n            (6, \"foobar\"),\n            (7, \"foobar\"),\n        ),\n    )\n    def test_shorten(width: int, expected: Union[str, Type[Exception]]) -> None:\n        if isinstance(expected, str):\n>           assert shorten(\"foobar\", width) == expected\nE           AssertionError\n\ntests/test_utils.py:24: AssertionError"}, "teardown": {"duration": 0.0001653109999999458, "outcome": "passed"}}, {"nodeid": "tests/test_utils.py::test_shorten[2-..]", "lineno": 7, "outcome": "failed", "keywords": ["test_shorten[2-..]", "parametrize", "pytestmark", "2-..", "test_utils.py", "tests", "testbed", ""], "setup": {"duration": 0.00018657200000049556, "outcome": "passed"}, "call": {"duration": 0.00015171300000105248, "outcome": "failed", "crash": {"path": "/testbed/tests/test_utils.py", "lineno": 24, "message": "AssertionError"}, "traceback": [{"path": "tests/test_utils.py", "lineno": 24, "message": "AssertionError"}], "longrepr": "width = 2, expected = '..'\n\n    @mark.parametrize(\n        \"width,expected\",\n        (\n            (-1, ValueError),\n            (0, \"\"),\n            (1, \".\"),\n            (2, \"..\"),\n            (3, \"...\"),\n            (4, \"f...\"),\n            (5, \"fo...\"),\n            (6, \"foobar\"),\n            (7, \"foobar\"),\n        ),\n    )\n    def test_shorten(width: int, expected: Union[str, Type[Exception]]) -> None:\n        if isinstance(expected, str):\n>           assert shorten(\"foobar\", width) == expected\nE           AssertionError\n\ntests/test_utils.py:24: AssertionError"}, "teardown": {"duration": 0.00016512699999893243, "outcome": "passed"}}, {"nodeid": "tests/test_utils.py::test_shorten[3-...]", "lineno": 7, "outcome": "failed", "keywords": ["test_shorten[3-...]", "parametrize", "pytestmark", "3-...", "test_utils.py", "tests", "testbed", ""], "setup": {"duration": 0.00018546199999924795, "outcome": "passed"}, "call": {"duration": 0.00016276400000059255, "outcome": "failed", "crash": {"path": "/testbed/tests/test_utils.py", "lineno": 24, "message": "AssertionError"}, "traceback": [{"path": "tests/test_utils.py", "lineno": 24, "message": "AssertionError"}], "longrepr": "width = 3, expected = '...'\n\n    @mark.parametrize(\n        \"width,expected\",\n        (\n            (-1, ValueError),\n            (0, \"\"),\n            (1, \".\"),\n            (2, \"..\"),\n            (3, \"...\"),\n            (4, \"f...\"),\n            (5, \"fo...\"),\n            (6, \"foobar\"),\n            (7, \"foobar\"),\n        ),\n    )\n    def test_shorten(width: int, expected: Union[str, Type[Exception]]) -> None:\n        if isinstance(expected, str):\n>           assert shorten(\"foobar\", width) == expected\nE           AssertionError\n\ntests/test_utils.py:24: AssertionError"}, "teardown": {"duration": 0.00015380199999981414, "outcome": "passed"}}, {"nodeid": "tests/test_utils.py::test_shorten[4-f...]", "lineno": 7, "outcome": "failed", "keywords": ["test_shorten[4-f...]", "parametrize", "pytestmark", "4-f...", "test_utils.py", "tests", "testbed", ""], "setup": {"duration": 0.00019927700000010873, "outcome": "passed"}, "call": {"duration": 0.00014796399999994492, "outcome": "failed", "crash": {"path": "/testbed/tests/test_utils.py", "lineno": 24, "message": "AssertionError"}, "traceback": [{"path": "tests/test_utils.py", "lineno": 24, "message": "AssertionError"}], "longrepr": "width = 4, expected = 'f...'\n\n    @mark.parametrize(\n        \"width,expected\",\n        (\n            (-1, ValueError),\n            (0, \"\"),\n            (1, \".\"),\n            (2, \"..\"),\n            (3, \"...\"),\n            (4, \"f...\"),\n            (5, \"fo...\"),\n            (6, \"foobar\"),\n            (7, \"foobar\"),\n        ),\n    )\n    def test_shorten(width: int, expected: Union[str, Type[Exception]]) -> None:\n        if isinstance(expected, str):\n>           assert shorten(\"foobar\", width) == expected\nE           AssertionError\n\ntests/test_utils.py:24: AssertionError"}, "teardown": {"duration": 0.00017053800000077501, "outcome": "passed"}}, {"nodeid": "tests/test_utils.py::test_shorten[5-fo...]", "lineno": 7, "outcome": "failed", "keywords": ["test_shorten[5-fo...]", "parametrize", "pytestmark", "5-fo...", "test_utils.py", "tests", "testbed", ""], "setup": {"duration": 0.00018262299999882714, "outcome": "passed"}, "call": {"duration": 0.00014491799999838406, "outcome": "failed", "crash": {"path": "/testbed/tests/test_utils.py", "lineno": 24, "message": "AssertionError"}, "traceback": [{"path": "tests/test_utils.py", "lineno": 24, "message": "AssertionError"}], "longrepr": "width = 5, expected = 'fo...'\n\n    @mark.parametrize(\n        \"width,expected\",\n        (\n            (-1, ValueError),\n            (0, \"\"),\n            (1, \".\"),\n            (2, \"..\"),\n            (3, \"...\"),\n            (4, \"f...\"),\n            (5, \"fo...\"),\n            (6, \"foobar\"),\n            (7, \"foobar\"),\n        ),\n    )\n    def test_shorten(width: int, expected: Union[str, Type[Exception]]) -> None:\n        if isinstance(expected, str):\n>           assert shorten(\"foobar\", width) == expected\nE           AssertionError\n\ntests/test_utils.py:24: AssertionError"}, "teardown": {"duration": 0.00016485099999918873, "outcome": "passed"}}, {"nodeid": "tests/test_utils.py::test_shorten[6-foobar]", "lineno": 7, "outcome": "failed", "keywords": ["test_shorten[6-foobar]", "parametrize", "pytestmark", "6-foobar", "test_utils.py", "tests", "testbed", ""], "setup": {"duration": 0.00017838900000022306, "outcome": "passed"}, "call": {"duration": 0.00014702800000065963, "outcome": "failed", "crash": {"path": "/testbed/tests/test_utils.py", "lineno": 24, "message": "AssertionError"}, "traceback": [{"path": "tests/test_utils.py", "lineno": 24, "message": "AssertionError"}], "longrepr": "width = 6, expected = 'foobar'\n\n    @mark.parametrize(\n        \"width,expected\",\n        (\n            (-1, ValueError),\n            (0, \"\"),\n            (1, \".\"),\n            (2, \"..\"),\n            (3, \"...\"),\n            (4, \"f...\"),\n            (5, \"fo...\"),\n            (6, \"foobar\"),\n            (7, \"foobar\"),\n        ),\n    )\n    def test_shorten(width: int, expected: Union[str, Type[Exception]]) -> None:\n        if isinstance(expected, str):\n>           assert shorten(\"foobar\", width) == expected\nE           AssertionError\n\ntests/test_utils.py:24: AssertionError"}, "teardown": {"duration": 0.00017682200000024295, "outcome": "passed"}}, {"nodeid": "tests/test_utils.py::test_shorten[7-foobar]", "lineno": 7, "outcome": "failed", "keywords": ["test_shorten[7-foobar]", "parametrize", "pytestmark", "7-foobar", "test_utils.py", "tests", "testbed", ""], "setup": {"duration": 0.00018428000000092482, "outcome": "passed"}, "call": {"duration": 0.00016162100000016721, "outcome": "failed", "crash": {"path": "/testbed/tests/test_utils.py", "lineno": 24, "message": "AssertionError"}, "traceback": [{"path": "tests/test_utils.py", "lineno": 24, "message": "AssertionError"}], "longrepr": "width = 7, expected = 'foobar'\n\n    @mark.parametrize(\n        \"width,expected\",\n        (\n            (-1, ValueError),\n            (0, \"\"),\n            (1, \".\"),\n            (2, \"..\"),\n            (3, \"...\"),\n            (4, \"f...\"),\n            (5, \"fo...\"),\n            (6, \"foobar\"),\n            (7, \"foobar\"),\n        ),\n    )\n    def test_shorten(width: int, expected: Union[str, Type[Exception]]) -> None:\n        if isinstance(expected, str):\n>           assert shorten(\"foobar\", width) == expected\nE           AssertionError\n\ntests/test_utils.py:24: AssertionError"}, "teardown": {"duration": 0.00015994600000013293, "outcome": "passed"}}, {"nodeid": "tests/test_utils.py::test_extract_regex[(?P<month>\\\\w+)\\\\s*(?P<day>\\\\d+)\\\\s*\\\\,?\\\\s*(?P<year>\\\\d+)-October  25, 2019-True-expected0]", "lineno": 29, "outcome": "failed", "keywords": ["test_extract_regex[(?P<month>\\\\w+)\\\\s*(?P<day>\\\\d+)\\\\s*\\\\,?\\\\s*(?P<year>\\\\d+)-October  25, 2019-True-expected0]", "parametrize", "pytestmark", "(?P<month>\\\\w+)\\\\s*(?P<day>\\\\d+)\\\\s*\\\\,?\\\\s*(?P<year>\\\\d+)-October  25, 2019-True-expected0", "test_utils.py", "tests", "testbed", ""], "setup": {"duration": 0.0002607070000006928, "outcome": "passed"}, "call": {"duration": 0.00014999899999956767, "outcome": "failed", "crash": {"path": "/testbed/tests/test_utils.py", "lineno": 77, "message": "AssertionError"}, "traceback": [{"path": "tests/test_utils.py", "lineno": 77, "message": "AssertionError"}], "longrepr": "regex = '(?P<month>\\\\w+)\\\\s*(?P<day>\\\\d+)\\\\s*\\\\,?\\\\s*(?P<year>\\\\d+)'\ntext = 'October  25, 2019', replace_entities = True\nexpected = ['October', '25', '2019']\n\n    @mark.parametrize(\n        \"regex, text, replace_entities, expected\",\n        (\n            [\n                r\"(?P<month>\\w+)\\s*(?P<day>\\d+)\\s*\\,?\\s*(?P<year>\\d+)\",\n                \"October  25, 2019\",\n                True,\n                [\"October\", \"25\", \"2019\"],\n            ],\n            [\n                r\"(?P<month>\\w+)\\s*(?P<day>\\d+)\\s*\\,?\\s*(?P<year>\\d+)\",\n                \"October  25 2019\",\n                True,\n                [\"October\", \"25\", \"2019\"],\n            ],\n            [\n                r\"(?P<extract>\\w+)\\s*(?P<day>\\d+)\\s*\\,?\\s*(?P<year>\\d+)\",\n                \"October  25 2019\",\n                True,\n                [\"October\"],\n            ],\n            [\n                r\"\\w+\\s*\\d+\\s*\\,?\\s*\\d+\",\n                \"October  25 2019\",\n                True,\n                [\"October  25 2019\"],\n            ],\n            [\n                r\"^.*$\",\n                \"&quot;sometext&quot; &amp; &quot;moretext&quot;\",\n                True,\n                ['\"sometext\" &amp; \"moretext\"'],\n            ],\n            [\n                r\"^.*$\",\n                \"&quot;sometext&quot; &amp; &quot;moretext&quot;\",\n                False,\n                [\"&quot;sometext&quot; &amp; &quot;moretext&quot;\"],\n            ],\n        ),\n    )\n    def test_extract_regex(\n        regex: Union[str, Pattern[str]],\n        text: str,\n        replace_entities: bool,\n        expected: List[str],\n    ) -> None:\n>       assert extract_regex(regex, text, replace_entities) == expected\nE       AssertionError\n\ntests/test_utils.py:77: AssertionError"}, "teardown": {"duration": 0.00017276900000062767, "outcome": "passed"}}, {"nodeid": "tests/test_utils.py::test_extract_regex[(?P<month>\\\\w+)\\\\s*(?P<day>\\\\d+)\\\\s*\\\\,?\\\\s*(?P<year>\\\\d+)-October  25 2019-True-expected1]", "lineno": 29, "outcome": "failed", "keywords": ["test_extract_regex[(?P<month>\\\\w+)\\\\s*(?P<day>\\\\d+)\\\\s*\\\\,?\\\\s*(?P<year>\\\\d+)-October  25 2019-True-expected1]", "parametrize", "pytestmark", "(?P<month>\\\\w+)\\\\s*(?P<day>\\\\d+)\\\\s*\\\\,?\\\\s*(?P<year>\\\\d+)-October  25 2019-True-expected1", "test_utils.py", "tests", "testbed", ""], "setup": {"duration": 0.00021437100000021303, "outcome": "passed"}, "call": {"duration": 0.00015084400000020537, "outcome": "failed", "crash": {"path": "/testbed/tests/test_utils.py", "lineno": 77, "message": "AssertionError"}, "traceback": [{"path": "tests/test_utils.py", "lineno": 77, "message": "AssertionError"}], "longrepr": "regex = '(?P<month>\\\\w+)\\\\s*(?P<day>\\\\d+)\\\\s*\\\\,?\\\\s*(?P<year>\\\\d+)'\ntext = 'October  25 2019', replace_entities = True\nexpected = ['October', '25', '2019']\n\n    @mark.parametrize(\n        \"regex, text, replace_entities, expected\",\n        (\n            [\n                r\"(?P<month>\\w+)\\s*(?P<day>\\d+)\\s*\\,?\\s*(?P<year>\\d+)\",\n                \"October  25, 2019\",\n                True,\n                [\"October\", \"25\", \"2019\"],\n            ],\n            [\n                r\"(?P<month>\\w+)\\s*(?P<day>\\d+)\\s*\\,?\\s*(?P<year>\\d+)\",\n                \"October  25 2019\",\n                True,\n                [\"October\", \"25\", \"2019\"],\n            ],\n            [\n                r\"(?P<extract>\\w+)\\s*(?P<day>\\d+)\\s*\\,?\\s*(?P<year>\\d+)\",\n                \"October  25 2019\",\n                True,\n                [\"October\"],\n            ],\n            [\n                r\"\\w+\\s*\\d+\\s*\\,?\\s*\\d+\",\n                \"October  25 2019\",\n                True,\n                [\"October  25 2019\"],\n            ],\n            [\n                r\"^.*$\",\n                \"&quot;sometext&quot; &amp; &quot;moretext&quot;\",\n                True,\n                ['\"sometext\" &amp; \"moretext\"'],\n            ],\n            [\n                r\"^.*$\",\n                \"&quot;sometext&quot; &amp; &quot;moretext&quot;\",\n                False,\n                [\"&quot;sometext&quot; &amp; &quot;moretext&quot;\"],\n            ],\n        ),\n    )\n    def test_extract_regex(\n        regex: Union[str, Pattern[str]],\n        text: str,\n        replace_entities: bool,\n        expected: List[str],\n    ) -> None:\n>       assert extract_regex(regex, text, replace_entities) == expected\nE       AssertionError\n\ntests/test_utils.py:77: AssertionError"}, "teardown": {"duration": 0.00016815199999875574, "outcome": "passed"}}, {"nodeid": "tests/test_utils.py::test_extract_regex[(?P<extract>\\\\w+)\\\\s*(?P<day>\\\\d+)\\\\s*\\\\,?\\\\s*(?P<year>\\\\d+)-October  25 2019-True-expected2]", "lineno": 29, "outcome": "failed", "keywords": ["test_extract_regex[(?P<extract>\\\\w+)\\\\s*(?P<day>\\\\d+)\\\\s*\\\\,?\\\\s*(?P<year>\\\\d+)-October  25 2019-True-expected2]", "parametrize", "pytestmark", "(?P<extract>\\\\w+)\\\\s*(?P<day>\\\\d+)\\\\s*\\\\,?\\\\s*(?P<year>\\\\d+)-October  25 2019-True-expected2", "test_utils.py", "tests", "testbed", ""], "setup": {"duration": 0.0002145690000006084, "outcome": "passed"}, "call": {"duration": 0.00015456500000077256, "outcome": "failed", "crash": {"path": "/testbed/tests/test_utils.py", "lineno": 77, "message": "AssertionError"}, "traceback": [{"path": "tests/test_utils.py", "lineno": 77, "message": "AssertionError"}], "longrepr": "regex = '(?P<extract>\\\\w+)\\\\s*(?P<day>\\\\d+)\\\\s*\\\\,?\\\\s*(?P<year>\\\\d+)'\ntext = 'October  25 2019', replace_entities = True, expected = ['October']\n\n    @mark.parametrize(\n        \"regex, text, replace_entities, expected\",\n        (\n            [\n                r\"(?P<month>\\w+)\\s*(?P<day>\\d+)\\s*\\,?\\s*(?P<year>\\d+)\",\n                \"October  25, 2019\",\n                True,\n                [\"October\", \"25\", \"2019\"],\n            ],\n            [\n                r\"(?P<month>\\w+)\\s*(?P<day>\\d+)\\s*\\,?\\s*(?P<year>\\d+)\",\n                \"October  25 2019\",\n                True,\n                [\"October\", \"25\", \"2019\"],\n            ],\n            [\n                r\"(?P<extract>\\w+)\\s*(?P<day>\\d+)\\s*\\,?\\s*(?P<year>\\d+)\",\n                \"October  25 2019\",\n                True,\n                [\"October\"],\n            ],\n            [\n                r\"\\w+\\s*\\d+\\s*\\,?\\s*\\d+\",\n                \"October  25 2019\",\n                True,\n                [\"October  25 2019\"],\n            ],\n            [\n                r\"^.*$\",\n                \"&quot;sometext&quot; &amp; &quot;moretext&quot;\",\n                True,\n                ['\"sometext\" &amp; \"moretext\"'],\n            ],\n            [\n                r\"^.*$\",\n                \"&quot;sometext&quot; &amp; &quot;moretext&quot;\",\n                False,\n                [\"&quot;sometext&quot; &amp; &quot;moretext&quot;\"],\n            ],\n        ),\n    )\n    def test_extract_regex(\n        regex: Union[str, Pattern[str]],\n        text: str,\n        replace_entities: bool,\n        expected: List[str],\n    ) -> None:\n>       assert extract_regex(regex, text, replace_entities) == expected\nE       AssertionError\n\ntests/test_utils.py:77: AssertionError"}, "teardown": {"duration": 0.00018261399999985883, "outcome": "passed"}}, {"nodeid": "tests/test_utils.py::test_extract_regex[\\\\w+\\\\s*\\\\d+\\\\s*\\\\,?\\\\s*\\\\d+-October  25 2019-True-expected3]", "lineno": 29, "outcome": "failed", "keywords": ["test_extract_regex[\\\\w+\\\\s*\\\\d+\\\\s*\\\\,?\\\\s*\\\\d+-October  25 2019-True-expected3]", "parametrize", "pytestmark", "\\\\w+\\\\s*\\\\d+\\\\s*\\\\,?\\\\s*\\\\d+-October  25 2019-True-expected3", "test_utils.py", "tests", "testbed", ""], "setup": {"duration": 0.00021285399999904087, "outcome": "passed"}, "call": {"duration": 0.00014908600000040906, "outcome": "failed", "crash": {"path": "/testbed/tests/test_utils.py", "lineno": 77, "message": "AssertionError"}, "traceback": [{"path": "tests/test_utils.py", "lineno": 77, "message": "AssertionError"}], "longrepr": "regex = '\\\\w+\\\\s*\\\\d+\\\\s*\\\\,?\\\\s*\\\\d+', text = 'October  25 2019'\nreplace_entities = True, expected = ['October  25 2019']\n\n    @mark.parametrize(\n        \"regex, text, replace_entities, expected\",\n        (\n            [\n                r\"(?P<month>\\w+)\\s*(?P<day>\\d+)\\s*\\,?\\s*(?P<year>\\d+)\",\n                \"October  25, 2019\",\n                True,\n                [\"October\", \"25\", \"2019\"],\n            ],\n            [\n                r\"(?P<month>\\w+)\\s*(?P<day>\\d+)\\s*\\,?\\s*(?P<year>\\d+)\",\n                \"October  25 2019\",\n                True,\n                [\"October\", \"25\", \"2019\"],\n            ],\n            [\n                r\"(?P<extract>\\w+)\\s*(?P<day>\\d+)\\s*\\,?\\s*(?P<year>\\d+)\",\n                \"October  25 2019\",\n                True,\n                [\"October\"],\n            ],\n            [\n                r\"\\w+\\s*\\d+\\s*\\,?\\s*\\d+\",\n                \"October  25 2019\",\n                True,\n                [\"October  25 2019\"],\n            ],\n            [\n                r\"^.*$\",\n                \"&quot;sometext&quot; &amp; &quot;moretext&quot;\",\n                True,\n                ['\"sometext\" &amp; \"moretext\"'],\n            ],\n            [\n                r\"^.*$\",\n                \"&quot;sometext&quot; &amp; &quot;moretext&quot;\",\n                False,\n                [\"&quot;sometext&quot; &amp; &quot;moretext&quot;\"],\n            ],\n        ),\n    )\n    def test_extract_regex(\n        regex: Union[str, Pattern[str]],\n        text: str,\n        replace_entities: bool,\n        expected: List[str],\n    ) -> None:\n>       assert extract_regex(regex, text, replace_entities) == expected\nE       AssertionError\n\ntests/test_utils.py:77: AssertionError"}, "teardown": {"duration": 0.00020714299999902153, "outcome": "passed"}}, {"nodeid": "tests/test_utils.py::test_extract_regex[^.*$-&quot;sometext&quot; &amp; &quot;moretext&quot;-True-expected4]", "lineno": 29, "outcome": "failed", "keywords": ["test_extract_regex[^.*$-&quot;sometext&quot; &amp; &quot;moretext&quot;-True-expected4]", "parametrize", "pytestmark", "^.*$-&quot;sometext&quot; &amp; &quot;moretext&quot;-True-expected4", "test_utils.py", "tests", "testbed", ""], "setup": {"duration": 0.00021317699999912065, "outcome": "passed"}, "call": {"duration": 0.00016391200000143158, "outcome": "failed", "crash": {"path": "/testbed/tests/test_utils.py", "lineno": 77, "message": "AssertionError"}, "traceback": [{"path": "tests/test_utils.py", "lineno": 77, "message": "AssertionError"}], "longrepr": "regex = '^.*$', text = '&quot;sometext&quot; &amp; &quot;moretext&quot;'\nreplace_entities = True, expected = ['\"sometext\" &amp; \"moretext\"']\n\n    @mark.parametrize(\n        \"regex, text, replace_entities, expected\",\n        (\n            [\n                r\"(?P<month>\\w+)\\s*(?P<day>\\d+)\\s*\\,?\\s*(?P<year>\\d+)\",\n                \"October  25, 2019\",\n                True,\n                [\"October\", \"25\", \"2019\"],\n            ],\n            [\n                r\"(?P<month>\\w+)\\s*(?P<day>\\d+)\\s*\\,?\\s*(?P<year>\\d+)\",\n                \"October  25 2019\",\n                True,\n                [\"October\", \"25\", \"2019\"],\n            ],\n            [\n                r\"(?P<extract>\\w+)\\s*(?P<day>\\d+)\\s*\\,?\\s*(?P<year>\\d+)\",\n                \"October  25 2019\",\n                True,\n                [\"October\"],\n            ],\n            [\n                r\"\\w+\\s*\\d+\\s*\\,?\\s*\\d+\",\n                \"October  25 2019\",\n                True,\n                [\"October  25 2019\"],\n            ],\n            [\n                r\"^.*$\",\n                \"&quot;sometext&quot; &amp; &quot;moretext&quot;\",\n                True,\n                ['\"sometext\" &amp; \"moretext\"'],\n            ],\n            [\n                r\"^.*$\",\n                \"&quot;sometext&quot; &amp; &quot;moretext&quot;\",\n                False,\n                [\"&quot;sometext&quot; &amp; &quot;moretext&quot;\"],\n            ],\n        ),\n    )\n    def test_extract_regex(\n        regex: Union[str, Pattern[str]],\n        text: str,\n        replace_entities: bool,\n        expected: List[str],\n    ) -> None:\n>       assert extract_regex(regex, text, replace_entities) == expected\nE       AssertionError\n\ntests/test_utils.py:77: AssertionError"}, "teardown": {"duration": 0.000174697000000279, "outcome": "passed"}}, {"nodeid": "tests/test_utils.py::test_extract_regex[^.*$-&quot;sometext&quot; &amp; &quot;moretext&quot;-False-expected5]", "lineno": 29, "outcome": "failed", "keywords": ["test_extract_regex[^.*$-&quot;sometext&quot; &amp; &quot;moretext&quot;-False-expected5]", "parametrize", "pytestmark", "^.*$-&quot;sometext&quot; &amp; &quot;moretext&quot;-False-expected5", "test_utils.py", "tests", "testbed", ""], "setup": {"duration": 0.00021642299999946601, "outcome": "passed"}, "call": {"duration": 0.00015058199999984367, "outcome": "failed", "crash": {"path": "/testbed/tests/test_utils.py", "lineno": 77, "message": "AssertionError"}, "traceback": [{"path": "tests/test_utils.py", "lineno": 77, "message": "AssertionError"}], "longrepr": "regex = '^.*$', text = '&quot;sometext&quot; &amp; &quot;moretext&quot;'\nreplace_entities = False\nexpected = ['&quot;sometext&quot; &amp; &quot;moretext&quot;']\n\n    @mark.parametrize(\n        \"regex, text, replace_entities, expected\",\n        (\n            [\n                r\"(?P<month>\\w+)\\s*(?P<day>\\d+)\\s*\\,?\\s*(?P<year>\\d+)\",\n                \"October  25, 2019\",\n                True,\n                [\"October\", \"25\", \"2019\"],\n            ],\n            [\n                r\"(?P<month>\\w+)\\s*(?P<day>\\d+)\\s*\\,?\\s*(?P<year>\\d+)\",\n                \"October  25 2019\",\n                True,\n                [\"October\", \"25\", \"2019\"],\n            ],\n            [\n                r\"(?P<extract>\\w+)\\s*(?P<day>\\d+)\\s*\\,?\\s*(?P<year>\\d+)\",\n                \"October  25 2019\",\n                True,\n                [\"October\"],\n            ],\n            [\n                r\"\\w+\\s*\\d+\\s*\\,?\\s*\\d+\",\n                \"October  25 2019\",\n                True,\n                [\"October  25 2019\"],\n            ],\n            [\n                r\"^.*$\",\n                \"&quot;sometext&quot; &amp; &quot;moretext&quot;\",\n                True,\n                ['\"sometext\" &amp; \"moretext\"'],\n            ],\n            [\n                r\"^.*$\",\n                \"&quot;sometext&quot; &amp; &quot;moretext&quot;\",\n                False,\n                [\"&quot;sometext&quot; &amp; &quot;moretext&quot;\"],\n            ],\n        ),\n    )\n    def test_extract_regex(\n        regex: Union[str, Pattern[str]],\n        text: str,\n        replace_entities: bool,\n        expected: List[str],\n    ) -> None:\n>       assert extract_regex(regex, text, replace_entities) == expected\nE       AssertionError\n\ntests/test_utils.py:77: AssertionError"}, "teardown": {"duration": 0.00016396700000065323, "outcome": "passed"}}]}