{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#_1","title":"Home","text":"<p>Commit-0 is a real-world AI coding challenge. Can your agent generate a working library from commit 0?</p> <p>The benchmark consists of 57 core Python libraries. Libraries are selected based on:</p> <ul> <li>Significant unit-test coverage</li> <li>Detailed specification and documentation</li> <li>Lint and type checking</li> </ul> <p>The commit0 tool allows you to:</p> <ul> <li>Efficiently run interactive tests in isolated environemnts</li> <li>Distribute testing and development across cloud systems</li> <li>Track and log all changes made throughout.</li> </ul> Name Repo Commit0 Tests minitorch [orig] [commit0] 230 simpy [orig] [commit0] 140 bitstring [orig] [commit0] 834 tinydb [orig] [commit0] 201 marshmallow [orig] [commit0] 1229 python-prompt-toolkit [orig] [commit0] 151 parsel [orig] [commit0] 343 pyjwt pyjwt [orig] [commit0] 259 networkx [orig] [commit0] 5440 graphene [orig] [commit0] 447 tlslite-ng tlslite-ng [orig] [commit0] 1653 wcwidth wcwidth [orig] [commit0] 38 chardet chardet [orig] [commit0] 376 dnspython dnspython [orig] [commit0] 1304 imapclient imapclient [orig] [commit0] 267 virtualenv [orig] [commit0] 284 pexpect pexpect [orig] [commit0] 255 web3.py [orig] [commit0] 40433 babel [orig] [commit0] 5663 geopandas [orig] [commit0] 2196 dulwich dulwich [orig] [commit0] 1522 flask [orig] [commit0] 477 voluptuous voluptuous [orig] [commit0] 149 jinja [orig] [commit0] 851 seaborn [orig] [commit0] 2362 requests requests [orig] [commit0] 590 scrapy [orig] [commit0] 2904 fastapi [orig] [commit0] 2013 click [orig] [commit0] 589 python-rsa [orig] [commit0] 86 statsmodels [orig] [commit0] 17669 more-itertools more-itertools [orig] [commit0] 662 moviepy [orig] [commit0] 109 deprecated deprecated [orig] [commit0] 171 pydantic [orig] [commit0] 5091 loguru [orig] [commit0] 1461 pypdf [orig] [commit0] 911 attrs [orig] [commit0] 1414 mimesis [orig] [commit0] 6159 cookiecutter [orig] [commit0] 367 tornado [orig] [commit0] 1150 imbalanced-learn [orig] [commit0] 2310 python-progressbar [orig] [commit0] 385 PyBoy [orig] [commit0] 201 pytest [orig] [commit0] 3612 pylint [orig] [commit0] 1878 sphinx [orig] [commit0] 2187 joblib [orig] [commit0] 1450 xarray [orig] [commit0] 15643 cachetools cachetools [orig] [commit0] 215 paramiko paramiko [orig] [commit0] 557 fabric [orig] [commit0] 353 filesystem_spec [orig] [commit0] 698 jedi jedi [orig] [commit0] 3854 sqlparse sqlparse [orig] [commit0] 461 portalocker [orig] [commit0] 38"},{"location":"about/","title":"About","text":"<p>Commit0 is ..</p>"},{"location":"analysis/","title":"Submission Analysis","text":"Name Summary reference teststr"},{"location":"analysis_reference/","title":"Analysis reference","text":"Repository Summary simpy dummy strings cachetools 215 / 215 cookiecutter 367 / 371"},{"location":"analysis_reference_cachetools/","title":"Analysis reference cachetools","text":"<p>back</p>"},{"location":"analysis_reference_cachetools/#reference-cachetools-pytest-summary","title":"reference &gt; cachetools## Pytest Summary:","text":"status count passed 215 total 215 collected 215"},{"location":"analysis_reference_cachetools/#failed-pytest-outputs","title":"Failed pytest outputs:","text":""},{"location":"analysis_reference_cookiecutter/","title":"Analysis reference cookiecutter","text":"<p>back to reference summary</p>"},{"location":"analysis_reference_cookiecutter/#submission-name-reference","title":"Submission Name: reference","text":""},{"location":"analysis_reference_cookiecutter/#repository-cookiecutter","title":"Repository: cookiecutter","text":""},{"location":"analysis_reference_cookiecutter/#pytest-summary","title":"Pytest Summary:","text":"status count passed 367 skipped 4 total 371 collected 371"},{"location":"analysis_reference_cookiecutter/#failed-pytest-outputs","title":"Failed pytest outputs:","text":""},{"location":"analysis_reference_cookiecutter/#test_generate_hookspytest_run_shell_hooks_win","title":"test_generate_hooks.py::test_run_shell_hooks_win","text":"<pre>test_generate_hooks.py::test_run_shell_hooks_win</pre><pre>\n('/testbed/tests/test_generate_hooks.py', 195, 'Skipped: Win only test')\n</pre>"},{"location":"analysis_reference_cookiecutter/#test_promptpytest_cookiecutter_nested_templates_invalid_win_paths","title":"test_prompt.py::test_cookiecutter_nested_templates_invalid_win_paths[]","text":"<pre>test_prompt.py::test_cookiecutter_nested_templates_invalid_win_paths[]</pre><pre>\n('/testbed/tests/test_prompt.py', 623, 'Skipped: Win only test')\n</pre>"},{"location":"analysis_reference_cookiecutter/#tmp","title":"tmp]","text":"<pre>tmp]</pre><pre>\n('/testbed/tests/test_prompt.py', 623, 'Skipped: Win only test')\n</pre>"},{"location":"analysis_reference_cookiecutter/#tmp_1","title":"tmp]","text":"<pre>tmp]</pre><pre>\n('/testbed/tests/test_prompt.py', 623, 'Skipped: Win only test')\n</pre>"},{"location":"analysis_reference_deprecated/","title":"Analysis reference deprecated","text":"<p>back</p>"},{"location":"analysis_reference_deprecated/#reference-deprecated-pytest-summary","title":"reference &gt; deprecated## Pytest Summary:","text":"status count passed 171 total 171 collected 171"},{"location":"analysis_reference_deprecated/#failed-pytest-outputs","title":"Failed pytest outputs:","text":""},{"location":"analysis_reference_imapclient/","title":"Analysis reference imapclient","text":"<p>back</p>"},{"location":"analysis_reference_imapclient/#reference-imapclient-pytest-summary","title":"reference &gt; imapclient## Pytest Summary:","text":"status count passed 267 total 267 collected 267"},{"location":"analysis_reference_imapclient/#failed-pytest-outputs","title":"Failed pytest outputs:","text":""},{"location":"analysis_reference_jinja/","title":"Analysis reference jinja","text":"<p>back</p>"},{"location":"analysis_reference_jinja/#reference-jinja-pytest-summary","title":"reference &gt; jinja## Pytest Summary:","text":"status count passed 851 total 851 collected 851"},{"location":"analysis_reference_jinja/#failed-pytest-outputs","title":"Failed pytest outputs:","text":""},{"location":"analysis_reference_marshmallow/","title":"Analysis reference marshmallow","text":"<p>back</p>"},{"location":"analysis_reference_marshmallow/#reference-marshmallow-pytest-summary","title":"reference &gt; marshmallow## Pytest Summary:","text":"status count passed 1229 total 1229 collected 1229"},{"location":"analysis_reference_marshmallow/#failed-pytest-outputs","title":"Failed pytest outputs:","text":""},{"location":"analysis_reference_simpy/","title":"Analysis reference simpy","text":"<p>back</p>"},{"location":"analysis_reference_simpy/#reference-simpy-pytest-summary","title":"reference &gt; simpy## Pytest Summary:","text":"status count passed 140 total 140 collected 150 deselected 10"},{"location":"analysis_reference_simpy/#failed-pytest-outputs","title":"Failed pytest outputs:","text":""},{"location":"analysis_reference_tinydb/","title":"Analysis reference tinydb","text":"<p>back</p>"},{"location":"analysis_reference_tinydb/#reference-tinydb-pytest-summary","title":"reference &gt; tinydb## Pytest Summary:","text":"status count passed 201 total 201 collected 201"},{"location":"analysis_reference_tinydb/#failed-pytest-outputs","title":"Failed pytest outputs:","text":""},{"location":"analysis_reference_voluptuous/","title":"Analysis reference voluptuous","text":"<p>back</p>"},{"location":"analysis_reference_voluptuous/#reference-voluptuous-pytest-summary-tests","title":"reference &gt; voluptuous## Pytest Summary: tests","text":"status count passed 149 total 149 collected 149"},{"location":"analysis_reference_voluptuous/#failed-pytest-outputs-tests","title":"Failed pytest outputs: tests","text":""},{"location":"analysis_reference_wcwidth/","title":"Analysis reference wcwidth","text":"<p>back</p>"},{"location":"analysis_reference_wcwidth/#reference-wcwidth-pytest-summary","title":"reference &gt; wcwidth## Pytest Summary:","text":"status count passed 38 skipped 1 total 39 collected 39"},{"location":"analysis_reference_wcwidth/#failed-pytest-outputs","title":"Failed pytest outputs:","text":""},{"location":"analysis_reference_wcwidth/#test_table_integritypytest_verify_table_integrity","title":"test_table_integrity.py::test_verify_table_integrity","text":"<pre>test_table_integrity.py::test_verify_table_integrity</pre><pre>\n('/testbed/tests/test_table_integrity.py', 10, 'Skipped: Test only with a single version of python')\n</pre>"},{"location":"distributed/","title":"Distributed","text":"<p>One of the main advantages of <code>commit0</code> is that it can run a range of unit tests in distributed environments.</p> <p>By default, the library is configured to work with modal.</p> <pre><code>pip install modal\nmodal token new\n</code></pre>"},{"location":"distributed/#modal-setup","title":"Modal Setup","text":"<p>To enable distributed run, first create a file called <code>distributed.yaml</code></p> <pre><code>backend: modal\nbase_dir: repos.dist/\n</code></pre> <p>You can pass this configuration file as an argumnet to clone.</p> <pre><code>commit0 clone lite --cfg=distributed\n</code></pre> <p>Next to run tests you can run the standard test command.</p> <pre><code>commit0 test simpy master tests/test_event.py::test_succeed --cfg=distributed\n</code></pre>"},{"location":"repos/","title":"Extending","text":"<p>Directions for how to add new repositories.</p>"},{"location":"setup/","title":"Quickstart","text":""},{"location":"setup/#install","title":"Install","text":"<p>First be sure that you have docker tools installed.</p> <pre><code>apt install docker\n</code></pre> <p>To install the benchmark run,</p> <pre><code>pip install commit0\n</code></pre>"},{"location":"setup/#commands","title":"Commands","text":"<p>The system is a command-line tool that allows you to run unit-tests on a variety of libraries in isolated environments. To get started with the full setup run the <code>setup</code> command which will install a clone the code of a subset of libraries to your <code>repos/</code> directory.</p> <pre><code>commit0 setup lite\n</code></pre> <p>Next run the <code>build</code> command which will configure Docker containers for each of the libraries with isolated virtual environments. The command uses the uv library for efficient builds.</p> <pre><code>commit0 build lit\n</code></pre> <p>The main operation you can do with these enviroments is to run tests. Here we run a test in the <code>simpy</code> library.</p> <pre><code>commit0 test simpy tests/test_event.py::test_succeed\n</code></pre> <p>This test should run and pass, but others will fail.</p> <pre><code>commit0 test minitorch tests/test_operators.py::test_relu\n</code></pre> <p>Let's now manually go in and change that repo. This is all just standard shell commands.</p> <pre><code>cd repos/minitorch/\ngit checkout -b mychange\n</code></pre> <p>And apply and commit this patch.</p> <pre><code>--- a/minitorch/operators.py\n+++ b/minitorch/operators.py\n@@ -81,7 +81,7 @@ def relu(x: float) -&gt; float:\n     (See https://en.wikipedia.org/wiki/Rectifier_(neural_networks) .)\n     \"\"\"\n     # TODO: Implement for Task 0.1.\n-    raise NotImplementedError('Need to implement for Task 0.1')\n+    return 1. if x &gt; 0. else 0.\n</code></pre> <p>Once this is done we can run <code>test</code> with a branch and the environment will sync and run.</p> <pre><code>commit0 test minitorch branch=mychange tests/test_operators.py::test_relu\n</code></pre>"},{"location":"setup/#running-an-agent","title":"Running an Agent","text":"<p>Next we will see how this can be run with an AI agent system. We will use Aider which is a nice command-line oriented agent system.</p> <p>To setup Aider first set your api key. We recommend using Claude Sonnet.</p> <pre><code># Work with Claude 3.5 Sonnet on your repo\nexport ANTHROPIC_API_KEY=your-key-goes-here\n</code></pre> <p>Once this is setup you can run Aider with the following command. This will edit the files locally in your branch, but run the tests inside the environment.</p> <pre><code>aider --model sonnet --file repos/minitorch/operators.py --message \"fill in\" \\\n     --auto-test --test \\\n     --test-cmd 'commit0 test minitorch branch=mychange tests/test_operators.py::test_relu' \\\n     --yes\n</code></pre> <p>This will run an LLM agent that will try to fill in the functions in one file of the minitorch library.</p> <p>For a full example baseline system that tries to solve all the tests in the library see the baseline documentation.</p>"},{"location":"setup/#distributed-tests","title":"Distributed Tests","text":"<p>One of the main advantages of <code>commit0</code> is that it can run a range of unit tests in distributed environments.</p> <p>By default, the library is configured to work with modal.</p> <pre><code>pip install modal\nmodal token new\n</code></pre> <p>To enable distributed run, first create a file called <code>distributed.yaml</code></p> <pre><code>backend: modal\nbase_dir: repos.dist/\n</code></pre> <p>You can pass this configuration file as an argumnet to clone.</p> <pre><code>commit0 clone lite --cfg=distributed.yaml\n</code></pre> <p>Next to run tests you can run the standard test command.</p> <pre><code>commit0 test simpy master tests/test_event.py::test_succeed --cfg=distributed.yaml\n</code></pre>"}]}